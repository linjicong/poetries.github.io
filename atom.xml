<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Poetry&#39;s Blog</title>
  <subtitle>Choose a gesture to allow yourself to live irreplaceable.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.poetries.top/"/>
  <updated>2017-06-11T07:22:47.753Z</updated>
  <id>http://blog.poetries.top/</id>
  
  <author>
    <name>Poetry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>移动端适配</title>
    <link href="http://blog.poetries.top/2017/05/23/mobile-adaptation/"/>
    <id>http://blog.poetries.top/2017/05/23/mobile-adaptation/</id>
    <published>2017-05-23T13:35:08.000Z</published>
    <updated>2017-06-11T07:22:47.753Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>物理像素:移动端设备的分辨率</li>
<li>独立像素:css的像素  320  375 </li>
<li>像素比 = 物理像素/独立像素</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p><code>width=device-width</code>  设备宽度 <code>640px</code>(低版本的安卓手机不支持数字) 这个属性在不支持<code>IE</code></p>
</li>
<li><p><code>initial-scale=1.0</code>(初始缩放比),能够起到和<code>width=device-width</code>相同的效果(把理想的视窗设置为设备的宽度)     两个配合使用就能够很好的解决移动端各设备的适配问题</p>
</li>
<li><p><code>maximum-scale=1.0</code>最大缩放比例</p>
</li>
<li><code>user-scalable=0</code>禁止缩放</li>
<li><code>minimum-scale=1.0</code> 最小缩放比例</li>
</ul>
<h3 id="移动端布局方法"><a href="#移动端布局方法" class="headerlink" title="移动端布局方法"></a>移动端布局方法</h3><hr>
<ul>
<li><p>1、流式布局  与设备等宽 做自适应  100%或者具体的像素值</p>
</li>
<li><p>2、<code>rem</code>做盒子的宽度，viewport缩放</p>
</li>
<li><p>3、固定宽度  <code>viewport</code>缩放  <code>content=&quot;width=640, initial-scale=0.5, maximum-scale=0.5, user-scalable=0&quot;</code>（用的比较少）</p>
</li>
<li><p>4、<code>vw/vh</code> 相对于viewport理想视窗(设备)的比例(兼容性不好)<br>  <code>1vw = 10%</code>设备宽 <code>10vw</code></p>
</li>
</ul>
<h3 id="meta标签属性设置"><a href="#meta标签属性设置" class="headerlink" title="meta标签属性设置"></a>meta标签属性设置</h3><hr>
<p><code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge chrome=1&quot;&gt;</code></p>
<ul>
<li>IE8<code>浏览器的显示方式:</code>IE=edge<code>以</code>IE`最高版本显示</li>
<li>chrome=1 以谷歌浏览器模式渲染(GCF(Google Chrome Frame))</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;referrer&quot; content=&quot;never&quot;&gt;</div></pre></td></tr></table></figure>
<ul>
<li>referrer 告诉浏览器链接来源于哪里(计算网页上链接的访问量)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no,email=no,adress=no&quot;&gt;</div></pre></td></tr></table></figure>
<ul>
<li>格式检测:（数字、邮箱、地址） no不识别为电话号码、邮箱、地址</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</div></pre></td></tr></table></figure>
<ul>
<li>删除默认的苹果工具栏、菜单栏(全屏显示)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;apple-touch-fullscreen&quot; =&quot;yes&quot;&gt;</div></pre></td></tr></table></figure>
<ul>
<li>全屏显示</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;&gt;</div></pre></td></tr></table></figure>
<ul>
<li>设置app应用下状态条的颜色</li>
<li>默认值default (白色)  black（黑色）</li>
<li><code>black-translucent</code>（灰色半透明）若果设置为这个值会占据页面的<code>px</code>位置浮在页面上方<code>20px</code>高度 <code>iphone4</code>是<code>40px</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</div></pre></td></tr></table></figure>
<ul>
<li><code>360</code>模式固定为极速模式</li>
</ul>
<h3 id="常见的meta属性"><a href="#常见的meta属性" class="headerlink" title="常见的meta属性"></a>常见的meta属性</h3><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot;&gt;</div><div class="line">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</div><div class="line">&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black&quot;&gt;</div><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0，minimum-scale=1.0&quot;&gt;</div></pre></td></tr></table></figure>
<h3 id="link-扩展"><a href="#link-扩展" class="headerlink" title="link 扩展"></a>link 扩展</h3><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;dns-prefetch&quot; href=&quot;xxx.com&quot;&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p> 预解析技术，当浏览网页时，浏览器会在加载页面的时对页面中的域名进行解析缓存，当我们点击这些网页的链接时就不需要再进行DNS的解析，减少用户的等待时间，提高用户的体验度</p>
</blockquote>
<ul>
<li><code>rem</code>  根目录 <code>html</code> 的<code>font-size</code>尺寸默认为<code>16px</code>  <code>1rem = 16px;</code></li>
<li><code>1rem = html</code>的<code>font-size</code>的尺寸大小</li>
</ul>
<h3 id="参考学习资料"><a href="#参考学习资料" class="headerlink" title="参考学习资料"></a>参考学习资料</h3><hr>
<ul>
<li><a href="https://h5.m.taobao.com/#index" target="_blank" rel="external">https://h5.m.taobao.com/#index</a> 手机淘宝 rem</li>
<li><a href="http://m.jd.com/" target="_blank" rel="external">http://m.jd.com/</a>  手机京东 100%</li>
<li><a href="http://m.lizhi.fm/" target="_blank" rel="external">http://m.lizhi.fm/</a> 荔枝 640视窗</li>
<li><a href="http://jx.tmall.com/" target="_blank" rel="external">http://jx.tmall.com/</a> 天猫 100%</li>
<li><a href="http://3g.163.com/touch/all?nav=1&amp;version=v_standard" target="_blank" rel="external">http://3g.163.com/touch/all?nav=1&amp;version=v_standard</a>   网易 rem</li>
</ul>
<ul>
<li><a href="http://www.cnblogs.com/2050/p/3877280.html" target="_blank" rel="external">http://www.cnblogs.com/2050/p/3877280.html</a>  viewport 解析</li>
<li><a href="http://ymblog.net/2015/07/01/%E7%A7%BB%E5%8A%A8%E5%89%8D%E7%AB%AFmeta%E6%A0%87%E7%AD%BE%E8%BD%AC/" target="_blank" rel="external">http://ymblog.net/2015/07/01/%E7%A7%BB%E5%8A%A8%E5%89%8D%E7%AB%AFmeta%E6%A0%87%E7%AD%BE%E8%BD%AC/</a>  meta解析</li>
<li><a href="http://ljinkai.github.io/2015/06/06/mobile-web-skill/" target="_blank" rel="external">http://ljinkai.github.io/2015/06/06/mobile-web-skill/</a>  移动端布局注意技巧</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;物理像素:移动端设备的分辨率&lt;/li&gt;
&lt;li&gt;独立像素:css的像素  320  375 &lt;/li&gt;
&lt;li&gt;像素比 = 物理像素/独立像素&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="HTML5" scheme="http://blog.poetries.top/tags/HTML5/"/>
    
      <category term="移动端" scheme="http://blog.poetries.top/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>forever and pm2部署nodejs项目</title>
    <link href="http://blog.poetries.top/2017/05/09/forever-pm2/"/>
    <id>http://blog.poetries.top/2017/05/09/forever-pm2/</id>
    <published>2017-05-09T14:50:08.000Z</published>
    <updated>2017-06-11T07:22:47.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、forever"><a href="#一、forever" class="headerlink" title="一、forever"></a>一、forever</h2><blockquote>
<p><code>forever</code>则可以在<code>cmd</code>或<code>ssh</code>连接断开时,让项目一直运行,而且可以在项目崩溃时自动重启</p>
</blockquote>
<ul>
<li>安装 <code>npm install -g forever</code></li>
<li><code>forever</code>的帮助手册  <code>forever --help</code></li>
<li>使用<code>forever</code>启动项目 <code>forever start app.js</code></li>
<li>使用<code>forever</code>停止项目 <code>forever stop app.js</code></li>
<li>列出所有通过<code>forever</code>管理的项目 <code>forever list</code></li>
<li>监视项目中的文件,当文件有变动时重启项目 <code>forever -w start app.js</code></li>
</ul>
<h2 id="二、pm2"><a href="#二、pm2" class="headerlink" title="二、pm2"></a>二、pm2</h2><ul>
<li>安装pm2 <code>npm install -g pm2</code></li>
<li>运行<code>pm2 start app.js</code></li>
<li>查看运行状态 <code>pm2 list</code></li>
<li>追踪资源运行情况 <code>pm2 monit</code></li>
<li>查看日志 <code>pm2 logs</code></li>
<li>重启应用 <code>pm2 restart appId</code></li>
<li>停止应用  <code>pm2 stop app.js</code></li>
<li>开启<code>api</code>访问 <code>pm2 web</code></li>
</ul>
<p><strong>预定义运行配置文件</strong></p>
<blockquote>
<p>我们可以预定义一个配置文件，然后制定运行这个配置文件，比如我们定义一个文件<code>process.json</code>，内容如下</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;apps&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;name&quot;: &quot;ANodeBlog&quot;,</div><div class="line">      &quot;script&quot;: &quot;bin/www&quot;,</div><div class="line">      &quot;watch&quot;: &quot;../&quot;,</div><div class="line">      &quot;log_date_format&quot;: &quot;YYYY-MM-DD HH:mm Z&quot;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后<code>pm2 start process.json</code></li>
</ul>
<p><strong>pm2与forever对比</strong></p>
<table>
<thead>
<tr>
<th>Feature</th>
<th>Forever</th>
<th>PM2</th>
</tr>
</thead>
<tbody>
<tr>
<td>Keep Alive</td>
<td>✔</td>
<td>✔</td>
</tr>
<tr>
<td>Coffeescript</td>
<td>✔</td>
<td></td>
</tr>
<tr>
<td>Log aggregation</td>
<td></td>
<td>✔</td>
</tr>
<tr>
<td>API</td>
<td></td>
<td>✔</td>
</tr>
<tr>
<td>Terminal monitoring</td>
<td></td>
<td>✔</td>
</tr>
<tr>
<td>Clustering</td>
<td></td>
<td>✔</td>
</tr>
<tr>
<td>JSON configuration</td>
<td></td>
<td>✔</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、forever&quot;&gt;&lt;a href=&quot;#一、forever&quot; class=&quot;headerlink&quot; title=&quot;一、forever&quot;&gt;&lt;/a&gt;一、forever&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;forever&lt;/code&gt;则可以在&lt;code
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="Node" scheme="http://blog.poetries.top/tags/Node/"/>
    
      <category term="部署" scheme="http://blog.poetries.top/tags/%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>Nginx基础配置篇</title>
    <link href="http://blog.poetries.top/2017/05/08/nginx/"/>
    <id>http://blog.poetries.top/2017/05/08/nginx/</id>
    <published>2017-05-08T14:35:08.000Z</published>
    <updated>2017-06-11T07:22:47.753Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Nginx的启动、停止与重启"><a href="#Nginx的启动、停止与重启" class="headerlink" title="Nginx的启动、停止与重启"></a>Nginx的启动、停止与重启</h3><ul>
<li>建立软连接<code>Nginx</code>到<code>/usr/bin</code>目录下 <code>ln -s /usr/sbin/nginx /usr/bin</code></li>
</ul>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><ul>
<li>启动代码格式：<code>nginx</code>安装目录地址 <code>-c nginx</code>配置文件地址</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@LinuxServer sbin]# /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</div></pre></td></tr></table></figure>
<h4 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h4><blockquote>
<p> nginx的停止有三种方式</p>
</blockquote>
<p><strong>从容停止</strong></p>
<ul>
<li>查看进程号 <code>ps -ef|grep nginx</code></li>
</ul>
<p><img src="http://images2015.cnblogs.com/blog/848552/201601/848552-20160102182744854-1291053517.png" alt=""></p>
<ul>
<li>杀死进程 kill -QUIT 2072</li>
</ul>
<p><img src="http://images2015.cnblogs.com/blog/848552/201601/848552-20160102182652354-960281274.png" alt=""></p>
<p><strong>快速停止</strong></p>
<ul>
<li>查看进程号 <code>ps -ef|grep nginx</code></li>
</ul>
<p><img src="http://images2015.cnblogs.com/blog/848552/201601/848552-20160102183103651-1859453208.png" alt=""></p>
<ul>
<li>杀死进程 <code>kill -TERM 2132</code>  <code>kill -INT 2132</code></li>
</ul>
<p><img src="http://images2015.cnblogs.com/blog/848552/201601/848552-20160102183340010-2024212451.png" alt=""></p>
<ul>
<li>强制停止 <code>pkill -9 nginx</code></li>
</ul>
<p><strong>重启</strong></p>
<blockquote>
<p>验证<code>nginx</code>配置文件是否正确</p>
</blockquote>
<ul>
<li>方法一：进入<code>nginx</code>安装目录<code>sbin</code>下，输入命令<code>./nginx -t</code><br>看到如下显示<code>nginx.conf syntax is ok nginx.conf test is successful</code>说明配置文件正确</li>
</ul>
<p><img src="http://images2015.cnblogs.com/blog/848552/201601/848552-20160102184633432-1268782338.png" alt=""></p>
<ul>
<li>方法二：在启动命令<code>-c</code>前加<code>-t</code></li>
</ul>
<p><img src="http://images2015.cnblogs.com/blog/848552/201601/848552-20160102185023385-456612180.png" alt=""></p>
<p><strong>重启Nginx服务</strong></p>
<ul>
<li>方法一：进入<code>nginx</code>可执行目录<code>sbin</code>下，输入命令<code>./nginx -s reload</code>即可</li>
</ul>
<p><img src="http://images2015.cnblogs.com/blog/848552/201601/848552-20160102185521057-1341380905.png" alt=""></p>
<ul>
<li>方法二：查找当前<code>nginx</code>进程号，然后输入命令：<code>kill -HUP</code> 进程号 实现重启<code>nginx</code>服务<br><img src="http://images2015.cnblogs.com/blog/848552/201601/848552-20160102185838167-234856506.png" alt=""></li>
</ul>
<h3 id="Nginx基础配置"><a href="#Nginx基础配置" class="headerlink" title="Nginx基础配置"></a>Nginx基础配置</h3><ul>
<li>在<code>Nginx</code>目录下的<code>vhost或conf.d</code>目录下新建一个配置文件（如<code>poetries-80.conf</code>）</li>
<li>把server的内容配置进去</li>
<li>在<code>Nginx.conf</code>中的<code>http</code>下<code>include</code>配置文件</li>
<li>检测配置文件是否出错 <code>切换到/etc/nginx下 nginx -t</code></li>
<li>重新加载配置文件 <code>nginx -c /usr/local/etc/nginx/nginx.conf</code></li>
<li>在重启<code>Nginx</code>  <code>nginx -s reload</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">user  root;  <span class="comment">//Nginx需要有有一个用户</span></div><div class="line">worker_processes  <span class="number">2</span>; <span class="comment">// Nginx进程数 最大1024</span></div><div class="line">pid        conf/nginx.pid; </div><div class="line">worker_rlimit_nofile <span class="number">2048</span>;</div><div class="line">events &#123;</div><div class="line">    use epoll;</div><div class="line">    worker_connections  <span class="number">2048</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line"> </div><div class="line"></div><div class="line">	server &#123;</div><div class="line">       listen       <span class="number">80</span>;</div><div class="line">       server_name  <span class="number">119.29</span><span class="number">.145</span><span class="number">.252</span>;</div><div class="line">	   </div><div class="line">       location / &#123;</div><div class="line">           root   /usr/local/nginx/html;</div><div class="line">           index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line">   &#125;</div><div class="line">   server &#123;</div><div class="line">       listen       <span class="number">3001</span>;</div><div class="line">       server_name  <span class="number">119.29</span><span class="number">.145</span><span class="number">.252</span>;</div><div class="line">	   </div><div class="line">       location / &#123;</div><div class="line">           root   /usr/local/nginx/book;</div><div class="line">           index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line">   &#125;</div><div class="line">   server &#123;</div><div class="line">       listen       <span class="number">9000</span>;</div><div class="line">       server_name  <span class="number">119.29</span><span class="number">.145</span><span class="number">.252</span>;</div><div class="line">	   </div><div class="line">       location / &#123;</div><div class="line">           root   /usr/local/nginx/vue;</div><div class="line">           index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="一些错误"><a href="#一些错误" class="headerlink" title="一些错误"></a>一些错误</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx: [error] invalid PID number “” <span class="keyword">in</span> “/usr/local/<span class="keyword">var</span>/run/nginx/nginx.pid”</div></pre></td></tr></table></figure>
<ul>
<li>解决办法：<code>nginx -c /usr/local/etc/nginx/nginx.conf</code></li>
<li><code>nginx -s reload</code></li>
</ul>
<p><strong>权限问题导致Nginx 403 Forbidden错误的解决方法</strong></p>
<ul>
<li>在<code>nginx.conf</code>头部加入一行 <code>user  root;</code></li>
<li>重启<code>nginx</code>再访问，就可以正常访问了</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Nginx的启动、停止与重启&quot;&gt;&lt;a href=&quot;#Nginx的启动、停止与重启&quot; class=&quot;headerlink&quot; title=&quot;Nginx的启动、停止与重启&quot;&gt;&lt;/a&gt;Nginx的启动、停止与重启&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;建立软连接&lt;code&gt;Nginx
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="Nginx" scheme="http://blog.poetries.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>python 3.5下xadmin的使用方法</title>
    <link href="http://blog.poetries.top/2017/05/05/python3-xadmin/"/>
    <id>http://blog.poetries.top/2017/05/05/python3-xadmin/</id>
    <published>2017-05-05T03:35:24.000Z</published>
    <updated>2017-06-11T07:22:47.753Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><ul>
<li>复制 xadmin 目录到你的项目</li>
<li><code>pip install httplib2 django-formtools django-crispy-forms</code><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># setting.py</span></div><div class="line">INSTALLED_APPS = [</div><div class="line">    ...,</div><div class="line">    <span class="string">'xadmin'</span>,</div><div class="line">    <span class="string">'crispy_forms'</span>,</div><div class="line">]</div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># urls.py</span></div><div class="line"><span class="keyword">import</span> xadmin</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^admin/'</span>, xadmin.site.urls)</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="xadmin-「自带的」BUG-修复方法"><a href="#xadmin-「自带的」BUG-修复方法" class="headerlink" title="xadmin 「自带的」BUG 修复方法"></a>xadmin 「自带的」BUG 修复方法</h3><p>当我们重写了 Django 的 User 表后，xadmin 就会出现 bug。<br>master 分支里，我用 <code>users/models.py</code> 里的 <code>UserProfile</code> 重写了自带的 <code>auth_user</code> 表。<br>这里会出现两个 BUG：</p>
<ul>
<li>xadmin 无法管理重写后的User表</li>
<li>在 xadmin 后台页面点击右上角修改密码时，会报错</li>
</ul>
<p><a href="http://www.cnblogs.com/vincenshen/articles/6528344.html" target="_blank" rel="external">点击查看解决办法</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装方法&quot;&gt;&lt;a href=&quot;#安装方法&quot; class=&quot;headerlink&quot; title=&quot;安装方法&quot;&gt;&lt;/a&gt;安装方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;复制 xadmin 目录到你的项目&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install httplib2 dj
    
    </summary>
    
      <category term="Back-end" scheme="http://blog.poetries.top/categories/Back-end/"/>
    
    
      <category term="python" scheme="http://blog.poetries.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>ES6编码风格</title>
    <link href="http://blog.poetries.top/2017/04/14/es6-coding-style/"/>
    <id>http://blog.poetries.top/2017/04/14/es6-coding-style/</id>
    <published>2017-04-14T06:24:08.000Z</published>
    <updated>2017-06-11T07:22:47.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、块级作用域"><a href="#一、块级作用域" class="headerlink" title="一、块级作用域"></a>一、块级作用域</h2><hr>
<h3 id="1-1-let取代var"><a href="#1-1-let取代var" class="headerlink" title="1.1 let取代var"></a>1.1 let取代var</h3><hr>
<ul>
<li><code>ES6</code>提出了两个新的声明变量的命令：<code>let</code>和<code>const</code>。其中，<code>let</code>完全可以取代<code>var</code>，因为两者语义相同，而且<code>let</code>没有副作用</li>
<li><code>var</code>命令存在变量提升效用，<code>let</code>命令没有这个问题</li>
<li>建议不再使用<code>var</code>命令，而是使用<code>let</code>命令取代</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</div><div class="line"><span class="built_in">console</span>.log(x); <span class="comment">// ReferenceError</span></div><div class="line"><span class="keyword">let</span> x = <span class="string">'hello'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>上面代码如果使用<code>var</code>替代<code>let</code>，<code>console.log</code>那一行就不会报错，而是会输出<code>undefined</code>，因为变量声明提<br>升到代码块的头部。这违反了变量先声明后使用的原则</li>
</ul>
<h3 id="1-2-全局常量和线程安全"><a href="#1-2-全局常量和线程安全" class="headerlink" title="1.2 全局常量和线程安全"></a>1.2 全局常量和线程安全</h3><hr>
<ul>
<li>在<code>let</code>和<code>const</code>之间，建议优先使用<code>const</code>，尤其是在全局环境，不应该设置变量，只应设置常量。这符合函数式编程思想，有利于将来的分布式运算。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">const</span> b = <span class="number">2</span>;</div><div class="line"><span class="keyword">const</span> c = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="comment">// best</span></div><div class="line"><span class="keyword">const</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div></pre></td></tr></table></figure>
<ul>
<li><code>const</code>声明常量还有两个好处，一是阅读代码的人立刻会意识到不应该修改这个值，二是防止了无意间修改<br>变量值所导致的错误</li>
<li>所有的函数都应该设置为常量</li>
<li>let表示的变量，只应出现在单线程运行的代码中，不能是多线程共享的，这样有利于保证线程安全</li>
</ul>
<h3 id="1-3-严格模式"><a href="#1-3-严格模式" class="headerlink" title="1.3 严格模式"></a>1.3 严格模式</h3><hr>
<ul>
<li><code>V8</code>引擎只在严格模式之下，支持<code>let</code>和<code>const</code>。结合前两点，这实际上意味着，将来所有的编程都是针对严<br>格模式的。</li>
</ul>
<h2 id="二、字符串"><a href="#二、字符串" class="headerlink" title="二、字符串"></a>二、字符串</h2><hr>
<ul>
<li>静态字符串一律使用单引号，不使用双引号。动态字符串使用反引号</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> a = <span class="string">"foobar"</span>;</div><div class="line"><span class="keyword">const</span> b = <span class="string">'foo'</span> + a + <span class="string">'bar'</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> a = <span class="string">'foobar'</span>;</div><div class="line"><span class="keyword">const</span> b = <span class="string">`foo<span class="subst">$&#123;a&#125;</span>bar`</span>;</div><div class="line"><span class="keyword">const</span> c = <span class="string">'foobar'</span>;</div></pre></td></tr></table></figure>
<h2 id="三、解构赋值"><a href="#三、解构赋值" class="headerlink" title="三、解构赋值"></a>三、解构赋值</h2><hr>
<ul>
<li>使用数组成员对变量赋值，优先使用解构赋值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"></div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>];</div><div class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>];</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> [first, second] = arr;</div></pre></td></tr></table></figure>
<ul>
<li>函数的参数如果是对象的成员，优先使用解构赋值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</div><div class="line"><span class="keyword">const</span> firstName = user.firstName;</div><div class="line"><span class="keyword">const</span> lastName = user.lastName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line"><span class="keyword">const</span> &#123; firstName, lastName &#125; = obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// best</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>如果函数返回多个值，优先使用对象的解构赋值，而不是数组的解构赋值。这样便于以后添加返回值，以及更改返回值的顺序</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> [left, right, top, bottom];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">processInput</span>(<span class="params">input</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> &#123; left, right &#125; = processInput(input);</div></pre></td></tr></table></figure>
<h2 id="四、对象"><a href="#四、对象" class="headerlink" title="四、对象"></a>四、对象</h2><hr>
<ul>
<li>单行定义的对象，最后一个成员不以逗号结尾。多行定义的对象，最后一个成员以逗号结尾</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> a = &#123; <span class="attr">k1</span>: v1, <span class="attr">k2</span>: v2, &#125;;</div><div class="line"><span class="keyword">const</span> b = &#123;</div><div class="line"><span class="attr">k1</span>: v1,</div><div class="line"><span class="attr">k2</span>: v2</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> a = &#123; <span class="attr">k1</span>: v1, <span class="attr">k2</span>: v2 &#125;;</div><div class="line"><span class="keyword">const</span> b = &#123;</div><div class="line"><span class="attr">k1</span>: v1,</div><div class="line"><span class="attr">k2</span>: v2,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>对象尽量静态化，一旦定义，就不得随意添加新的属性。如果添加属性不可避免，要使用<code>Object.assign</code>方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> a = &#123;&#125;;</div><div class="line">a.x = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="comment">// if reshape unavoidable</span></div><div class="line"><span class="keyword">const</span> a = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.assign(a, &#123; <span class="attr">x</span>: <span class="number">3</span> &#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> a = &#123; <span class="attr">x</span>: <span class="literal">null</span> &#125;;</div><div class="line">a.x = <span class="number">3</span></div></pre></td></tr></table></figure>
<ul>
<li>如果对象的属性名是动态的，可以在创造对象的时候，使用属性表达式定义</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// bad</div><div class="line">const obj = &#123;</div><div class="line">id: 5,</div><div class="line">name: 'San Francisco',</div><div class="line">&#125;;</div><div class="line">obj[getKey('enabled')] = true;'</div><div class="line"></div><div class="line">// good</div><div class="line">const obj = &#123;</div><div class="line">id: 5,</div><div class="line">name: 'San Francisco',</div><div class="line">[getKey('enabled')]: true,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>上面代码中，对象<code>obj</code>的最后一个属性名，需要计算得到。这时最好采用属性表达式，在新建<code>obj</code>的时候，将该属性与其他属性定义在一起。这样一来，所有属性就在一个地方定义了</li>
<li>另外，对象的属性和方法，尽量采用简洁表达法，这样易于描述和书写。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">ar ref = <span class="string">'some value'</span>;</div><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> atom = &#123;</div><div class="line"><span class="attr">ref</span>: ref,</div><div class="line"><span class="attr">value</span>: <span class="number">1</span>,</div><div class="line"><span class="attr">addValue</span>: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> atom.value + value;</div><div class="line">&#125;,</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> atom = &#123;</div><div class="line">ref,</div><div class="line"><span class="attr">value</span>: <span class="number">1</span>,</div><div class="line">addValue(value) &#123;</div><div class="line"><span class="keyword">return</span> atom.value + value;</div><div class="line">&#125;,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="五、数组"><a href="#五、数组" class="headerlink" title="五、数组"></a>五、数组</h2><hr>
<ul>
<li>使用扩展运算符<code>（...）</code>拷贝数组</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> len = items.length;</div><div class="line"><span class="keyword">const</span> itemsCopy = [];</div><div class="line"><span class="keyword">let</span> i;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">itemsCopy[i] = items[i];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">const</span> itemsCopy = [...items];</div></pre></td></tr></table></figure>
<ul>
<li>使用<code>Array.from</code>方法，将类似数组的对象转为数组</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> foo = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.foo'</span>);</div><div class="line"><span class="keyword">const</span> nodes = <span class="built_in">Array</span>.from(foo);</div></pre></td></tr></table></figure>
<h2 id="六、函数"><a href="#六、函数" class="headerlink" title="六、函数"></a>六、函数</h2><hr>
<ul>
<li>立即执行函数可以写成箭头函数的形式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">'Welcome to the Internet.'</span>);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<ul>
<li>那些需要使用函数表达式的场合，尽量用箭头函数代替。因为这样更简洁，而且绑定了this</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> x * x;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</div><div class="line"><span class="keyword">return</span> x * x;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li>箭头函数取代<code>Function.prototype.bind</code>，不应再用<code>self/_this/that</code>绑定 <code>this</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> self = <span class="keyword">this</span>;</div><div class="line"><span class="keyword">const</span> boundMethod = <span class="function"><span class="keyword">function</span>(<span class="params">...params</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> method.apply(self, params);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// acceptable</span></div><div class="line"><span class="keyword">const</span> boundMethod = method.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line"><span class="comment">// best</span></div><div class="line"><span class="keyword">const</span> boundMethod = <span class="function">(<span class="params">...params</span>) =&gt;</span> method.apply(<span class="keyword">this</span>, params);</div></pre></td></tr></table></figure>
<ul>
<li>所有配置项都应该集中在一个对象，放在最后一个参数，布尔值不可以直接作为参数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">a, b, option = false </span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">divide</span>(<span class="params">a, b, &#123; option = false &#125; = &#123;&#125;</span>) </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>不要在函数体内使用<code>arguments</code>变量，使用<code>rest</code>运算符<code>（...）</code>代替。因为<code>rest</code>运算符显式表明你想要获取参数，而且<code>arguments</code>是一个类似数组的对象，而<code>rest</code>运算符可以提供一个真正的数组</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">const</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line"><span class="keyword">return</span> args.join(<span class="string">''</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">concatenateAll</span>(<span class="params">...args</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> args.join(<span class="string">''</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>使用默认值语法设置函数参数的默认值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">opts = opts || &#123;&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleThings</span>(<span class="params">opts = &#123;&#125;</span>) </span>&#123;</div><div class="line"><span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="七、Map结构"><a href="#七、Map结构" class="headerlink" title="七、Map结构"></a>七、Map结构</h2><hr>
<ul>
<li>注意区分<code>Object</code>和<code>Map</code>，只有模拟实体对象时，才使用<code>Object</code>。如果只是需要<code>key:value</code>的数据结构，使用<code>Map</code>。因为<code>Map</code>有内建的遍历机制</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(arr);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</div><div class="line"><span class="built_in">console</span>.log(key);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> map.values()) &#123;</div><div class="line"><span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> map.entries()) &#123;</div><div class="line"><span class="built_in">console</span>.log(item[<span class="number">0</span>], item[<span class="number">1</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="八、Class"><a href="#八、Class" class="headerlink" title="八、Class"></a>八、Class</h2><hr>
<ul>
<li>总是用<code>class</code>，取代需要<code>prototype</code>操作。因为<code>class</code>的写法更简洁，更易于理解</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Queue</span>(<span class="params">contents = []</span>) </span>&#123;</div><div class="line"><span class="keyword">this</span>._queue = [...contents];</div><div class="line">&#125;</div><div class="line">Queue.prototype.pop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">const</span> value = <span class="keyword">this</span>._queue[<span class="number">0</span>];</div><div class="line"><span class="keyword">this</span>._queue.splice(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line"><span class="keyword">return</span> value;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</div><div class="line"><span class="keyword">constructor</span>(contents = []) &#123;</div><div class="line"><span class="keyword">this</span>._queue = [...contents];</div><div class="line">&#125;</div><div class="line">pop() &#123;</div><div class="line"><span class="keyword">const</span> value = <span class="keyword">this</span>._queue[<span class="number">0</span>];</div><div class="line"><span class="keyword">this</span>._queue.splice(<span class="number">0</span>, <span class="number">1</span>);</div><div class="line"><span class="keyword">return</span> value;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>使用<code>extends</code>实现继承，因为这样更简单，不会有破坏<code>instanceof</code>运算的危险</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> inherits = <span class="built_in">require</span>(<span class="string">'inherits'</span>);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">PeekableQueue</span>(<span class="params">contents</span>) </span>&#123;</div><div class="line">Queue.apply(<span class="keyword">this</span>, contents);</div><div class="line">&#125;</div><div class="line">inherits(PeekableQueue, Queue);</div><div class="line">PeekableQueue.prototype.peek = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PeekableQueue</span> <span class="keyword">extends</span> <span class="title">Queue</span> </span>&#123;</div><div class="line">peek() &#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">this</span>._queue[<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="九、模块"><a href="#九、模块" class="headerlink" title="九、模块"></a>九、模块</h2><hr>
<ul>
<li><code>Module</code>语法是<code>JavaScript</code>模块的标准写法，坚持使用这种写法。使用<code>import</code>取代<code>require</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">const</span> moduleA = <span class="built_in">require</span>(<span class="string">'moduleA'</span>);</div><div class="line"><span class="keyword">const</span> func1 = moduleA.func1;</div><div class="line"><span class="keyword">const</span> func2 = moduleA.func2;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">import</span> &#123; func1, func2 &#125; <span class="keyword">from</span> <span class="string">'moduleA'</span>;</div></pre></td></tr></table></figure>
<ul>
<li>使用<code>export</code>取代<code>module.exports</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// commonJS的写法</span></div><div class="line"><span class="keyword">var</span> React = <span class="built_in">require</span>(<span class="string">'react'</span>);</div><div class="line"><span class="keyword">var</span> Breadcrumbs = React.createClass(&#123;</div><div class="line">render() &#123;</div><div class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">nav</span> /&gt;</span>;</span></div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">module.exports = Breadcrumbs;</div><div class="line"></div><div class="line">// ES6的写法</div><div class="line">import React from 'react';</div><div class="line">const Breadcrumbs = React.createClass(&#123;</div><div class="line">render() &#123;</div><div class="line">return <span class="tag">&lt;<span class="name">nav</span> /&gt;</span>;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">export default Breadcrumbs</div></pre></td></tr></table></figure>
<ul>
<li>不要在模块输入中使用通配符。因为这样可以确保你的模块之中，有一个默认输出（export default）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// bad</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> myObject <span class="string">'./importModule'</span>;</div><div class="line"></div><div class="line"><span class="comment">// good</span></div><div class="line"><span class="keyword">import</span> myObject <span class="keyword">from</span> <span class="string">'./importModule'</span>;</div></pre></td></tr></table></figure>
<ul>
<li>如果模块默认输出一个函数，函数名的首字母应该小写</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeStyleGuide</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> makeStyleGuide;</div></pre></td></tr></table></figure>
<ul>
<li>如果模块默认输出一个对象，对象名的首字母应该大写</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> StyleGuide = &#123;</div><div class="line"><span class="attr">es6</span>: &#123;</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> StyleGuide;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、块级作用域&quot;&gt;&lt;a href=&quot;#一、块级作用域&quot; class=&quot;headerlink&quot; title=&quot;一、块级作用域&quot;&gt;&lt;/a&gt;一、块级作用域&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;1-1-let取代var&quot;&gt;&lt;a href=&quot;#1-1-let取代var&quot; cl
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://blog.poetries.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>浅谈闭包</title>
    <link href="http://blog.poetries.top/2017/03/22/closure-summary/"/>
    <id>http://blog.poetries.top/2017/03/22/closure-summary/</id>
    <published>2017-03-22T06:24:08.000Z</published>
    <updated>2017-06-11T07:22:47.721Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>闭包的形成跟变量的作用域以及变量的生存周期密切相关</p>
</blockquote>
<h2 id="一、变量的作用域-是指变量的有效范围"><a href="#一、变量的作用域-是指变量的有效范围" class="headerlink" title="一、变量的作用域,是指变量的有效范围"></a>一、变量的作用域,是指变量的有效范围</h2><ul>
<li>当在函数中声明一个变量的时候,如果该变量前面没有带上关键字 <code>var</code>,这个变量就会成为全局变量 ,这当然是一种很容易造成命名冲突的做法。<br>另外一种情况是用 <code>var</code> 关键字在函数中声明变量,这时候的变量即是局部变量,只有在该函数内部才能访问到这个变量,在函数外面是访问不到的。</li>
</ul>
<p>例：变量的搜索是从内到外而非从外到 内的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</div><div class="line"><span class="keyword">var</span> func1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">var</span> b=<span class="number">2</span>;</div><div class="line">    <span class="keyword">var</span> func2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">        <span class="keyword">var</span> c=<span class="number">3</span>;</div><div class="line">        <span class="built_in">console</span>.log ( b ); <span class="comment">// 输出:2 </span></div><div class="line">        <span class="built_in">console</span>.log ( a );<span class="comment">// 输出:1</span></div><div class="line">    &#125;</div><div class="line">    func2();</div><div class="line">    <span class="built_in">console</span>.log(c);<span class="comment">//输出:Uncaught ReferenceError: c is not defined</span></div><div class="line">&#125;; </div><div class="line">func1();</div></pre></td></tr></table></figure>
<h2 id="二、变量的生存周期"><a href="#二、变量的生存周期" class="headerlink" title="二、变量的生存周期"></a>二、变量的生存周期</h2><ul>
<li>对于全局变量来说,全局变量的生存周期当然是的永久,除非我们主动销毁这个全局变量。</li>
<li>而对于在函数内用<code>var</code>关键字声明的局部变量来说,当退出函数时,这些局部变量即失去了 它们的价值,它们都会随着函数的调用的结束而销毁</li>
</ul>
<p>例一：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">var</span> a=<span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">        a++;</div><div class="line">        <span class="built_in">console</span>.log(a);</div><div class="line">    &#125; </div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> f=func();</div><div class="line">f();<span class="comment">// 输出:2 </span></div><div class="line">f();<span class="comment">// 输出:3</span></div><div class="line">f();<span class="comment">// 输出:4</span></div><div class="line">f();<span class="comment">// 输出:5</span></div></pre></td></tr></table></figure>
<ul>
<li>跟我们之前的结论相反,上面的例子在当退出函数后,局部变量<code>a</code> 并没有消失,而是似乎一直在某个地方 存活着。这是因为当执行 <code>var f = func();</code>时,<code>f</code> 返回了一个名函数的引用,它可以问到<code>func()</code> 被调用时产生的环境,而局部变量 <code>a</code> 一直处在这个环境里。既然外局部变量所在的环境还能被外 界访问,这个局部变量就有了不被销毁的理由。在这里生了一个闭包结构,局部变量的声明看起来被延续了。</li>
</ul>
<p>例二，假设页面上有 5 个 div 节点,我们通过循环来给每个 div绑定 onclick 事件,按照索引顺序,点击第 1 个 div 时弹出 0,点击第 2 个 div 时出 1,以此类</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nodes = <span class="built_in">document</span>.getElementsByTagName( <span class="string">'div'</span> );</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=nodes.length;i&amp;lt;len;i++)&#123; </div><div class="line">    nodes[ i ].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(i); </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>测试这段代码会发现,无论点击哪个 div,最后弹出的结果都是 5</li>
<li>这是因为 <code>div</code> 节点的 <code>onclick</code> 事件是被异步触发的,当事件被触发的时候,<code>for</code>循环早已结束,此时 i 的值已经是 <code>5</code>,</li>
<li>所以在 <code>div</code>的 <code>onclick</code> 事件函数中顺着作用域链从内到外查找变量 i 时,查找到的值总是 <code>5</code>。</li>
<li>解决方法是在闭包的帮助下,每次循环的<code>i</code> 值都封闭起来。当在事件函数中顺着作用域链从内到外查找变量 <code>i</code>时,会先找到被封闭在闭包环境中的<code>i,</code>如果有<code>5</code>个<code>div</code>,这里的<code>i</code>分别 是 <code>0,1,2,3,4</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=nodes.length;i&amp;lt;len;i++)&#123; </div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"> i </span>)</span>&#123;</div><div class="line">        nodes[ i ].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">            <span class="built_in">console</span>.log(i);</div><div class="line">        &#125; </div><div class="line">    &#125;)(i)</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="三、闭包的作用"><a href="#三、闭包的作用" class="headerlink" title="三、闭包的作用"></a>三、闭包的作用</h2><h3 id="1、封装变量—-闭包可以帮助一些不需要暴露在全局的变量封装成“私有变量”"><a href="#1、封装变量—-闭包可以帮助一些不需要暴露在全局的变量封装成“私有变量”" class="headerlink" title="1、封装变量—-闭包可以帮助一些不需要暴露在全局的变量封装成“私有变量”"></a>1、封装变量—-闭包可以帮助一些不需要暴露在全局的变量封装成“私有变量”</h3><ul>
<li>例一，计算乘积</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">var</span> a=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,l=<span class="built_in">arguments</span>.length;i&amp;lt;l;i++)&#123; </div><div class="line">        a = a * <span class="built_in">arguments</span>[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> a; </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="2、延续局部变量的寿命"><a href="#2、延续局部变量的寿命" class="headerlink" title="2、延续局部变量的寿命"></a>2、延续局部变量的寿命</h3><h2 id="四、闭包与内存泄漏"><a href="#四、闭包与内存泄漏" class="headerlink" title="四、闭包与内存泄漏"></a>四、闭包与内存泄漏</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(++i);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> b;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> c = a();</div><div class="line">c();</div></pre></td></tr></table></figure>
<ul>
<li>首先有一个封闭的函数<code>a</code>（即自定义的一个<code>function a()</code>方法），该函数内部的变量<code>b</code>（局部变量/局部方法）外部无法直接调用；但如果把这个函数赋值给一个全部变量<code>c</code>时，</li>
<li>全局变量c就获取到了函数局部变量b的值，从而使局部变量<code>b</code>的值得到了保存，即延长了一个局部变量<code>b</code>的生命周期，除非主动销毁这个全局变量<code>c</code>。<br>此时，我们也就制造出来了一个“闭包”。简单说“闭包是指有权限访问另一个函数作用域的变量的函数”。</li>
<li>在这个过程中，因为局部变量b的声明周期延长，使得<code>Javascript</code>的垃圾回收机制不会收回函数<code>a</code>所占用的资源,因为函数a的局部变量<code>b</code>的执行需要依赖函数a中的变量。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;闭包的形成跟变量的作用域以及变量的生存周期密切相关&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、变量的作用域-是指变量的有效范围&quot;&gt;&lt;a href=&quot;#一、变量的作用域-是指变量的有效范围&quot; class=&quot;headerlink&quot; tit
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="闭包" scheme="http://blog.poetries.top/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习总结(一)</title>
    <link href="http://blog.poetries.top/2017/03/19/vue-summary-1/"/>
    <id>http://blog.poetries.top/2017/03/19/vue-summary-1/</id>
    <published>2017-03-19T04:24:08.000Z</published>
    <updated>2017-06-11T07:22:47.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p><img src="http://upload-images.jianshu.io/upload_images/1480597-628462457f124619.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<ul>
<li><code>Vue</code>是一套构建用户界面的 渐进式框架。<code>Vue</code> 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。</li>
</ul>
<h2 id="二、Vue实例"><a href="#二、Vue实例" class="headerlink" title="二、Vue实例"></a>二、Vue实例</h2><p><strong>构造器</strong></p>
<ul>
<li>每个 <code>Vue.js</code> 应用都是通过构造函数 <code>Vue</code> 创建一个 <code>Vue</code> 的根实例 启动的</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line"><span class="comment">// 选项</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>在实例化 <code>Vue</code> 时，需要传入一个选项对象，它可以包含数据、模板、挂载元素、方法、生命周期钩子等选项。全部的选项可以在 <code>API</code> 文档中查看</li>
</ul>
<p><strong>属性与方法</strong></p>
<ul>
<li>每个 <code>Vue</code>实例都会代理其<code>data</code> 对象里所有的属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</div><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line"><span class="attr">data</span>: data</div><div class="line">&#125;)</div><div class="line">vm.a === data.a</div><div class="line"><span class="comment">// -&gt; true</span></div><div class="line"><span class="comment">// 设置属性也会影响到原始数据</span></div><div class="line">vm.a = <span class="number">2</span></div><div class="line">data.a <span class="comment">// -&gt; 2</span></div><div class="line"><span class="comment">// ... 反之亦然</span></div><div class="line">data.a = <span class="number">3</span></div><div class="line">vm.a <span class="comment">// -&gt; 3</span></div></pre></td></tr></table></figure>
<ul>
<li>除了 <code>data</code>属性， <code>Vue</code>实例暴露了一些有用的实例属性与方法。这些属性与方法都有前缀 <code>$</code>，以便与代理的<code>data</code>属性区分。例如：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</div><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line"><span class="attr">el</span>: <span class="string">'#example'</span>,</div><div class="line"><span class="attr">data</span>: data</div><div class="line">&#125;)</div><div class="line">vm.$data === data</div><div class="line"><span class="comment">// -&gt; true</span></div><div class="line">vm.$el === <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>)</div><div class="line"><span class="comment">// -&gt; true</span></div><div class="line"><span class="comment">// $watch 是一个实例方法</span></div><div class="line">vm.$watch(<span class="string">'a'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</div><div class="line"><span class="comment">// 这个回调将在 `vm.a` 改变后调用</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong>实例生命周期</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line"><span class="attr">data</span>: &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;,</div><div class="line"><span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="comment">// `this` 指向 vm 实例</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'a is: '</span> + <span class="keyword">this</span>.a)</div><div class="line">&#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">// -&gt; "a is: 1"</span></div></pre></td></tr></table></figure>
<ul>
<li>也有一些其它的钩子，在实例生命周期的不同阶段调用，如 <code>mounted</code> 、 <code>updated</code> 、 <code>destroyed</code> 。钩子的 <code>this</code> 指向调用它的 <code>Vue</code> 实例。一些用户可能会问 <code>Vue.js</code> 是否有“控制器”的概念？答案是，没有。组件的自定义逻辑可以分布在这些钩子中</li>
</ul>
<p><strong>生命周期图示</strong></p>
<p><img src="./images/1489915053427.jpg" alt="生命周期图示" title="1489915053427"></p>
<h2 id="三、模板语法"><a href="#三、模板语法" class="headerlink" title="三、模板语法"></a>三、模板语法</h2><ul>
<li><p><code>Vue.js</code> 使用了基于 <code>HTML</code> 的模版语法，允许开发者声明式地将 <code>DOM</code> 绑定至底层 <code>Vue</code> 实例的数据。所有<code>Vue.js</code> 的模板都是合法的 <code>HTML</code> ，所以能被遵循规范的浏览器和 <code>HTML</code> 解析器解析。</p>
</li>
<li><p>在底层的实现上， <code>Vue</code>将模板编译成虚拟<code>DOM</code> 渲染函数。结合响应系统，在应用状态改变时， <code>Vue</code> 能够智能地计算出重新渲染组件的最小代价并应用到 <code>DOM</code> 操作上。</p>
</li>
</ul>
<h3 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h3><p><strong>文本</strong></p>
<ul>
<li>数据绑定最常见的形式就是使用 “Mustache” 语法（双大括号）的文本插值</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>Mustache</code> 标签将会被替代为对应数据对象上 <code>msg</code> 属性的值。无论何时，绑定的数据对象上 <code>msg</code> 属性发生了改变，插值处的内容都会更新</li>
<li>通过使用 <code>v-once</code> 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上所有的数据绑定</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>This will never change: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>纯 HTML</strong></p>
<ul>
<li>双大括号会将数据解释为纯文本，而非 <code>HTML</code> 。为了输出真正的 <code>HTML</code>，你需要使用<code>v-html</code>指令：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"rawHtml"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>被插入的内容都会被当做 <code>HTML</code> —— 数据绑定会被忽略</li>
<li>你的站点上动态渲染的任意 <code>HTML</code> 可能会非常危险，因为它很容易导致 <code>XSS</code> 攻击。请只对可信内容使用<code>HTML</code> 插值，绝不要对用户提供的内容插值</li>
</ul>
<p><strong>属性</strong></p>
<ul>
<li>Mustache 不能在 <code>HTML</code> 属性中使用，应使用 <code>v-bind</code> 指令：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"dynamicId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>使用 JavaScript 表达式</strong></p>
<ul>
<li>对于所有的数据绑定， <code>Vue.js</code>都提供了完全的 <code>JavaScript</code>表达式支持。</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; number + 1 &#125;&#125;&#123;&#123; ok ? 'YES' : 'NO' &#125;&#125;</div><div class="line">&#123;&#123; message.split('').reverse().join('') &#125;&#125;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"'list-' + id"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析</li>
</ul>
<p><strong>过滤器</strong></p>
<ul>
<li><code>Vue.js</code> 允许你自定义过滤器，被用作一些常见的文本格式化。过滤器应该被添加在<code>mustache</code> 插值的尾部，由“管道符”指示：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; message | capitalize &#125;&#125;</div></pre></td></tr></table></figure>
<p><strong>指令</strong></p>
<ul>
<li>指令（<code>Directives</code>）是带有<code>v-</code>前缀的特殊属性。指令属性的值预期是单一 <code>JavaScript</code>表达式（除了<code>v-for</code> ，之后再讨论）</li>
<li>指令的职责就是当其表达式的值改变时相应地将某些行为应用到 DOM 上</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"seen"</span>&gt;</span>Now you see me<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>这里， <code>v-if</code> 指令将根据表达式 seen 的值的真假来移除/插入<code>&lt;p&gt;</code>元素</li>
</ul>
<p><strong>参数</strong></p>
<ul>
<li>一些指令能接受一个“参数”，在指令后以冒号指明。例如，<code>v-bind</code>指令被用来响应地更新 <code>HTML</code> 属性</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>在这里 <code>href</code>是参数，告知<code>v-bind</code> 指令将该元素的 <code>href</code> 属性与表达式 <code>url</code>的值绑定</p>
</li>
<li><p>另一个例子是 <code>v-on</code> 指令，它用于监听 <code>DOM</code> 事件：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>修饰符</strong></p>
<ul>
<li>修饰符（Modifiers）是以半角句号<code>.</code>指明的特殊后缀，用于指出一个指令应该以特殊方式绑定</li>
<li>例如，<code>.prevent</code> 修饰符告诉 <code>v-on</code> 指令对于触发的事件调用 <code>event.preventDefault()</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>缩写</strong></p>
<ul>
<li><code>v-</code> 前缀在模板中是作为一个标示 <code>Vue</code> 特殊属性的明显标识</li>
<li><p><code>Vue.js</code> 为两个最为常用的指令提供了特别的缩写</p>
</li>
<li><p><code>v-bind</code> 缩写</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><code>v-on</code> 缩写</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="四、计算属性"><a href="#四、计算属性" class="headerlink" title="四、计算属性"></a>四、计算属性</h2><ul>
<li>在模板中绑定表达式是非常便利的，但是它们实际上只用于简单的操作。在模板中放入太多的逻辑会让模板过重且难以维护。例如：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span> &#123;&#123; message.split('').reverse().join('') &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在这种情况下，模板不再简单和清晰。在实现反向显示 <code>message</code> 之前，你应该确认它。这个问题在你不止一次反向显示 <code>message</code> 的时候变得更加糟糕。</li>
<li>这就是为什么任何复杂逻辑，你都应当使用计算属性</li>
</ul>
<p><strong>基础例子</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span> </div><div class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>Original message: "&#123;&#123; message &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </div><div class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>Computed reversed message: "&#123;&#123; reversedMessage &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123; </div><div class="line">	<span class="attr">el</span>: <span class="string">'#example'</span>, <span class="attr">data</span>: &#123; <span class="attr">message</span>: <span class="string">'Hello'</span> &#125;, </div><div class="line">	<span class="attr">computed</span>: &#123;</div><div class="line">	  <span class="comment">//a computed getter </span></div><div class="line">	reversedMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">	  <span class="comment">// `this` points to the vm instance </span></div><div class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</div><div class="line">&#125; &#125;&#125;)</div></pre></td></tr></table></figure>
<ul>
<li><p>结果：</p>
<ul>
<li>Original message: “Hello”</li>
<li>Computed reversed message: “olleH”</li>
</ul>
</li>
<li><p>这里我们声明了一个计算属性 <code>reversedMessage</code> 。我们提供的函数将用作属性</p>
</li>
</ul>
<p><strong>计算缓存 vs Methods</strong></p>
<ul>
<li>你可能已经注意到我们可以通过调用表达式中的<code>method</code>来达到同样的效果：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Reversed message: "&#123;&#123; reverseMessage() &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// in component</div><div class="line">methods: &#123;</div><div class="line">reverseMessage: function () &#123;</div><div class="line">	return this.message.split('</div><div class="line">	').reverse().join('') </div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>不经过计算属性，我们可以在 <code>method</code> 中定义一个相同的函数来替代它。对于最终的结果，两种方式确实是相同的。然而，不同的是计算属性是基于它的依赖缓存。计算属性只有在它的相关依赖发生改变时才会重新<br>取值。这就意味着只要 <code>message</code> 没有发生改变，多次访问<code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>
</li>
<li><p>这也同样意味着如下计算属性将不会更新，因为 <code>Date.now()</code>不是响应式依赖：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">computed: &#123; <span class="attr">now</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">Date</span>.now() &#125;&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>相比而言，每当重新渲染的时候，<code>method</code> 调用总会执行函数</p>
</li>
<li><p>我们为什么需要缓存？假设我们有一个重要的计算属性 <code>A</code> ，这个计算属性需要一个巨大的数组遍历和做大量的计算。然后我们可能有其他的计算属性依赖于 <code>A</code> 。如果没有缓存，我们将不可避免的多次执行 <code>A</code> 的 <code>getter</code>！如果你不希望有缓存，请用 <code>method</code> 替代</p>
</li>
</ul>
<p><strong>计算属性 vs Watched Property</strong></p>
<ul>
<li><code>Vue.js</code> 提供了一个方法<code>$watch</code> ，它用于观察 <code>Vue</code>实例上的数据变动</li>
</ul>
<p><strong>计算 setter</strong></p>
<ul>
<li>计算属性默认只有 <code>getter</code>，不过在需要时你也可以提供一个 <code>setter</code>：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ...</span></div><div class="line">computed: &#123;</div><div class="line"><span class="attr">fullName</span>: &#123; </div><div class="line">   <span class="comment">// getter </span></div><div class="line">	get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </div><div class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName </div><div class="line">	&#125;, </div><div class="line">	<span class="comment">// setter </span></div><div class="line">	set: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</div><div class="line">		<span class="keyword">var</span> names = newValue.split(<span class="string">' '</span>) </div><div class="line">		<span class="keyword">this</span>.firstName = names[<span class="number">0</span>] </div><div class="line">		<span class="keyword">this</span>.lastName = names[names.length - <span class="number">1</span>] </div><div class="line"></div><div class="line">	&#125;</div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure>
<ul>
<li>现在在运行<code>vm.fullName = &#39;John Doe&#39;</code> 时， <code>setter</code>会被调用， <code>vm.firstName</code> 和<code>vm.lastName</code> 也会被对应更新</li>
</ul>
<p><strong>观察 Watchers</strong></p>
<ul>
<li>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的 <code>watcher</code> 。这是为什么 <code>Vue</code> 提供一个更通用的方法通过 <code>watch</code> 选项，来响应数据的变化。当你想要在数据变化响应时，执行异步操作或昂贵操作时，这是很有用的</li>
</ul>
<h2 id="五、Class与Style绑定"><a href="#五、Class与Style绑定" class="headerlink" title="五、Class与Style绑定"></a>五、Class与Style绑定</h2><h3 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h3><ul>
<li>数据绑定一个常见需求是操作元素的 <code>class</code> 列表和它的内联样式。因为它们都是属性 ，我们可以用 <code>v-bind</code>处理它们：只需要计算出表达式最终的字符串。不过，字符串拼接麻烦又易错。因此，在 <code>v-bind</code> 用于<code>class</code> 和 <code>style</code>时， <code>Vue.js</code> 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组</li>
</ul>
<h3 id="绑定-HTML-Class"><a href="#绑定-HTML-Class" class="headerlink" title="绑定 HTML Class"></a>绑定 HTML Class</h3><p><strong>对象语法</strong></p>
<ul>
<li>我们可以传给<code>v-bind:class</code> 一个对象，以动态地切换 <code>class</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>上面的语法表示<code>class active</code>的更新将取决于数据属性<code>isActive</code> 是否为真值</li>
<li>我们也可以在对象中传入更多属性用来动态切换多个<code>class</code>。此外， v-<code>bind:class</code> 指令可以与普通的<code>class</code> 属性共存。如下模板:</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: isActive, 'text-danger': hasError &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>如下 <code>data</code>:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data: &#123; <span class="attr">isActive</span>: <span class="literal">true</span>, <span class="attr">hasError</span>: <span class="literal">false</span>&#125;</div></pre></td></tr></table></figure>
<ul>
<li>渲染为:</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"static active"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>当 <code>isActive</code> 或者 <code>hasError</code> 变化时，<code>class</code> 列表将相应地更新。例如，如果 <code>hasError</code>的值为<code>true</code> ， <code>class</code>列表将变为<code>&quot;static active text-danger&quot;</code></p>
</li>
<li><p>你也可以直接绑定数据里的一个对象</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data: &#123; <span class="attr">classObject</span>: &#123; <span class="attr">active</span>: <span class="literal">true</span>, <span class="string">'text-danger'</span>: <span class="literal">false</span> &#125;&#125;</div></pre></td></tr></table></figure>
<p><strong>数组语法</strong></p>
<ul>
<li>我们可以把一个数组传给 <code>v-bind:class</code> ，以应用一个 <code>class</code> 列表</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[activeClass, errorClass]"</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data: &#123; <span class="attr">activeClass</span>: <span class="string">'active'</span>, <span class="attr">errorClass</span>: <span class="string">'text-danger'</span>&#125;</div></pre></td></tr></table></figure>
<ul>
<li>渲染为:</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>如果你也想根据条件切换列表中的 <code>class</code> ，可以用三元表达式</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[isActive ? activeClass : '', errorClass]"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="绑定内联样式"><a href="#绑定内联样式" class="headerlink" title="绑定内联样式"></a>绑定内联样式</h3><p><strong>对象语法</strong></p>
<ul>
<li><code>v-bind:style</code> 的对象语法十分直观——看着非常像<code>CSS</code> ，其实它是一个 <code>JavaScript</code> 对象。 <code>CSS</code> 属性名可以用驼峰式（camelCase）或短横分隔命名（kebab-case）</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> </span></div><div class="line"><span class="attr">v-bind:style</span>=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data: &#123; <span class="attr">activeColor</span>: <span class="string">'red'</span>, <span class="attr">fontSize</span>: <span class="number">30</span>&#125;</div></pre></td></tr></table></figure>
<ul>
<li>直接绑定到一个样式对象通常更好，让模板更清晰</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"styleObject"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">data: &#123; <span class="attr">styleObject</span>: &#123; <span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">fontSize</span>: <span class="string">'13px'</span> &#125;&#125;</div></pre></td></tr></table></figure>
<p><strong>数组语法</strong></p>
<ul>
<li><code>v-bind:style</code> 的数组语法可以将多个样式对象应用到一个元素上</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[baseStyles, overridingStyles]"</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>自动添加前缀</strong></p>
<ul>
<li>当 <code>v-bind:style</code> 使用需要特定前缀的 <code>CSS</code> 属性时，如 <code>transform</code> ，<code>Vue.js</code>会自动侦测并添加相应的前缀</li>
</ul>
<h2 id="六、条件渲染"><a href="#六、条件渲染" class="headerlink" title="六、条件渲染"></a>六、条件渲染</h2><p><strong>v-if</strong></p>
<ul>
<li>在字符串模板中，如 <code>Handlebars</code>，我们得像这样写一个条件块</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- Handlebars 模板 --&gt;</div><div class="line">&#123;&#123;#if ok&#125;&#125; &lt;h1&gt;Yes&lt;/h1&gt;&#123;&#123;/if&#125;&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在 <code>Vue.js</code>，我们使用 <code>v-if</code>指令实现同样的功能</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>也可以用 <code>v-else</code>添加一个 <code>“else”</code>块</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>No<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>template v-if</strong></p>
<ul>
<li>因为 <code>v-if</code> 是一个指令，需要将它添加到一个元素上。但是如果我们想切换多个元素呢？此时我们可以把一个 <code>&lt;template&gt;</code> 元素当做包装元素，并在上面使用 <code>v-if</code> ，最终的渲染结果不会包含它</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"ok"</span>&gt;</span> <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="tag">&lt;<span class="name">p</span>&gt;</span>Paragraph 2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>v-else</strong></p>
<ul>
<li><p>可以用 <code>v-else</code>指令给 <code>v-if</code>或 <code>v-show</code> 添加一个 <code>“else”</code> 块</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"Math.random() &gt; 0.5"</span>&gt;</span> Sorry<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span> Not sorry<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>v-else</code> 元素必须紧跟在<code>v-if</code>或 <code>v-show</code> 元素的后面——否则它不能被识别</p>
</li>
</ul>
<p><strong>v-show</strong></p>
<ul>
<li>另一个根据条件展示元素的选项是<code>v-show</code>指令。用法大体上一样</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>不同的是有 <code>v-show</code> 的元素会始终渲染并保持在 <code>DOM</code> 中。 <code>v-show</code>是简单的切换元素的 <code>CSS</code> 属性<code>display</code></p>
</li>
<li><p>注意 <code>v-show</code> 不支持 <code>&lt;template&gt;</code> 语法</p>
</li>
</ul>
<p><strong>v-if vs. v-show</strong></p>
<ul>
<li><code>v-if</code> 是真实的条件渲染，因为它会确保条件块在切换当中适当地销毁与重建条件块内的事件监听器和子组件</li>
<li><code>v-if</code>也是惰性的：如果在初始渲染时条件为假，则什么也不做</li>
<li>相比之下， <code>v-show</code> 简单得多——元素始终被编译并保留，只是简单地基于 <code>CSS</code> 切换</li>
<li>一般来说， <code>v-if</code>有更高的切换消耗而 <code>v-show</code> 有更高的初始渲染消耗</li>
<li>因此，如果需要频繁切换使用<code>v-show</code>较好，如果在运行时条件不大可能改变则使用<code>v-if</code>较好</li>
</ul>
<h2 id="七、列表渲染"><a href="#七、列表渲染" class="headerlink" title="七、列表渲染"></a>七、列表渲染</h2><p><strong>v-for</strong></p>
<ul>
<li>我们用 <code>v-for</code>指令根据一组数组的选项列表进行渲染。<code>v-for</code>指令需要以 <code>item in items</code> 形式的特殊语法， <code>items</code> 是源数据数组并且 <code>item</code> 是数组元素迭代的别名</li>
<li>在 <code>v-for</code> 块中，我们拥有对父作用域属性的完全访问权限。 <code>v-for</code> 还支持一个可选的第二个参数为当前项的索引</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"example-2"</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span>&gt;</span> </div><div class="line">		&#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125; </div><div class="line">	<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>你也可以用 <code>of</code>替代 <code>in</code>作为分隔符，因为它是最接近 <code>JavaScript</code> 迭代器的语法</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item of items"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>Template v-for</strong></p>
<ul>
<li>如同 <code>v-if</code>模板，你也可以用带有 <code>v-for</code> 的 <code>&lt;template&gt;</code>标签来渲染多个元素块。例如：<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span> </div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>对象迭代 v-for</strong></p>
<ul>
<li>你也可以用<code>v-for</code> 通过一个对象的属性来迭代</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"repeat-object"</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"value in object"</span>&gt;</span> &#123;&#123; value &#125;&#125; <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">	<span class="attr">el</span>: <span class="string">'#repeat-object'</span>, </div><div class="line">	<span class="attr">data</span>: &#123; </div><div class="line">		<span class="attr">object</span>: &#123;</div><div class="line">			<span class="attr">FirstName</span>: <span class="string">'John'</span>, </div><div class="line">			<span class="attr">LastName</span>: <span class="string">'Doe'</span>, <span class="attr">Age</span>: <span class="number">30</span></div><div class="line">	&#125; </div><div class="line">&#125;&#125;)</div></pre></td></tr></table></figure>
<ul>
<li><p>你也可以提供第二个的参数为键名</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value, key) in object"</span>&gt;</span> &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>第三个参数为索引</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(value, key, index) in object"</span>&gt;</span></div><div class="line">	&#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>整数迭代 v-for</strong></p>
<ul>
<li><code>v-for</code> 也可以取整数。在这种情况下，它将重复多次模板</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">"n in 10"</span>&gt;</span>&#123;&#123; n &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>结果： 1 2 3 4 5 6 7 8 9 10</li>
</ul>
<p><strong>组件 和 v-for</strong></p>
<ul>
<li><p>在自定义组件里，你可以像任何普通元素一样用 <code>v-for</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>然而他不能自动传递数据到组件里，因为组件有自己独立的作用域。为了传递迭代数据到组件里，我们要用<code>props</code></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span> </span></div><div class="line"><span class="attr">v-bind:item</span>=<span class="string">"item"</span> <span class="attr">v-bind:index</span>=<span class="string">"index"</span>&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span>&gt;</div></pre></td></tr></table></figure>
<ul>
<li>不自动注入 <code>item</code>到组件里的原因是，因为这使得组件会紧密耦合到 <code>v-for</code>如何运作。在一些情况下，明确数据的来源可以使组件可重用。</li>
</ul>
<h2 id="八、事件处理器"><a href="#八、事件处理器" class="headerlink" title="八、事件处理器"></a>八、事件处理器</h2><p><strong>监听事件</strong></p>
<ul>
<li>可以用 <code>v-on</code> 指令监听 <code>DOM</code> 事件来触发一些 <code>JavaScript</code> 代码</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-1"</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"counter += 1"</span>&gt;</span>增加 1<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>这个按钮被点击了 &#123;&#123; counter &#125;&#125; 次。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> example1 = <span class="keyword">new</span> Vue(&#123; </div><div class="line"><span class="attr">el</span>: <span class="string">'#example-1'</span>, </div><div class="line"><span class="attr">data</span>: &#123; </div><div class="line">	<span class="attr">counter</span>: <span class="number">0</span> </div><div class="line">&#125;&#125;)</div></pre></td></tr></table></figure>
<p><strong>方法事件处理器</strong></p>
<ul>
<li>许多事件处理的逻辑都很复杂，所以直接把 <code>JavaScript</code> 代码写在 <code>v-on</code> 指令中是不可行的。因此 <code>v-on</code> 可以接收一个定义的方法来调用</li>
</ul>
<p><strong>内联处理器方法</strong></p>
<ul>
<li>除了直接绑定到一个方法，也可以用内联 <code>JavaScript</code>语句</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-3"</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"say('hi')"</span>&gt;</span>Say hi<span class="tag">&lt;/<span class="name">button</span>&gt;</span> </div><div class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"say('what')"</span>&gt;</span>Say what<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line"><span class="attr">el</span>: <span class="string">'#example-3'</span>, </div><div class="line"><span class="attr">methods</span>: &#123; </div><div class="line">	<span class="attr">say</span>: <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123; </div><div class="line">		alert(message) </div><div class="line">	&#125;</div><div class="line">&#125;&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>有时也需要在内联语句处理器中访问原生 <code>DOM</code> 事件。可以用特殊变量 <code>$event</code>把它传入方法</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> </span></div><div class="line"><span class="attr">v-on:click</span>=<span class="string">"warn('Form cannot be submitted yet.', $event)"</span>&gt;</div><div class="line">Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">methods: &#123;</div><div class="line"><span class="attr">warn</span>: <span class="function"><span class="keyword">function</span> (<span class="params">message, event</span>) </span>&#123;</div><div class="line"><span class="comment">// 现在我们可以访问原生事件对象 </span></div><div class="line">		<span class="keyword">if</span>(event) &#123;</div><div class="line">			event.preventDefault() </div><div class="line">			alert(message) </div><div class="line">		&#125;</div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure>
<p><strong>事件修饰符</strong></p>
<ul>
<li>在事件处理程序中调用<code>event.preventDefault()</code>或<code>event.stopPropagation()</code>是非常常见的需求。尽管我们可以在<code>methods</code> 中轻松实现这点，但更好的方式是：<code>methods</code> 只有纯粹的数据逻辑，而不是去处理<code>DOM</code> 事件细节</li>
<li>为了解决这个问题， <code>Vue.js</code> 为 <code>v-on</code>提供了 事件修饰符。通过由点(<code>.</code>)表示的指令后缀来调用修饰符</li>
<li><code>.stop</code></li>
<li><code>.prevent</code></li>
<li><code>.capture</code></li>
<li><code>.self</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 阻止单击事件冒泡 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 修饰符可以串联 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 添加事件侦听器时使用时间捕获模式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>按键修饰符</strong></p>
<ul>
<li>在监听键盘事件时，我们经常需要监测常见的键值。 <code>Vue</code>允许为 <code>v-on</code>在监听键盘事件时添加按键修饰符：</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.13</span>=<span class="string">"submit"</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li><p>记住所有的 <code>keyCode</code>比较困难，所以 <code>Vue</code>为最常用的按键提供了别名</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 同上 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 缩写语法 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>全部的按键别名：</p>
<ul>
<li><code>enter</code></li>
<li><code>tab</code></li>
<li><code>delete</code> (捕获 “删除” 和 “退格” 键)</li>
<li><code>esc</code></li>
<li><code>space</code></li>
<li><code>up</code></li>
<li><code>down</code></li>
<li><code>left</code></li>
<li><code>right</code></li>
</ul>
</li>
</ul>
<p><strong>为什么在 HTML 中监听事件?</strong></p>
<ul>
<li><p>你可能注意到这种事件监听的方式违背了关注点分离（separation of concern）传统理念。不必担心，因为所有的 <code>Vue.js</code>事件处理方法和表达式都严格绑定在当前视图的 <code>ViewModel</code>上，它不会导致任何维护上的困难。</p>
</li>
<li><p>实际上，使用 <code>v-on</code>有几个好处</p>
<ul>
<li>扫一眼<code>HTML</code> 模板便能轻松定位在 <code>JavaScript</code>代码里对应的方法</li>
<li>因为你无须在 <code>JavaScript</code>里手动绑定事件，你的 <code>ViewModel</code>代码可以是非常纯粹的逻辑，和 <code>DOM</code> 完全解耦，更易于测试。</li>
<li>当一个 <code>ViewModel</code>被销毁时，所有的事件处理器都会自动被删除。你无须担心如何自己清理它们。</li>
</ul>
</li>
</ul>
<h2 id="九、表单控制绑定"><a href="#九、表单控制绑定" class="headerlink" title="九、表单控制绑定"></a>九、表单控制绑定</h2><p><strong>基础用法</strong></p>
<ul>
<li>你可以用 <code>v-model</code>指令在表单控件元素上创建双向数据绑定</li>
<li>它会根据控件类型自动选取正确的方法来更新元素。</li>
<li>尽管有些神奇，但 <code>v-model</code>本质上不过是语法糖，它负责监听用户的输入事件以更新数据，并特别处理一些极端的例子。</li>
<li><code>v-model</code> 并不关心表单控件初始化所生成的值。因为它会选择<code>Vue</code>实例数据来作为具体的值。</li>
</ul>
<p><strong>文本</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"edit me"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>复选框</strong></p>
<ul>
<li>单个勾选框，逻辑值</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkbox"</span>&gt;</span>&#123;&#123; checked&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>多个勾选框，绑定到同一个数组</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"jack"</span> <span class="attr">value</span>=<span class="string">"Jack"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"jack"</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"john"</span> <span class="attr">value</span>=<span class="string">"John"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"john"</span>&gt;</span>John<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"mike"</span> <span class="attr">value</span>=<span class="string">"Mike"</span> <span class="attr">v-model</span>=<span class="string">"checkedN</span></span></div><div class="line">ames"&gt;</div><div class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mike"</span>&gt;</span>Mike<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123; <span class="attr">el</span>: <span class="string">'...'</span>, <span class="attr">data</span>: &#123; <span class="attr">checkedNames</span>: [] &#125;&#125;)</div></pre></td></tr></table></figure>
<h2 id="十、组件"><a href="#十、组件" class="headerlink" title="十、组件"></a>十、组件</h2><h3 id="什么是组件？"><a href="#什么是组件？" class="headerlink" title="什么是组件？"></a>什么是组件？</h3><ul>
<li>组件（Component）是 <code>Vue.js</code> 最强大的功能之一。组件可以扩展<code>HTML</code>元素，封装可重用的代码。在较高层面上，组件是自定义元素，<code>Vue.js</code> 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 <code>HTML</code> 元<br>素的形式，以<code>is</code> 特性扩展</li>
</ul>
<h3 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h3><p><strong>注册</strong></p>
<ul>
<li>之前说过，我们可以通过以下方式创建一个 <code>Vue</code>实例</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Vue(&#123; <span class="attr">el</span>: <span class="string">'#some-element'</span>, <span class="comment">// 选项&#125;)</span></div></pre></td></tr></table></figure>
<ul>
<li><p>要注册一个全局组件，你可以使用 <code>Vue.component(tagName, options) 。</code>例如：<code>Vue.component(&#39;my-component&#39;, { // 选项})</code></p>
</li>
<li><p>组件在注册之后，便可以在父实例的模块中以自定义元素 <code>&lt;my-component&gt;&lt;/my-component&gt;</code> 的形式使用。要确保在初始化根实例 之前 注册了组件：<code>&lt;div id=&quot;example&quot;&gt; &lt;my-component&gt;&lt;/my-component&gt;&lt;/div&gt;</code></p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注册</span></div><div class="line">Vue.component(<span class="string">'my-component'</span>, </div><div class="line">&#123; <span class="attr">template</span>: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">//创建根实例</span></div><div class="line"><span class="keyword">new</span> Vue(&#123; <span class="attr">el</span>: <span class="string">'#example'</span>&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>渲染为：<code>&lt;div id=&quot;example&quot;&gt; &lt;div&gt;A custom component!&lt;/div&gt;&lt;/div&gt;</code></li>
</ul>
<p><strong>局部注册</strong></p>
<ul>
<li>不必在全局注册每个组件。通过使用组件实例选项注册，可以使组件仅在另一个实例/组件的作用域中可用</li>
</ul>
<p><strong>构成组件</strong></p>
<ul>
<li>组件意味着协同工作，通常父子组件会是这样的关系：组件 A 在它的模版中使用了组件 B 。它们之间必然需要相互通信：父组件要给子组件传递数据，子组件需要将它内部发生的事情告知给父组件。然而，在一个良<br>好定义的接口中尽可能将父子组件解耦是很重要的。这保证了每个组件可以在相对隔离的环境中书写和理解，也大幅提高了组件的可维护性和可重用性</li>
<li>在 <code>Vue.js</code>中，父子组件的关系可以总结为 <code>props down</code>, <code>events up</code> 。父组件通过 <code>props</code> 向下传递数据给子组件，子组件通过 <code>events</code>给父组件发送消息。看看它们是怎么工作的</li>
</ul>
<p><img src="./images/1489926033814.jpg" alt="enter description here" title="1489926033814"></p>
<h3 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h3><p><strong>使用Props传递数据</strong></p>
<ul>
<li>组件实例的作用域是孤立的。这意味着不能并且不应该在子组件的模板内直接引用父组件的数据。可以使用<code>props</code>把数据传给子组件。</li>
<li><code>prop</code>是父组件用来传递数据的一个自定义属性。子组件需要显式地用 <code>props</code> 选项 声明 <code>“prop”：</code></li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Vue.component('child', &#123; </div><div class="line">// 声明 props</div><div class="line">props: ['message'],</div><div class="line">// 就像 data 一样，prop 可以用在模板内</div><div class="line">// 同样也可以在 vm 实例中像 “this.message” 这样使用</div><div class="line">template: '&lt;span&gt;&#123;&#123; message&#125;&#125;&lt;/span&gt;</div><div class="line"></div><div class="line">'&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>然后向它传入一个普通字符串<code>&lt;child message=&quot;hello!&quot;&gt;&lt;/child&gt;</code></li>
<li>结果：hello!</li>
</ul>
<p><strong>动态 Props</strong></p>
<ul>
<li>类似于用<code>v-bind</code> 绑定 <code>HTML</code> 特性到一个表达式，也可以用 <code>v-bind</code> 绑定动态 <code>props</code>到父组件的数据。每当父组件的数据变化时，也会传导给子组件：</li>
</ul>
<p><strong>单向数据流</strong></p>
<ul>
<li><code>prop</code>是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件无意修改了父组件的状态——这会让应用的数据流难以理解</li>
<li>另外，每次父组件更新时，子组件的所有 <code>prop</code>都会更新为最新值。这意味着你不应该在子组件内部改变<code>prop</code> 。如果你这么做了，<code>Vue</code> 会在控制台给出警告</li>
</ul>
<h2 id="十一、附录"><a href="#十一、附录" class="headerlink" title="十一、附录"></a>十一、附录</h2><h3 id="附录一-MVC、MVP、MVVM模式对比"><a href="#附录一-MVC、MVP、MVVM模式对比" class="headerlink" title="附录一 MVC、MVP、MVVM模式对比"></a>附录一 MVC、MVP、MVVM模式对比</h3><h4 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h4><hr>
<h5 id="什么是MVC"><a href="#什么是MVC" class="headerlink" title="什么是MVC"></a>什么是MVC</h5><hr>
<ul>
<li>MVC是一种模式，它将应用分为3个部分：数据（模型）、表现层（视图）、用户交互层（控制器）</li>
<li>一个事件的处理大概是这样<ul>
<li>用户和应用产生交互</li>
<li>控制器的事件处理器被触发</li>
<li>控制器从模型中请求数据，并将其交给视图</li>
<li>视图将数据呈现给用户</li>
</ul>
</li>
</ul>
<h5 id="模型（数据保存）"><a href="#模型（数据保存）" class="headerlink" title="模型（数据保存）"></a>模型（数据保存）</h5><hr>
<ul>
<li>模型用来存放用户的所有数据对象。比如有一个user模型，用来存放用户列表、他们的属性以及所有和模型有关的逻辑</li>
<li>模型不必知晓视图和控制器的细节，模型只需包含数据以及直接和这些数据相关的逻辑</li>
</ul>
<h5 id="视图（用户界面）"><a href="#视图（用户界面）" class="headerlink" title="视图（用户界面）"></a>视图（用户界面）</h5><hr>
<ul>
<li>视图是呈现给用户的，用户与之产生交互。在JavaScript应用中，视图大都是由HTML、css、JavaScript模板组成的</li>
</ul>
<h5 id="控制器（业务逻辑）"><a href="#控制器（业务逻辑）" class="headerlink" title="控制器（业务逻辑）"></a>控制器（业务逻辑）</h5><hr>
<ul>
<li>控制器是模型和视图之间的纽带。控制器从视图获得事件和输入，对它们进行进行处理，并相应的更新视图。</li>
<li>当页面加载时，控制器会给视图添加事件监听，比如监听表单提交或按钮点击。然后当用户和你的应用产生交互时，控制器中的事件触发器就开始工作了</li>
</ul>
<h5 id="总结一下："><a href="#总结一下：" class="headerlink" title="总结一下："></a>总结一下：</h5><hr>
<ul>
<li><code>Controller</code> 监听 <code>Model</code> 变化，<code>Model</code> 一变，<code>Controller</code> 就会去更新<code>View</code>。</li>
<li><p><code>Controller</code> 监听用户交互，用户点了提交或修改按钮，Controller 就要去更新 Model</p>
</li>
<li><p><code>View</code> 传送指令到 <code>Controller</code></p>
</li>
<li><code>Controller</code> 完成业务逻辑后，要求 <code>Model</code> 改变状态</li>
<li><code>Model</code> 将新的数据发送到 <code>View</code>，用户得到反馈</li>
</ul>
<p>各部分之间的通信方式</p>
<p><img src="http://image.beekka.com/blog/2015/bg2015020105.png" alt=""></p>
<h4 id="互动模式"><a href="#互动模式" class="headerlink" title="互动模式"></a>互动模式</h4><hr>
<ul>
<li>接受用户指令时，MVC 可以分成两种方式。一种是通过 View 接受指令，传递给 Controller</li>
</ul>
<p><img src="http://image.beekka.com/blog/2015/bg2015020106.png" alt=""></p>
<ul>
<li>另一种是直接通过controller接受指令</li>
</ul>
<p><img src="http://image.beekka.com/blog/2015/bg2015020107.png" alt=""></p>
<h4 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h4><hr>
<ul>
<li><code>MVP</code> 模式将 <code>Controller 改名为</code>Presenter`，同时改变了通信方向</li>
</ul>
<p><img src="http://image.beekka.com/blog/2015/bg2015020109.png" alt=""></p>
<ul>
<li>各部分之间的通信，都是双向的。</li>
<li><code>View</code> 与<code>Model</code> 不发生联系，都通过 <code>Presenter</code> 传递。</li>
<li><code>View</code> 非常薄，不部署任何业务逻辑，称为”被动视图”（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里</li>
</ul>
<h4 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h4><hr>
<ul>
<li><code>MVVM</code> 模式将 <code>Presenter</code> 改名为 <code>ViewModel</code>，基本上与 <code>MVP</code> 模式完全一致</li>
<li>唯一的区别是，它采用双向绑定（data-binding）：<code>View</code>的变动，自动反映在 <code>ViewModel</code>，反之亦然</li>
</ul>
<p><img src="http://image.beekka.com/blog/2015/bg2015020110.png" alt=""></p>
<h3 id="附录二-vue与其他框架的对比"><a href="#附录二-vue与其他框架的对比" class="headerlink" title="附录二 vue与其他框架的对比"></a>附录二 vue与其他框架的对比</h3><h4 id="React"><a href="#React" class="headerlink" title="React"></a>React</h4><ul>
<li><code>React</code> 和 <code>Vue</code> 有许多相似之处，它们都有<ul>
<li>使用 <code>Virtual DOM</code></li>
<li>提供了响应式（Reactive）和组件化（Composable）的视图组件。</li>
<li>将注意力集中保持在核心库，伴随于此，有配套的路由和负责处理全局状态管理的库</li>
</ul>
</li>
</ul>
<h4 id="angular1"><a href="#angular1" class="headerlink" title="angular1"></a>angular1</h4><ul>
<li><code>Vue</code> 的一些语法和 <code>Angular</code>的很相似（例如 <code>v-if vs ng-if</code>）。因为<code>Angular</code>是 <code>Vue</code>早期开发的灵感来源。然而，Angular 中存在的许多问题，在 Vue 中已经得到解决</li>
</ul>
<p><strong>复杂性</strong></p>
<ul>
<li>在 <code>API</code> 与设计两方面上<code>Vue.js</code>都比 <code>Angular 1</code> 简单得多，因此你可以快速地掌握它的全部特性并投入开发。</li>
</ul>
<p><strong>灵活性和模块化</strong></p>
<ul>
<li><code>Vue.js</code> 是一个更加灵活开放的解决方案。它允许你以希望的方式组织应用程序，而不是在任何时候都必须遵循 <code>Angular 1</code>制定的规则，这让<code>Vue</code>能适用于各种项目。我们知道把决定权交给你是非常必要的</li>
</ul>
<p><strong>数据绑定</strong></p>
<ul>
<li><code>Angular 1</code>使用双向绑定，<code>Vue</code> 在不同组件间强制使用单向数据流。这使应用中的数据流更加清晰易懂。</li>
</ul>
<p><strong>指令与组件</strong></p>
<ul>
<li>在 <code>Vue</code> 中指令和组件分得更清晰。指令只封装 <code>DOM</code> 操作，而组件代表一个自给自足的独立单元 —— 有自己的视图和数据逻辑。在 <code>Angular</code> 中两者有不少相混的地方</li>
</ul>
<p><strong>性能</strong></p>
<ul>
<li><code>Vue</code> 有更好的性能，并且非常非常容易优化，因为它不使用脏检查</li>
<li>在 <code>Angular 1</code> 中，当 <code>watchers</code> 越来越多时会变得越来越慢，因为作用域内的每一次变化，所有 <code>watchers</code>都要重新计算。并且，如果一些<code>watchers</code>触发另一个更新，脏检查循环（digest cycle）可能要运行多次。Angular 用户常常要使用深奥的技术，以解决脏检查循环的问题。有时没有简单的办法来优化有大量 <code>watchers</code>的作用域</li>
<li><code>Vue</code> 则根本没有这个问题，因为它使用基于依赖追踪的观察系统并且异步队列更新，所有的数据变化都是独立触发，除非它们之间有明确的依赖关系</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、介绍&quot;&gt;&lt;a href=&quot;#一、介绍&quot; class=&quot;headerlink&quot; title=&quot;一、介绍&quot;&gt;&lt;/a&gt;一、介绍&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/148059
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题整理</title>
    <link href="http://blog.poetries.top/2017/03/12/front-end-interview-summary/"/>
    <id>http://blog.poetries.top/2017/03/12/front-end-interview-summary/</id>
    <published>2017-03-12T14:24:08.000Z</published>
    <updated>2017-06-11T07:22:47.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="HTML，-HTTP，web综合问题"><a href="#HTML，-HTTP，web综合问题" class="headerlink" title="$HTML， HTTP，web综合问题"></a>$HTML， HTTP，web综合问题</h3><ul>
<li>1、前端需要注意哪些<code>SEO</code></li>
<li>2、<code>&lt;img&gt;</code>的<code>title</code>和<code>alt</code>有什么区别</li>
<li>3、<code>HTTP</code>的几种请求方法用途</li>
<li>4、从浏览器地址栏输入<code>url</code>到显示页面的步骤</li>
<li>5、如何进行网站性能优化</li>
<li>6、HTTP状态码及其含义</li>
<li>7、语义化的理解</li>
<li>8、介绍一下你对浏览器内核的理解</li>
<li>9、<code>html5</code>有哪些新特性、移除了那些元素？</li>
<li>10、<code>HTML5</code>的离线储存怎么使用，工作原理能不能解释一下？</li>
<li>11、浏览器是怎么对<code>HTML5</code>的离线储存资源进行管理和加载的呢</li>
<li>12、请描述一下 <code>cookies</code>，<code>sessionStorage</code> 和 <code>localStorage</code> 的区别</li>
<li>13、<code>iframe</code>有那些缺点？</li>
<li>14、<code>WEB</code>标准以及W3C标准是什么?</li>
<li>15、<code>xhtml</code>和<code>html</code>有什么区别?</li>
<li>16、<code>Doctype</code>作用? 严格模式与混杂模式如何区分？它们有何意义?</li>
<li>17、行内元素有哪些？块级元素有哪些？ 空(<code>void</code>)元素有那些？行内元素和块级元素有什么区别？</li>
<li>18、<code>HTML</code>全局属性(<code>global attribute</code>)有哪些</li>
<li>19、<code>Canvas</code>和<code>SVG</code>有什么区别？</li>
<li>20、<code>HTML5</code> 为什么只需要写 <code>&lt;!DOCTYPE HTML&gt;？</code></li>
<li>21、如何在页面上实现一个圆形的可点击区域？</li>
<li>22、网页验证码是干嘛的，是为了解决什么安全问题</li>
</ul>
<h3 id="CSS部分"><a href="#CSS部分" class="headerlink" title="$CSS部分"></a>$CSS部分</h3><ul>
<li>1、<code>css sprite</code>是什么,有什么优缺点</li>
<li>2、<code>display: none;</code>与<code>visibility: hidden</code>;的区别</li>
<li>3、<code>link</code>与<code>@import</code>的区别</li>
<li>4、什么是<code>FOUC?</code>如何避免</li>
<li>5、如何创建块级格式化上下文(<code>block formatting context</code>),<code>BFC</code>有什么用</li>
<li>7、清除浮动的几种方式，各自的优缺点</li>
<li>8、为什么要初始化<code>CSS</code>样式?</li>
<li>9、<code>css3</code>有哪些新特性</li>
<li>10、<code>display</code>有哪些值？说明他们的作用</li>
<li>11、介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</li>
<li>12、<code>CSS</code>优先级算法如何计算？</li>
<li>13、对<code>BFC</code>规范的理解？</li>
<li>14、谈谈浮动和清除浮动</li>
<li>15、<code>position</code>的值， <code>relative</code>和absolute`定位原点是</li>
<li>16、<code>display:inline-block</code> 什么时候不会显示间隙？(携程)</li>
<li>17、<code>PNG,GIF,JPG</code>的区别及如何选</li>
<li>18、行内元素<code>float:left</code>后是否变为块级元素？</li>
<li>19、在网页中的应该使用奇数还是偶数的字体？为什么呢？</li>
<li>20、<code>::before</code> 和 <code>:after</code>中双冒号和单冒号有什么区别？解释一下这<code>2</code>个伪元素的作用</li>
<li>21、如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）</li>
<li>22、<code>CSS</code>合并方法</li>
<li>23、<code>CSS</code>不同选择器的权重(<code>CSS</code>层叠的规则)</li>
<li>24、列出你所知道可以改变页面布局的属性</li>
<li>25、<code>CSS</code>在性能优化方面的实践</li>
<li>26、<code>CSS3</code>动画（简单动画的实现，如旋转等）</li>
<li>27、<code>base64</code>的原理及优缺点</li>
</ul>
<h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="$JavaScript"></a>$JavaScript</h3><ul>
<li>1、闭包</li>
<li>2、说说你对作用域链的理解</li>
<li>3、<code>JavaScript</code>原型，原型链 ? 有什么特点？</li>
<li>4、请解释什么是事件代理</li>
<li>5、<code>Javascript</code>如何实现继承？</li>
<li>6、谈谈<code>This</code>对象的理解</li>
<li>7、事件模型</li>
<li>8、<code>new</code>操作符具体干了什么呢?</li>
<li>9、<code>Ajax</code>原理</li>
<li>11、模块化开发怎么做？</li>
<li>12、异步加载<code>JS</code>的方式有哪些？</li>
<li>13、那些操作会造成内存泄漏？</li>
<li>14、<code>XML</code>和<code>JSON</code>的区别？</li>
<li>15、谈谈你对<code>webpack</code>的看法</li>
<li>17、常见<code>web</code>安全及防护原理</li>
<li>18、用过哪些设计模式？</li>
<li>19、为什么要有同源限制？</li>
<li>20、<code>offsetWidth/offsetHeight</code>,<code>clientWidth/clientHeight</code>与<code>scrollWidth/scrollHeight</code>的区别</li>
<li>21、<code>javascript</code>有哪些方法定义对象</li>
<li>22、常见兼容性问题？</li>
<li>22、说说你对<code>promise</code>的了解</li>
<li>23、你觉得<code>jQuery</code>源码有哪些写的好的地方</li>
<li>25、<code>Node</code>的应用场景</li>
<li>26、谈谈你对<code>AMD</code>、<code>CMD</code>的理解</li>
<li>27、那些操作会造成内存泄漏？</li>
<li>28、<code>web</code>开发中会话跟踪的方法有哪些</li>
<li>29、介绍<code>js</code>的基本数据类型</li>
<li>30、介绍<code>js</code>有哪些内置对象？</li>
<li>31、说几条写<code>JavaScript</code>的基本规范？</li>
<li>32、<code>JavaScript</code>有几种类型的值？，你能画一下他们的内存图吗？</li>
<li>33、<code>javascript</code>创建对象的几种方式？</li>
<li>34、<code>eval</code>是做什么的？</li>
<li>35、<code>null，undefined</code> 的区别？</li>
<li>36、<code>[“1”, “2”, “3”].map(parseInt)</code> 答案是多少？</li>
<li>37、<code>javascript</code> 代码中的<code>”use strict”</code>;是什么意思 ? 使用它区别是什么？</li>
<li>38、<code>JSON</code>的了解？</li>
<li>39、js延迟加载的方式有哪些？</li>
<li>40、同步和异步的区别?</li>
<li>41、渐进增强和优雅降级</li>
<li>42、<code>defer</code>和<code>async</code></li>
<li>43、说说严格模式的限制</li>
<li>44、<code>attribute</code>和<code>property</code>的区别是什么？</li>
<li>45、谈谈你对<code>ES6</code>的理解</li>
<li>46、<code>ECMAScript6</code> 怎么写<code>class</code>么，为什么会出现<code>class</code>这种东西?</li>
<li>47、什么是面向对象编程及面向过程编程，它们的异同和优缺点</li>
<li>48、从你自己的理解来看，你是如何理解面向对象编程的，它解决了什么问题，有什么作用</li>
<li>49、对web标准、可用性、可访问性的理解</li>
</ul>
<h3 id="编程题"><a href="#编程题" class="headerlink" title="$编程题"></a>$编程题</h3><ul>
<li>1、写一个通用的事件侦听器函数</li>
<li>2、如何判断一个对象是否为数组</li>
<li>3、冒泡排序</li>
<li>4、快速排序</li>
<li>5、编写一个方法 求一个字符串的字节长度</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="$其他"></a>$其他</h3><ul>
<li>1、谈谈你对重构的理解</li>
<li>2、什么样的前端代码是好的</li>
<li>3、对前端工程师这个职位是怎么样理解的？它的前景会怎么样？</li>
<li>4、你觉得前端工程的价值体现在哪</li>
<li>5、平时如何管理你的项目？</li>
</ul>
<h3 id="人事面"><a href="#人事面" class="headerlink" title="人事面"></a>人事面</h3><ul>
<li>面试完你还有什么问题要问的吗</li>
<li>你有什么爱好?</li>
<li>你最大的优点和缺点是什么?</li>
<li>你为什么会选择这个行业，职位?</li>
<li>你觉得你适合从事这个岗位吗?</li>
<li>你有什么职业规划?</li>
<li>你对工资有什么要求?</li>
<li>如何看待前端开发？</li>
<li>未来三到五年的规划是怎样的？</li>
</ul>
<h3 id="常问"><a href="#常问" class="headerlink" title="常问"></a>常问</h3><ul>
<li>自我介绍</li>
<li>你的项目中技术难点是什么？遇到了什么问题？你是怎么解决的？</li>
<li>你认为哪个项目做得最好？</li>
<li>最近在看哪些前端方面的书？</li>
<li>平时是如何学习前端开发的？</li>
<li>你最有成就感的一件事</li>
<li>你是怎么学习前端的</li>
</ul>
<h2 id="HTML，-HTTP，web综合问题-1"><a href="#HTML，-HTTP，web综合问题-1" class="headerlink" title="$HTML， HTTP，web综合问题"></a>$HTML， HTTP，web综合问题</h2><h3 id="1、前端需要注意哪些SEO"><a href="#1、前端需要注意哪些SEO" class="headerlink" title="1、前端需要注意哪些SEO"></a>1、前端需要注意哪些SEO</h3><ul>
<li>合理的<code>title</code>、<code>description</code>、<code>keywords</code>：搜索对着三项的权重逐个减小，title值强调重点即可，重要关键词出现不要超过2次，而且要靠前，不同页面<code>title</code>要有所不同；<code>description</code>把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面<code>description</code>有所不同；<code>keywords</code>列举出重要关键词即可</li>
<li>语义化的<code>HTML</code>代码，符合W3C规范：语义化代码让搜索引擎容易理解网页</li>
<li>重要内容<code>HTML</code>代码放在最前：搜索引擎抓取<code>HTML</code>顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取</li>
<li>重要内容不要用<code>js</code>输出：爬虫不会执行js获取内容</li>
<li>少用<code>iframe</code>：搜索引擎不会抓取<code>iframe</code>中的内容</li>
<li>非装饰性图片必须加<code>alt</code></li>
<li>提高网站速度：网站速度是搜索引擎排序的一个重要指标</li>
</ul>
<h3 id="2、-lt-img-gt-的title和alt有什么区别"><a href="#2、-lt-img-gt-的title和alt有什么区别" class="headerlink" title="2、&lt;img&gt;的title和alt有什么区别"></a>2、<code>&lt;img&gt;</code>的<code>title</code>和<code>alt</code>有什么区别</h3><ul>
<li>通常当鼠标滑动到元素上的时候显示</li>
<li><code>alt</code>是<code>&lt;img&gt;</code>的特有属性，是图片内容的等价描述，用于图片无法加载时显示、读屏器阅读图片。可提图片高可访问性，除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。</li>
</ul>
<h3 id="3、HTTP的几种请求方法用途"><a href="#3、HTTP的几种请求方法用途" class="headerlink" title="3、HTTP的几种请求方法用途"></a>3、HTTP的几种请求方法用途</h3><ul>
<li><p>1、<code>GET</code>方法</p>
<ul>
<li>发送一个请求来取得服务器上的某一资源</li>
</ul>
</li>
<li><p>2、<code>POST</code>方法</p>
<ul>
<li>向<code>URL</code>指定的资源提交数据或附加新的数据</li>
</ul>
</li>
<li><p>3、<code>PUT</code>方法</p>
<ul>
<li>跟<code>POST</code>方法很像，也是想服务器提交数据。但是，它们之间有不同。PUT指定了资源在服务器上的位置，而<code>POST</code>没有</li>
</ul>
</li>
<li><p>4、<code>HEAD</code>方法</p>
<ul>
<li>只请求页面的首部</li>
</ul>
</li>
<li><p>5、<code>DELETE</code>方法</p>
<ul>
<li>删除服务器上的某资源</li>
</ul>
</li>
<li><p>6、<code>OPTIONS</code>方法</p>
<ul>
<li>它用于获取当前<code>URL</code>所支持的方法。如果请求成功，会有一个<code>Allow</code>的头包含类似<code>“GET,POST”</code>这样的信息</li>
</ul>
</li>
<li><p>7、<code>TRACE</code>方法</p>
<ul>
<li><code>TRACE</code>方法被用于激发一个远程的，应用层的请求消息回路</li>
</ul>
</li>
<li><p>8、<code>CONNECT</code>方法</p>
<ul>
<li>把请求连接转换到透明的<code>TCP/IP</code>通道</li>
</ul>
</li>
</ul>
<h3 id="4、从浏览器地址栏输入url到显示页面的步骤"><a href="#4、从浏览器地址栏输入url到显示页面的步骤" class="headerlink" title="4、从浏览器地址栏输入url到显示页面的步骤"></a>4、从浏览器地址栏输入url到显示页面的步骤</h3><ul>
<li>浏览器根据请求的<code>URL</code>交给<code>DNS</code>域名解析，找到真实<code>IP</code>，向服务器发起请求；</li>
<li>服务器交给后台处理完成后返回数据，浏览器接收文件（<code>HTML、JS、CSS</code>、图象等）；</li>
<li>浏览器对加载到的资源（<code>HTML、JS、CSS</code>等）进行语法解析，建立相应的内部数据结构（如<code>HTML</code>的<code>DOM</code>）；</li>
<li>载入解析到的资源文件，渲染页面，完成。</li>
</ul>
<h3 id="5、如何进行网站性能优化"><a href="#5、如何进行网站性能优化" class="headerlink" title="5、如何进行网站性能优化"></a>5、如何进行网站性能优化</h3><ul>
<li><p><code>content</code>方面</p>
<ol>
<li>减少<code>HTTP</code>请求：合并文件、<code>CSS</code>精灵、<code>inline Image</code></li>
<li>减少<code>DNS</code>查询：<code>DNS</code>缓存、将资源分布到恰当数量的主机名</li>
<li>减少<code>DOM</code>元素数量</li>
</ol>
</li>
<li><p><code>Server</code>方面</p>
<ol>
<li>使用<code>CDN</code></li>
<li>配置<code>ETag</code></li>
<li>对组件使用<code>Gzip</code>压缩</li>
</ol>
</li>
<li><p><code>Cookie</code>方面</p>
<ol>
<li>减小<code>cookie</code>大小</li>
</ol>
</li>
<li><p><code>css</code>方面</p>
<ol>
<li>将样式表放到页面顶部</li>
<li>不使用<code>CSS</code>表达式</li>
<li>使用<code>&lt;link&gt;</code>不使用<code>@import</code></li>
</ol>
</li>
<li><p><code>Javascript</code>方面</p>
<ol>
<li>将脚本放到页面底部</li>
<li>将<code>javascript</code>和<code>css</code>从外部引入</li>
<li>压缩<code>javascript</code>和<code>css</code></li>
<li>删除不需要的脚本</li>
<li>减少<code>DOM</code>访问</li>
</ol>
</li>
<li><p>图片方面</p>
<ol>
<li>优化图片：根据实际颜色需要选择色深、压缩</li>
<li>优化<code>css</code>精灵</li>
<li>不要在<code>HTML</code>中拉伸图片</li>
</ol>
</li>
</ul>
<h3 id="6、HTTP状态码及其含义"><a href="#6、HTTP状态码及其含义" class="headerlink" title="6、HTTP状态码及其含义"></a>6、HTTP状态码及其含义</h3><ul>
<li><code>1XX</code>：信息状态码<ul>
<li><code>100  Continue</code>   继续，一般在发送<code>post</code>请求时，已发送了<code>http header</code>之后服务端将返回此信息，表示确认，之后发送具体参数信息</li>
</ul>
</li>
<li><code>2XX</code>：成功状态码<ul>
<li><code>200  OK</code>         正常返回信息</li>
<li><code>201  Created</code>   请求成功并且服务器创建了新的资源</li>
<li><code>202  Accepted</code>   服务器已接受请求，但尚未处理</li>
</ul>
</li>
<li><code>3XX</code>：重定向<ul>
<li><code>301  Moved Permanently</code>  请求的网页已永久移动到新位置。</li>
<li><code>302 Found</code>     临时性重定向。</li>
<li><code>303 See Other</code>  临时性重定向，且总是使用 <code>GET</code> 请求新的 <code>URI</code>。</li>
<li><code>304  Not Modified</code> 自从上次请求后，请求的网页未修改过。</li>
</ul>
</li>
<li><code>4XX</code>：客户端错误<ul>
<li><code>400 Bad Request</code> 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。</li>
<li><code>401 Unauthorized</code> 请求未授权。</li>
<li><code>403 Forbidden</code>  禁止访问。</li>
<li><code>404 Not Found</code>   找不到如何与 <code>URI</code> 相匹配的资源。</li>
</ul>
</li>
<li><code>5XX:</code> 服务器错误<ul>
<li><code>500 Internal Server Error</code>  最常见的服务器端错误。</li>
<li><code>503 Service Unavailable</code> 服务器端暂时无法处理请求（可能是过载或维护）。</li>
</ul>
</li>
</ul>
<h3 id="7、语义化的理解"><a href="#7、语义化的理解" class="headerlink" title="7、语义化的理解"></a>7、语义化的理解</h3><ul>
<li>用正确的标签做正确的事情！</li>
<li><code>html</code>语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；</li>
<li>在没有样式<code>CSS</code>情况下也以一种文档格式显示，并且是容易阅读的。</li>
<li>搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 <code>SEO</code>。</li>
<li>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解</li>
</ul>
<h3 id="8、介绍一下你对浏览器内核的理解？"><a href="#8、介绍一下你对浏览器内核的理解？" class="headerlink" title="8、介绍一下你对浏览器内核的理解？"></a>8、介绍一下你对浏览器内核的理解？</h3><ul>
<li><p>主要分成两部分：渲染引擎(<code>layout engineer</code>或<code>Rendering Engine</code>)和<code>JS</code>引擎</p>
</li>
<li><p>渲染引擎：负责取得网页的内容（<code>HTML</code>、<code>XML</code>、图像等等）、整理讯息（例如加入<code>CSS</code>等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核</p>
</li>
<li><code>JS</code>引擎则：解析和执行<code>javascript</code>来实现网页的动态效果</li>
<li>最开始渲染引擎和<code>JS</code>引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎</li>
</ul>
<h3 id="9、html5有哪些新特性、移除了那些元素？"><a href="#9、html5有哪些新特性、移除了那些元素？" class="headerlink" title="9、html5有哪些新特性、移除了那些元素？"></a>9、html5有哪些新特性、移除了那些元素？</h3><ul>
<li><p><code>HTML5</code> 现在已经不是 <code>SGML</code> 的子集，主要是关于图像，位置，存储，多任务等功能的增加</p>
<ul>
<li>绘画 <code>canvas</code></li>
<li>用于媒介回放的 <code>video</code> 和 <code>audio</code> 元素</li>
<li>本地离线存储 <code>localStorage</code> 长期存储数据，浏览器关闭后数据不丢失</li>
<li><code>sessionStorage</code> 的数据在浏览器关闭后自动删除</li>
<li>语意化更好的内容元素，比如<code>article</code>、<code>footer</code>、<code>header</code>、<code>nav</code>、<code>section</code></li>
<li>表单控件，<code>calendar</code>、<code>date</code>、<code>time</code>、<code>email</code>、<code>url</code>、<code>search</code></li>
<li>新的技术<code>webworker</code>, <code>websocket</code>, <code>Geolocation</code></li>
</ul>
</li>
<li><p>移除的元素：</p>
<ul>
<li>纯表现的元素：<code>basefont</code>，<code>big</code>，<code>center</code>，<code>font</code>, <code>s</code>，<code>strike，</code>tt，u`</li>
<li>对可用性产生负面影响的元素：<code>frame</code>，<code>frameset</code>，<code>noframes</code></li>
</ul>
</li>
<li><p>支持<code>HTML5</code>新标签：</p>
<ul>
<li><code>IE8/IE7/IE6</code>支持通过<code>document.createElement</code>方法产生的标签</li>
<li>可以利用这一特性让这些浏览器支<code>持HTML5</code>新标签</li>
<li>浏览器支持新标签后，还需要添加标签默认的样式</li>
</ul>
</li>
<li><p>当然也可以直接使用成熟的框架、比如<code>html5shim</code></p>
</li>
</ul>
<h3 id="10、HTML5的离线储存怎么使用，工作原理能不能解释一下？"><a href="#10、HTML5的离线储存怎么使用，工作原理能不能解释一下？" class="headerlink" title="10、HTML5的离线储存怎么使用，工作原理能不能解释一下？"></a>10、<code>HTML5</code>的离线储存怎么使用，工作原理能不能解释一下？</h3><ul>
<li><p>在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件</p>
</li>
<li><p>原理：<code>HTML5</code>的离线存储是基于一个新建的<code>.appcache</code>文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像<code>cookie</code>一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示</p>
</li>
<li><p>如何使用：</p>
<ul>
<li>页面头部像下面一样加入一个<code>manifest</code>的属性；</li>
<li>在<code>cache.manifest</code>文件的编写离线存储的资源</li>
<li>在离线状态时，操作<code>window.applicationCache</code>进行需求实现</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">CACHE MANIFEST</div><div class="line">#v0.11</div><div class="line">CACHE:</div><div class="line">js/app.js</div><div class="line">css/style.css</div><div class="line">NETWORK:</div><div class="line">resourse/logo.png</div><div class="line">FALLBACK:</div><div class="line">/ /offline.html</div></pre></td></tr></table></figure>
<h3 id="11、浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢"><a href="#11、浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢" class="headerlink" title="11、浏览器是怎么对HTML5的离线储存资源进行管理和加载的呢"></a>11、浏览器是怎么对<code>HTML5</code>的离线储存资源进行管理和加载的呢</h3><ul>
<li><p>在线的情况下，浏览器发现<code>html</code>头部有<code>manifest</code>属性，它会请求<code>manifest</code>文件，如果是第一次访问<code>app</code>，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过<code>app</code>并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的<code>manifest</code>文件与旧的<code>manifes</code>t文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。</p>
</li>
<li><p>离线的情况下，浏览器就直接使用离线存储的资源。</p>
</li>
</ul>
<h3 id="12、请描述一下-cookies，sessionStorage-和-localStorage-的区别？"><a href="#12、请描述一下-cookies，sessionStorage-和-localStorage-的区别？" class="headerlink" title="12、请描述一下 cookies，sessionStorage 和 localStorage 的区别？"></a>12、请描述一下 <code>cookies</code>，<code>sessionStorage</code> 和 <code>localStorage</code> 的区别？</h3><ul>
<li><code>cookie</code>是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）</li>
<li>cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递</li>
<li><code>sessionStorage</code>和<code>localStorage</code>不会自动把数据发给服务器，仅在本地保存</li>
<li><p>存储大小：</p>
<ul>
<li><code>cookie</code>数据大小不能超过4k</li>
<li><code>sessionStorage</code>和<code>localStorage</code>虽然也有存储大小的限制，但比<code>cookie</code>大得多，可以达到5M或更大</li>
</ul>
</li>
<li><p>有期时间：</p>
<ul>
<li><code>localStorage</code> 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据</li>
<li><code>sessionStorage</code>  数据在当前浏览器窗口关闭后自动删除</li>
<li><code>cookie</code>  设置的<code>cookie</code>过期时间之前一直有效，即使窗口或浏览器关闭</li>
</ul>
</li>
</ul>
<h3 id="13、iframe有那些缺点？"><a href="#13、iframe有那些缺点？" class="headerlink" title="13、iframe有那些缺点？"></a>13、iframe有那些缺点？</h3><ul>
<li><code>iframe</code>会阻塞主页面的<code>Onload</code>事件</li>
<li>搜索引擎的检索程序无法解读这种页面，不利于<code>SEO</code></li>
<li><code>iframe</code>和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载</li>
<li>使用<code>iframe</code>之前需要考虑这两个缺点。如果需要使用<code>iframe</code>，最好是通过<code>javascript</code>动态给<code>iframe</code>添加<code>src</code>属性值，这样可以绕开以上两个问题</li>
</ul>
<h3 id="14、WEB标准以及W3C标准是什么"><a href="#14、WEB标准以及W3C标准是什么" class="headerlink" title="14、WEB标准以及W3C标准是什么?"></a>14、WEB标准以及W3C标准是什么?</h3><ul>
<li>标签闭合、标签小写、不乱嵌套、使用外链<code>css</code>和<code>js</code>、结构行为表现的分离</li>
</ul>
<h3 id="15、xhtml和html有什么区别"><a href="#15、xhtml和html有什么区别" class="headerlink" title="15、xhtml和html有什么区别?"></a>15、xhtml和html有什么区别?</h3><ul>
<li><p>一个是功能上的差别</p>
<ul>
<li>主要是<code>XHTML</code>可兼容各大浏览器、手机以及<code>PDA</code>，并且浏览器也能快速正确地编译网页</li>
</ul>
</li>
<li><p>另外是书写习惯的差别</p>
<ul>
<li><code>XHTML</code> 元素必须被正确地嵌套，闭合，区分大小写，文档必须拥有根元素</li>
</ul>
</li>
</ul>
<h3 id="16、Doctype作用-严格模式与混杂模式如何区分？它们有何意义"><a href="#16、Doctype作用-严格模式与混杂模式如何区分？它们有何意义" class="headerlink" title="16、Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?"></a>16、Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?</h3><ul>
<li>页面被加载的时，<code>link</code>会同时被加载，而<code>@imort</code>页面被加载的时，<code>link</code>会同时被加载，而<code>@import</code>引用的<code>CSS</code>会等到页面被加载完再加载<br><code>import</code>只在<code>IE5</code>以上才能识别，而<code>link</code>是<code>XHTML</code>标签，无兼容问题<br><code>link</code>方式的样式的权重 高于<code>@import</code>的权重</li>
<li><code>&lt;!DOCTYPE&gt;</code> 声明位于文档中的最前面，处于 <code>&lt;html&gt;</code> 标签之前。告知浏览器的解析器， 用什么文档类型 规范来解析这个文档</li>
<li>严格模式的排版和 <code>JS</code> 运作模式是 以该浏览器支持的最高标准运行</li>
<li>在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。 <code>DOCTYPE</code>不存在或格式不正确会导致文档以混杂模式呈现</li>
</ul>
<h3 id="17、行内元素有哪些？块级元素有哪些？-空-void-元素有那些？行内元素和块级元素有什么区别？"><a href="#17、行内元素有哪些？块级元素有哪些？-空-void-元素有那些？行内元素和块级元素有什么区别？" class="headerlink" title="17、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？行内元素和块级元素有什么区别？"></a>17、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？行内元素和块级元素有什么区别？</h3><ul>
<li>行内元素有：<code>a b span img input select strong</code></li>
<li>块级元素有：<code>div ul ol li dl dt dd h1 h2 h3 h4…p</code></li>
<li>空元素：<code>&lt;br&gt; &lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt;</code></li>
<li>行内元素不可以设置宽高，不独占一行</li>
<li>块级元素可以设置宽高，独占一行</li>
</ul>
<h3 id="18、HTML全局属性-global-attribute-有哪些"><a href="#18、HTML全局属性-global-attribute-有哪些" class="headerlink" title="18、HTML全局属性(global attribute)有哪些"></a>18、HTML全局属性(global attribute)有哪些</h3><ul>
<li><code>class</code>:为元素设置类标识</li>
<li><code>data-*</code>: 为元素增加自定义属性</li>
<li><code>draggable</code>: 设置元素是否可拖拽</li>
<li><code>id</code>: 元素<code>id</code>，文档内唯一</li>
<li><code>lang</code>: 元素内容的的语言</li>
<li><code>style</code>: 行内<code>css</code>样式</li>
<li><code>title</code>: 元素相关的建议信息</li>
</ul>
<h3 id="19、Canvas和SVG有什么区别？"><a href="#19、Canvas和SVG有什么区别？" class="headerlink" title="19、Canvas和SVG有什么区别？"></a>19、Canvas和SVG有什么区别？</h3><ul>
<li><code>svg</code>绘制出来的每一个图形的元素都是独立的<code>DOM</code>节点，能够方便的绑定事件或用来修改。<code>canvas</code>输出的是一整幅画布</li>
<li><code>svg</code>输出的图形是矢量图形，后期可以修改参数来自由放大缩小，不会是真和锯齿。而<code>canvas</code>输出标量画布，就像一张图片一样，放大会失真或者锯齿</li>
</ul>
<h3 id="20、HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-？"><a href="#20、HTML5-为什么只需要写-lt-DOCTYPE-HTML-gt-？" class="headerlink" title="20、HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？"></a>20、HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt;？</h3><ul>
<li><code>HTML5</code> 不基于 <code>SGML</code>，因此不需要对<code>DTD</code>进行引用，但是需要<code>doctype</code>来规范浏览器的行为</li>
<li>而<code>HTML4.01</code>基于<code>SGML</code>,所以需要对<code>DTD</code>进行引用，才能告知浏览器文档所使用的文档类型</li>
</ul>
<h3 id="21、如何在页面上实现一个圆形的可点击区域？"><a href="#21、如何在页面上实现一个圆形的可点击区域？" class="headerlink" title="21、如何在页面上实现一个圆形的可点击区域？"></a>21、如何在页面上实现一个圆形的可点击区域？</h3><ul>
<li><code>svg</code></li>
<li><code>border-radius</code></li>
<li>纯<code>js</code>实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等</li>
</ul>
<h3 id="22、网页验证码是干嘛的，是为了解决什么安全问题"><a href="#22、网页验证码是干嘛的，是为了解决什么安全问题" class="headerlink" title="22、网页验证码是干嘛的，是为了解决什么安全问题"></a>22、网页验证码是干嘛的，是为了解决什么安全问题</h3><ul>
<li>区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水</li>
<li>有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试</li>
</ul>
<h2 id="CSS部分-1"><a href="#CSS部分-1" class="headerlink" title="$CSS部分"></a>$CSS部分</h2><h3 id="1、css-sprite是什么-有什么优缺点"><a href="#1、css-sprite是什么-有什么优缺点" class="headerlink" title="1、css sprite是什么,有什么优缺点"></a>1、css sprite是什么,有什么优缺点</h3><ul>
<li><p>概念：将多个小图片拼接到一个图片中。通过<code>background-position</code>和元素尺寸调节需要显示的背景图案。</p>
</li>
<li><p>优点：</p>
<ul>
<li>减少<code>HTTP</code>请求数，极大地提高页面加载速度</li>
<li>增加图片信息重复度，提高压缩比，减少图片大小</li>
<li>更换风格方便，只需在一张或几张图片上修改颜色或样式即可实现</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>图片合并麻烦</li>
<li>维护麻烦，修改一个图片可能需要从新布局整个图片，样式</li>
</ul>
</li>
</ul>
<h3 id="2、display-none-与visibility-hidden-的区别"><a href="#2、display-none-与visibility-hidden-的区别" class="headerlink" title="2、display: none;与visibility: hidden;的区别"></a>2、<code>display: none;</code>与<code>visibility: hidden;</code>的区别</h3><ul>
<li><p>联系：它们都能让元素不可见</p>
</li>
<li><p>区别：</p>
<ul>
<li><code>display:none</code>;会让元素完全从渲染树中消失，渲染的时候不占据任何空间；<code>visibility: hidden</code>;不会让元素从渲染树消失，渲染师元素继续占据空间，只是内容不可见</li>
<li><code>display: none</code>;是非继承属性，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示<code>；visibility: hidden;</code>是继承属性，子孙节点消失由于继承了<code>hidden</code>，通过设置<code>visibility: visible;</code>可以让子孙节点显式</li>
<li>修改常规流中元素的<code>display</code>通常会造成文档重排。修改<code>visibility</code>属性只会造成本元素的重绘。</li>
<li>读屏器不会读取<code>display: none</code>;元素内容；会读取<code>visibility: hidden;</code>元素内容</li>
</ul>
</li>
</ul>
<h3 id="3、link与-import的区别"><a href="#3、link与-import的区别" class="headerlink" title="3、link与@import的区别"></a>3、<code>link</code>与<code>@import</code>的区别</h3><ol>
<li><code>link</code>是<code>HTML</code>方式， <code>@import</code>是CSS方式</li>
<li><code>link</code>最大限度支持并行下载，<code>@import</code>过多嵌套导致串行下载，出现<code>FOUC</code></li>
<li><code>link</code>可以通过<code>rel=&quot;alternate stylesheet&quot;</code>指定候选样式</li>
<li>浏览器对<code>link</code>支持早于<code>@import</code>，可以使用<code>@import</code>对老浏览器隐藏样式</li>
<li><code>@import</code>必须在样式规则之前，可以在css文件中引用其他文件</li>
<li>总体来说：<code>link</code>优于<code>@import</code></li>
</ol>
<h3 id="4、什么是FOUC-如何避免"><a href="#4、什么是FOUC-如何避免" class="headerlink" title="4、什么是FOUC?如何避免"></a>4、什么是FOUC?如何避免</h3><ul>
<li><code>Flash Of Unstyled Content</code>：用户定义样式表加载之前浏览器使用默认样式显示文档，用户样式加载渲染之后再从新显示文档，造成页面闪烁。</li>
<li><strong>解决方法</strong>：把样式表放到文档的<code>head</code></li>
</ul>
<h3 id="5、如何创建块级格式化上下文-block-formatting-context-BFC有什么用"><a href="#5、如何创建块级格式化上下文-block-formatting-context-BFC有什么用" class="headerlink" title="5、如何创建块级格式化上下文(block formatting context),BFC有什么用"></a>5、如何创建块级格式化上下文(block formatting context),BFC有什么用</h3><ul>
<li><p>创建规则：</p>
<ul>
<li>根元素</li>
<li>浮动元素（<code>float</code>不是<code>none</code>）</li>
<li>绝对定位元素（<code>position</code>取值为<code>absolute</code>或<code>fixed</code>）</li>
<li><code>display</code>取值为<code>inline-block</code>,<code>table-cell</code>, <code>table-caption</code>,<code>flex</code>, <code>inline-flex</code>之一的元素</li>
<li><code>overflow</code>不是<code>visible</code>的元素</li>
</ul>
</li>
<li><p>作用：</p>
<ul>
<li>可以包含浮动元素</li>
<li>不被浮动元素覆盖</li>
<li>阻止父子元素的<code>margin</code>折叠</li>
</ul>
</li>
</ul>
<h3 id="6、display-float-position的关系"><a href="#6、display-float-position的关系" class="headerlink" title="6、display,float,position的关系"></a>6、display,float,position的关系</h3><ul>
<li>如果<code>display</code>为<code>none</code>，那么<code>position</code>和<code>float</code>都不起作用，这种情况下元素不产生框</li>
<li>否则，如果<code>position</code>值为<code>absolute</code>或者<code>fixed</code>，框就是绝对定位的，<code>float</code>的计算值为<code>none</code>，<code>display</code>根据下面的表格进行调整。</li>
<li>否则，如果<code>float</code>不是<code>none</code>，框是浮动的，<code>display</code>根据下表进行调整</li>
<li>否则，如果元素是根元素，<code>display</code>根据下表进行调整</li>
<li>其他情况下<code>display</code>的值为指定值</li>
<li>总结起来：<strong>绝对定位、浮动、根元素都需要调整<code>display</code></strong></li>
</ul>
<h3 id="7、清除浮动的几种方式，各自的优缺点"><a href="#7、清除浮动的几种方式，各自的优缺点" class="headerlink" title="7、清除浮动的几种方式，各自的优缺点"></a>7、清除浮动的几种方式，各自的优缺点</h3><ul>
<li>父级<code>div</code>定义<code>height</code></li>
<li>结尾处加空<code>div</code>标签<code>clear:both</code></li>
<li>父级<code>div</code>定义伪类<code>:after</code>和<code>zoom</code></li>
<li>父级<code>div</code>定义<code>overflow:hidden</code></li>
<li>父级<code>div</code>也浮动，需要定义宽度</li>
<li>结尾处加<code>br</code>标签<code>clear:both</code></li>
<li>比较好的是第3种方式，好多网站都这么用</li>
</ul>
<h3 id="8、为什么要初始化CSS样式"><a href="#8、为什么要初始化CSS样式" class="headerlink" title="8、为什么要初始化CSS样式?"></a>8、为什么要初始化CSS样式?</h3><ul>
<li>因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对<code>CSS</code>初始化往往会出现浏览器之间的页面显示差异。</li>
<li>当然，初始化样式会对<code>SEO</code>有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化</li>
</ul>
<h3 id="9、css3有哪些新特性"><a href="#9、css3有哪些新特性" class="headerlink" title="9、css3有哪些新特性"></a>9、css3有哪些新特性</h3><ul>
<li>新增各种<code>css</code>选择器 </li>
<li>圆角 <code>border-radius</code></li>
<li>多列布局</li>
<li>阴影和反射</li>
<li>文字特效<code>text-shadow</code></li>
<li>线性渐变</li>
<li>旋转<code>transform</code></li>
</ul>
<p><strong>CSS3新增伪类有那些？</strong></p>
<ul>
<li><code>p:first-of-type</code> 选择属于其父元素的首个<code>&lt;p&gt;</code>元素的每个<code>&lt;p&gt;</code> 元素。</li>
<li><code>p:last-of-type</code>  选择属于其父元素的最后 <code>&lt;p&gt;</code> 元素的每个<code>&lt;p&gt;</code> 元素。</li>
<li><code>p:only-of-type</code>  选择属于其父元素唯一的 <code>&lt;p&gt;</code>元素的每个 <code>&lt;p&gt;</code> 元素。</li>
<li><code>p:only-child</code>       选择属于其父元素的唯一子元素的每个 <code>&lt;p&gt;</code> 元素。</li>
<li><code>p:nth-child(2)</code>  选择属于其父元素的第二个子元素的每个 <code>&lt;p&gt;</code> 元素。</li>
<li><code>:after</code>        在元素之前添加内容,也可以用来做清除浮动。</li>
<li><code>:before</code>       在元素之后添加内容</li>
<li><code>:enabled</code>       </li>
<li><code>:disabled</code>      控制表单控件的禁用状态。</li>
<li><code>:checked</code>       单选框或复选框被选中</li>
</ul>
<h3 id="10、display有哪些值？说明他们的作用"><a href="#10、display有哪些值？说明他们的作用" class="headerlink" title="10、display有哪些值？说明他们的作用"></a>10、display有哪些值？说明他们的作用</h3><ul>
<li><code>block</code>      象块类型元素一样显示。</li>
<li><code>none</code>      缺省值。象行内元素类型一样显示。</li>
<li><code>inline-block</code> 象行内元素一样显示，但其内容象块类型元素一样显示。</li>
<li><code>list-item</code>   象块类型元素一样显示，并添加样式列表标记。</li>
<li><code>table</code>       此元素会作为块级表格来显示</li>
<li><code>inherit</code>      规定应该从父元素继承 <code>display</code> 属性的值</li>
</ul>
<h3 id="11、介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？"><a href="#11、介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？" class="headerlink" title="11、介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？"></a>11、介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</h3><ul>
<li>有两种， <code>IE</code>盒子模型、<code>W3C</code>盒子模型；</li>
<li>盒模型： 内容(content)、填充(<code>padding</code>)、边界(<code>margin</code>)、 边框(<code>border</code>)；</li>
<li>区  别： <code>IE</code>的c<code>ontent</code>部分把 <code>border</code> 和 <code>padding</code>计算了进去;</li>
</ul>
<h3 id="12、CSS优先级算法如何计算？"><a href="#12、CSS优先级算法如何计算？" class="headerlink" title="12、CSS优先级算法如何计算？"></a>12、CSS优先级算法如何计算？</h3><ul>
<li>优先级就近原则，同权重情况下样式定义最近者为准</li>
<li>载入样式以最后载入的定位为准</li>
<li>优先级为: <code>!important &gt;  id &gt; class &gt; tag</code> <code>important</code> 比 内联优先级高</li>
</ul>
<h3 id="13、对BFC规范的理解？"><a href="#13、对BFC规范的理解？" class="headerlink" title="13、对BFC规范的理解？"></a>13、对BFC规范的理解？</h3><ul>
<li>它决定了元素如何对其内容进行定位,以及与其他元素的关系和相互作用</li>
</ul>
<h3 id="14、谈谈浮动和清除浮动"><a href="#14、谈谈浮动和清除浮动" class="headerlink" title="14、谈谈浮动和清除浮动"></a>14、谈谈浮动和清除浮动</h3><ul>
<li>浮动的框可以向左或向右移动，直到他的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框不在文档的普通流中，所以文档的普通流的块框表现得就像浮动框不存在一样。浮动的块框会漂浮在文档普通流的块框上</li>
</ul>
<h3 id="15、position的值，-relative和absolute定位原点是"><a href="#15、position的值，-relative和absolute定位原点是" class="headerlink" title="15、position的值， relative和absolute定位原点是"></a>15、position的值， relative和absolute定位原点是</h3><ul>
<li><code>absolute</code>：生成绝对定位的元素，相对于 <code>static</code> 定位以外的第一个父元素进行定位</li>
<li><code>fixed</code>：生成绝对定位的元素，相对于浏览器窗口进行定位</li>
<li><code>relative</code>：生成相对定位的元素，相对于其正常位置进行定位</li>
<li><code>static</code> 默认值。没有定位，元素出现在正常的流中</li>
<li><code>inherit</code> 规定从父元素继承 <code>position</code> 属性的值</li>
</ul>
<h3 id="16、display-inline-block-什么时候不会显示间隙？-携程"><a href="#16、display-inline-block-什么时候不会显示间隙？-携程" class="headerlink" title="16、display:inline-block 什么时候不会显示间隙？(携程)"></a>16、display:inline-block 什么时候不会显示间隙？(携程)</h3><ul>
<li>移除空格</li>
<li>使用<code>margin</code>负值</li>
<li>使用<code>font-size:0</code></li>
<li><code>letter-spacing</code></li>
<li><code>word-spacing</code></li>
</ul>
<h3 id="17、PNG-GIF-JPG的区别及如何选"><a href="#17、PNG-GIF-JPG的区别及如何选" class="headerlink" title="17、PNG,GIF,JPG的区别及如何选"></a>17、PNG,GIF,JPG的区别及如何选</h3><ul>
<li><p><code>GIF</code></p>
<ul>
<li><code>8</code>位像素，<code>256</code>色</li>
<li>无损压缩</li>
<li>支持简单动画</li>
<li>支持<code>boolean</code>透明</li>
<li>适合简单动画</li>
</ul>
</li>
<li><p><code>JPEG</code></p>
<ul>
<li>颜色限于<code>256</code></li>
<li>有损压缩</li>
<li>可控制压缩质量</li>
<li>不支持透明</li>
<li>适合照片</li>
</ul>
</li>
<li><code>PNG</code><ul>
<li>有<code>PNG8</code>和<code>truecolor PNG</code></li>
<li><code>PNG8</code>类似<code>GIF</code>颜色上限为<code>256</code>，文件小，支持<code>alpha</code>透明度，无动画</li>
<li>适合图标、背景、按钮</li>
</ul>
</li>
</ul>
<h3 id="18、行内元素float-left后是否变为块级元素？"><a href="#18、行内元素float-left后是否变为块级元素？" class="headerlink" title="18、行内元素float:left后是否变为块级元素？"></a>18、行内元素float:left后是否变为块级元素？</h3><ul>
<li>浮动后，行内元素不会成为块状元素，但是可以设置宽高。行内元素要想变成块状元素，占一行，直接设置<code>display:block</code>;。但如果元素设置了浮动后再设置<code>display:block</code>;那就不会占一行。</li>
</ul>
<h3 id="19、在网页中的应该使用奇数还是偶数的字体？为什么呢？"><a href="#19、在网页中的应该使用奇数还是偶数的字体？为什么呢？" class="headerlink" title="19、在网页中的应该使用奇数还是偶数的字体？为什么呢？"></a>19、在网页中的应该使用奇数还是偶数的字体？为什么呢？</h3><ul>
<li>偶数字号相对更容易和 web 设计的其他部分构成比例关系</li>
</ul>
<h3 id="20、-before-和-after中双冒号和单冒号-有什么区别？解释一下这2个伪元素的作用"><a href="#20、-before-和-after中双冒号和单冒号-有什么区别？解释一下这2个伪元素的作用" class="headerlink" title="20、::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用"></a>20、::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用</h3><ul>
<li>单冒号(<code>:</code>)用于CSS3伪类，双冒号(<code>::</code>)用于<code>CSS3</code>伪元素</li>
<li>用于区分伪类和伪元素</li>
</ul>
<h3 id="21、如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）"><a href="#21、如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）" class="headerlink" title="21、如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）"></a>21、如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）</h3><ul>
<li>多数显示器默认频率是<code>60Hz</code>，即<code>1</code>秒刷新<code>60</code>次，所以理论上最小间隔为<code>1/60＊1000ms ＝ 16.7ms</code></li>
</ul>
<h3 id="22、CSS合并方法"><a href="#22、CSS合并方法" class="headerlink" title="22、CSS合并方法"></a>22、CSS合并方法</h3><ul>
<li>避免使用<code>@import</code>引入多个<code>css</code>文件，可以使用<code>CSS</code>工具将<code>CSS</code>合并为一个<code>CSS</code>文件，例如使用<code>Sass\Compass</code>等</li>
</ul>
<h3 id="23、CSS不同选择器的权重-CSS层叠的规则"><a href="#23、CSS不同选择器的权重-CSS层叠的规则" class="headerlink" title="23、CSS不同选择器的权重(CSS层叠的规则)"></a>23、CSS不同选择器的权重(CSS层叠的规则)</h3><ul>
<li><code>！important</code>规则最重要，大于其它规则</li>
<li>行内样式规则，加<code>1000</code></li>
<li>对于选择器中给定的各个<code>ID</code>属性值，加<code>100</code></li>
<li>对于选择器中给定的各个类属性、属性选择器或者伪类选择器，加<code>10</code></li>
<li>对于选择其中给定的各个元素标签选择器，加1</li>
<li>如果权值一样，则按照样式规则的先后顺序来应用，顺序靠后的覆盖靠前的规则</li>
</ul>
<h3 id="24、列出你所知道可以改变页面布局的属性"><a href="#24、列出你所知道可以改变页面布局的属性" class="headerlink" title="24、列出你所知道可以改变页面布局的属性"></a>24、列出你所知道可以改变页面布局的属性</h3><ul>
<li><code>position</code>、<code>display</code>、<code>float</code>、<code>width</code>、<code>heigh</code>t、<code>margin</code>、<code>padding</code>、<code>top</code>、<code>left</code>、<code>right</code>、`</li>
</ul>
<h3 id="25、CSS在性能优化方面的实践"><a href="#25、CSS在性能优化方面的实践" class="headerlink" title="25、CSS在性能优化方面的实践"></a>25、CSS在性能优化方面的实践</h3><ul>
<li><code>css</code>压缩与合并、<code>Gzip</code>压缩</li>
<li><code>css</code>文件放在<code>head</code>里、不要用<code>@import</code></li>
<li>尽量用缩写、避免用滤镜、合理使用选择器</li>
</ul>
<h3 id="26、CSS3动画（简单动画的实现，如旋转等）"><a href="#26、CSS3动画（简单动画的实现，如旋转等）" class="headerlink" title="26、CSS3动画（简单动画的实现，如旋转等）"></a>26、CSS3动画（简单动画的实现，如旋转等）</h3><ul>
<li>依靠<code>CSS3</code>中提出的三个属性：<code>transition</code>、<code>transform</code>、<code>animation</code></li>
<li><code>transition</code>：定义了元素在变化过程中是怎么样的，包含<code>transition-property</code>、<code>transition-duration</code>、<code>transition-timing-function</code>、<code>transition-delay</code>。</li>
<li><code>transform</code>：定义元素的变化结果，包含<code>rotate</code>、<code>scale</code>、<code>skew</code>、<code>translate</code>。</li>
<li><code>animation</code>：动画定义了动作的每一帧（<code>@keyframes</code>）有什么效果，包括<code>animation-name</code>，<code>animation-duration</code>、<code>animation-timing-function</code>、<code>animation-delay</code>、<code>animation-iteration-count</code>、<code>animation-direction</code></li>
</ul>
<h3 id="27、base64的原理及优缺点"><a href="#27、base64的原理及优缺点" class="headerlink" title="27、base64的原理及优缺点"></a>27、base64的原理及优缺点</h3><ul>
<li>优点可以加密，减少了<code>http</code>请求</li>
<li>缺点是需要消耗<code>CPU</code>进行编解码</li>
</ul>
<h2 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="$JavaScript"></a>$JavaScript</h2><h3 id="1、闭包"><a href="#1、闭包" class="headerlink" title="1、闭包"></a>1、闭包</h3><ul>
<li><p>闭包就是能够读取其他函数内部变量的函数</p>
</li>
<li><p>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域</p>
</li>
<li><p>闭包的特性：</p>
<ul>
<li>函数内再嵌套函数</li>
<li>内部函数可以引用外层的参数和变量</li>
<li>参数和变量不会被垃圾回收机制回收</li>
</ul>
</li>
</ul>
<p><strong>说说你对闭包的理解</strong></p>
<ul>
<li><p>使用闭包主要是为了设计私有的方法和变量。闭包的优点是可以避免全局变量的污染，缺点是闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。在js中，函数即闭包，只有函数才会产生作用域的概念</p>
</li>
<li><p>闭包 的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量始终保持在内存中</p>
</li>
<li><p>闭包的另一个用处，是封装对象的私有属性和私有方法</p>
</li>
<li><p><strong>好处</strong>：能够实现封装和缓存等；</p>
</li>
<li><strong>坏处</strong>：就是消耗内存、不正当使用会造成内存溢出的问题</li>
</ul>
<p><strong>使用闭包的注意点</strong></p>
<ul>
<li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露</li>
<li>解决方法是，在退出函数之前，将不使用的局部变量全部删除</li>
</ul>
<h3 id="2、说说你对作用域链的理解"><a href="#2、说说你对作用域链的理解" class="headerlink" title="2、说说你对作用域链的理解"></a>2、说说你对作用域链的理解</h3><ul>
<li>作用域链的作用是保证执行环境里有权访问的变量和函数是有序的，作用域链的变量只能向上访问，变量访问到<code>window</code>对象即被终止，作用域链向下访问变量是不被允许的</li>
<li>简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期</li>
</ul>
<h3 id="3、JavaScript原型，原型链-有什么特点？"><a href="#3、JavaScript原型，原型链-有什么特点？" class="headerlink" title="3、JavaScript原型，原型链 ? 有什么特点？"></a>3、JavaScript原型，原型链 ? 有什么特点？</h3><ul>
<li>每个对象都会在其内部初始化一个属性，就是<code>prototype</code>(原型)，当我们访问一个对象的属性时</li>
<li>如果这个对象内部不存在这个属性，那么他就会去<code>prototype</code>里找这个属性，这<code>个prototype</code>又会有自己的<code>prototype</code>，于是就这样一直找下去，也就是我们平时所说的原型链的概念</li>
<li>关系：<code>instance.constructor.prototype = instance.__proto__</code></li>
<li><p>特点：</p>
<ul>
<li><code>JavaScript</code>对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变</li>
</ul>
</li>
<li><p>当我们需要一个属性的时，<code>Javascript</code>引擎会先看当前对象中是否有这个属性， 如果没有的</p>
</li>
<li>就会查找他的<code>Prototype</code>对象是否有这个属性，如此递推下去，一直检索到 <code>Object</code> 内建对象</li>
</ul>
<h3 id="4、请解释什么是事件代理"><a href="#4、请解释什么是事件代理" class="headerlink" title="4、请解释什么是事件代理"></a>4、请解释什么是事件代理</h3><ul>
<li>事件代理（<code>Event Delegation</code>），又称之为事件委托。是 <code>JavaScript</code> 中常用绑定事件的常用技巧。顾名思义，“事件代理”即是把原本需要绑定的事件委托给父元素，让父元素担当事件监听的职务。事件代理的原理是DOM元素的事件冒泡。使用事件代理的好处是可以提高性能</li>
<li>可以大量节省内存占用，减少事件注册，比如在<code>table</code>上代理所有<code>td</code>的<code>click</code>事件就非常棒 </li>
<li>可以实现当新增子对象时无需再次对其绑定</li>
</ul>
<h3 id="5、Javascript如何实现继承？"><a href="#5、Javascript如何实现继承？" class="headerlink" title="5、Javascript如何实现继承？"></a>5、Javascript如何实现继承？</h3><ul>
<li>构造继承</li>
<li>原型继承</li>
<li>实例继承</li>
<li><p>拷贝继承</p>
</li>
<li><p>原型<code>prototype</code>机制或<code>apply</code>和<code>call</code>方法去实现较简单，建议使用构造函数与原型混合方式</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">this</span>.name = <span class="string">'wang'</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">this</span>.age = <span class="number">28</span>;</div><div class="line">   &#125;</div><div class="line">   Child.prototype = <span class="keyword">new</span> Parent();<span class="comment">//继承了Parent，通过原型</span></div><div class="line"></div><div class="line">   <span class="keyword">var</span> demo = <span class="keyword">new</span> Child();</div><div class="line">   alert(demo.age);</div><div class="line">   alert(demo.name);<span class="comment">//得到被继承的属性</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="6、谈谈This对象的理解"><a href="#6、谈谈This对象的理解" class="headerlink" title="6、谈谈This对象的理解"></a>6、谈谈This对象的理解</h3><ul>
<li><code>this</code>总是指向函数的直接调用者（而非间接调用者）</li>
<li>如果有<code>new</code>关键字，<code>this</code>指向<code>new</code>出来的那个对象</li>
<li>在事件中，<code>this</code>指向触发这个事件的对象，特殊的是，<code>IE</code>中的<code>attachEvent</code>中的<code>this</code>总是指向全局对象<code>Window</code></li>
</ul>
<h3 id="7、事件模型"><a href="#7、事件模型" class="headerlink" title="7、事件模型"></a>7、事件模型</h3><blockquote>
<p><code>W3C</code>中定义事件的发生经历三个阶段：捕获阶段（<code>capturing</code>）、目标阶段（<code>targetin</code>）、冒泡阶段（<code>bubbling</code>）</p>
</blockquote>
<ul>
<li>冒泡型事件：当你使用事件冒泡时，子级元素先触发，父级元素后触发</li>
<li>捕获型事件：当你使用事件捕获时，父级元素先触发，子级元素后触发</li>
<li><code>DOM</code>事件流：同时支持两种事件模型：捕获型事件和冒泡型事件</li>
<li>阻止冒泡：在<code>W3c</code>中，使用<code>stopPropagation（）</code>方法；在IE下设置<code>cancelBubble = true</code></li>
<li>阻止捕获：阻止事件的默认行为，例如<code>click - &lt;a&gt;</code>后的跳转。在<code>W3c</code>中，使用<code>preventDefault（）</code>方法，在<code>IE</code>下设置<code>window.event.returnValue = false</code></li>
</ul>
<h3 id="8、new操作符具体干了什么呢"><a href="#8、new操作符具体干了什么呢" class="headerlink" title="8、new操作符具体干了什么呢?"></a>8、new操作符具体干了什么呢?</h3><ul>
<li>创建一个空对象，并且 <code>this</code> 变量引用该对象，同时还继承了该函数的原型</li>
<li>属性和方法被加入到 <code>this</code> 引用的对象中</li>
<li>新创建的对象由 <code>this</code> 所引用，并且最后隐式的返回 <code>this</code></li>
</ul>
<h3 id="9、Ajax原理"><a href="#9、Ajax原理" class="headerlink" title="9、Ajax原理"></a>9、Ajax原理</h3><ul>
<li><code>Ajax</code>的原理简单来说是在用户和服务器之间加了—个中间层(<code>AJAX</code>引擎)，通过<code>XmlHttpRequest</code>对象来向服务器发异步请求，从服务器获得数据，然后用<code>javascrip</code>t来操作<code>DOM</code>而更新页面。使用户操作与服务器响应异步化。这其中最关键的一步就是从服务器获得请求数据</li>
<li><code>Ajax</code>的过程只涉及<code>JavaScript</code>、<code>XMLHttpRequest</code>和<code>DOM</code>。<code>XMLHttpRequest</code>是<code>aja</code>x的核心机制</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1. 创建连接</span></div><div class="line">   <span class="keyword">var</span> xhr = <span class="literal">null</span>;</div><div class="line">   xhr = <span class="keyword">new</span> XMLHttpRequest()</div><div class="line">   <span class="comment">// 2. 连接服务器</span></div><div class="line">   xhr.open(<span class="string">'get'</span>, url, <span class="literal">true</span>)</div><div class="line">   <span class="comment">// 3. 发送请求</span></div><div class="line">   xhr.send(<span class="literal">null</span>);</div><div class="line">   <span class="comment">// 4. 接受请求</span></div><div class="line">   xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</div><div class="line">           <span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123;</div><div class="line">               success(xhr.responseText);</div><div class="line">           &#125; <span class="keyword">else</span> &#123; <span class="comment">// fail</span></div><div class="line">               fail &amp;&amp; fail(xhr.status);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><strong>ajax 有那些优缺点?</strong></p>
<ul>
<li>优点：<ul>
<li>通过异步模式，提升了用户体验.</li>
<li>优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽占用.</li>
<li><code>Ajax</code>在客户端运行，承担了一部分本来由服务器承担的工作，减少了大用户量下的服务器负载。</li>
<li><code>Ajax</code>可以实现动态不刷新（局部刷新）</li>
</ul>
</li>
<li>缺点：<ul>
<li>安全问题 <code>AJAX</code>暴露了与服务器交互的细节。</li>
<li>对搜索引擎的支持比较弱。</li>
<li>不容易调试。</li>
</ul>
</li>
</ul>
<h3 id="10、如何解决跨域问题"><a href="#10、如何解决跨域问题" class="headerlink" title="10、如何解决跨域问题?"></a>10、如何解决跨域问题?</h3><ul>
<li><code>jsonp</code>、 <code>iframe</code>、<code>window.name</code>、<code>window.postMessage</code>、服务器上设置代理页面</li>
</ul>
<h3 id="11、模块化开发怎么做？"><a href="#11、模块化开发怎么做？" class="headerlink" title="11、模块化开发怎么做？"></a>11、模块化开发怎么做？</h3><ul>
<li>立即执行函数,不暴露私有成员</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> _count = <span class="number">0</span>;</div><div class="line">　　　　<span class="keyword">var</span> m1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　<span class="comment">//...</span></div><div class="line">　　　　&#125;;</div><div class="line">　　　　<span class="keyword">var</span> m2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　<span class="comment">//...</span></div><div class="line">　　　　&#125;;</div><div class="line">　　　　<span class="keyword">return</span> &#123;</div><div class="line">　　　　　　<span class="attr">m1</span> : m1,</div><div class="line">　　　　　　<span class="attr">m2</span> : m2</div><div class="line">　　　　&#125;;</div><div class="line">　　&#125;)();</div></pre></td></tr></table></figure>
<h3 id="12、异步加载JS的方式有哪些？"><a href="#12、异步加载JS的方式有哪些？" class="headerlink" title="12、异步加载JS的方式有哪些？"></a>12、异步加载JS的方式有哪些？</h3><ul>
<li>defer，只支持<code>IE</code></li>
<li><code>async</code>：</li>
<li>创建<code>script</code>，插入到<code>DOM</code>中，加载完毕后<code>callBack</code></li>
</ul>
<h3 id="13、那些操作会造成内存泄漏？"><a href="#13、那些操作会造成内存泄漏？" class="headerlink" title="13、那些操作会造成内存泄漏？"></a>13、那些操作会造成内存泄漏？</h3><ul>
<li>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在</li>
<li><code>setTimeout</code> 的第一个参数使用字符串而非函数的话，会引发内存泄漏</li>
<li>闭包使用不当</li>
</ul>
<h3 id="14、XML和JSON的区别？"><a href="#14、XML和JSON的区别？" class="headerlink" title="14、XML和JSON的区别？"></a>14、XML和JSON的区别？</h3><ul>
<li><p>数据体积方面</p>
<ul>
<li><code>JSON</code>相对<code>于XML</code>来讲，数据的体积小，传递的速度更快些。</li>
</ul>
</li>
<li><p>数据交互方面</p>
<ul>
<li><code>JSON</code>与<code>JavaScript</code>的交互更加方便，更容易解析处理，更好的数据交互</li>
</ul>
</li>
<li><p>数据描述方面</p>
<ul>
<li><code>JSON</code>对数据的描述性比<code>XML</code>较差</li>
</ul>
</li>
<li><p>传输速度方面</p>
<ul>
<li><code>JSON</code>的速度要远远快于<code>XML</code></li>
</ul>
</li>
</ul>
<h3 id="15、谈谈你对webpack的看法"><a href="#15、谈谈你对webpack的看法" class="headerlink" title="15、谈谈你对webpack的看法"></a>15、谈谈你对webpack的看法</h3><ul>
<li><code>WebPack</code> 是一个模块打包工具，你可以使用<code>WebPack</code>管理你的模块依赖，并编绎输出模块们所需的静态文件。它能够很好地管理、打包<code>Web</code>开发中所用到的<code>HTML</code>、<code>Javascript</code>、<code>CSS</code>以及各种静态文件（图片、字体等），让开发过程更加高效。对于不同类型的资源，<code>webpack</code>有对应的模块加载器。<code>webpack</code>模块打包器会分析模块间的依赖关系，最后 生成了优化且合并后的静态资源</li>
</ul>
<h3 id="16、说说你对AMD和Commonjs的理解"><a href="#16、说说你对AMD和Commonjs的理解" class="headerlink" title="16、说说你对AMD和Commonjs的理解"></a>16、说说你对AMD和Commonjs的理解</h3><ul>
<li><code>CommonJS</code>是服务器端模块的规范，<code>Node.js</code>采用了这个规范。<code>CommonJS</code>规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。<code>AMD</code>规范则是非同步加载模块，允许指定回调函数</li>
<li><code>AMD</code>推荐的风格通过返回一个对象做为模块对象，<code>CommonJS</code>的风格通过对<code>module.exports</code>或<code>exports</code>的属性赋值来达到暴露模块对象的目的</li>
</ul>
<h3 id="17、常见web安全及防护原理"><a href="#17、常见web安全及防护原理" class="headerlink" title="17、常见web安全及防护原理"></a>17、常见web安全及防护原理</h3><ul>
<li><p><code>sql</code>注入原理</p>
<ul>
<li>就是通过把<code>SQL</code>命令插入到<code>Web</code>表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令</li>
</ul>
</li>
<li><p>总的来说有以下几点</p>
<ul>
<li>永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双<code>&quot;-&quot;</code>进行转换等</li>
<li>永远不要使用动态拼装SQL，可以使用参数化的<code>SQL</code>或者直接使用存储过程进行数据查询存取</li>
<li>永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接</li>
<li>不要把机密信息明文存放，请加密或者<code>hash</code>掉密码和敏感的信息</li>
</ul>
</li>
</ul>
<p><strong>XSS原理及防范</strong></p>
<ul>
<li><code>Xss(cross-site scripting)</code>攻击指的是攻击者往<code>Web</code>页面里插入恶意<code>html</code>标签或者<code>javascript</code>代码。比如：攻击者在论坛中放一个看似安全的链接，骗取用户点击后，窃取<code>cookie</code>中的用户私密信息；或者攻击者在论坛中加一个恶意表单，当用户提交表单的时候，却把信息传送到攻击者的服务器中，而不是用户原本以为的信任站点</li>
</ul>
<p><strong>XSS防范方法</strong></p>
<ul>
<li>首先代码里对用户输入的地方和变量都需要仔细检查长度和对<code>”&lt;”,”&gt;”,”;”,”’”</code>等字符做过滤；其次任何内容写到页面之前都必须加以encode，避免不小心把<code>html tag</code> 弄出来。这一个层面做好，至少可以堵住超过一半的XSS 攻击</li>
</ul>
<p><strong>XSS与CSRF有什么区别吗？</strong></p>
<ul>
<li><p><code>XSS</code>是获取信息，不需要提前知道其他用户页面的代码和数据包。<code>CSRF</code>是代替用户完成指定的动作，需要知道其他用户页面的代码和数据包。要完成一次<code>CSRF</code>攻击，受害者必须依次完成两个步骤</p>
</li>
<li><p>登录受信任网站<code>A</code>，并在本地生成<code>Cookie</code></p>
</li>
<li>在不登出<code>A</code>的情况下，访问危险网站<code>B</code></li>
</ul>
<p><strong>CSRF的防御</strong></p>
<ul>
<li>服务端的<code>CSRF</code>方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数</li>
<li>通过验证码的方法</li>
</ul>
<h3 id="18、用过哪些设计模式？"><a href="#18、用过哪些设计模式？" class="headerlink" title="18、用过哪些设计模式？"></a>18、用过哪些设计模式？</h3><ul>
<li><p>工厂模式：</p>
<ul>
<li>工厂模式解决了重复实例化的问题，但还有一个问题,那就是识别问题，因为根本无法</li>
<li>主要好处就是可以消除对象间的耦合，通过使用工程方法而不是<code>new</code>关键字</li>
</ul>
</li>
<li><p>构造函数模式</p>
<ul>
<li>使用构造函数的方法，即解决了重复实例化的问题，又解决了对象识别的问题，该模式与工厂模式的不同之处在于</li>
<li>直接将属性和方法赋值给 <code>this</code>对象;</li>
</ul>
</li>
</ul>
<h3 id="19、为什么要有同源限制？"><a href="#19、为什么要有同源限制？" class="headerlink" title="19、为什么要有同源限制？"></a>19、为什么要有同源限制？</h3><ul>
<li>同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议</li>
<li>举例说明：比如一个黑客程序，他利用<code>Iframe</code>把真正的银行登录页面嵌到他的页面上，当你使用真实的用户名，密码登录时，他的页面就可以通过<code>Javascript</code>读取到你的表单中<code>input</code>中的内容，这样用户名，密码就轻松到手了。</li>
</ul>
<h3 id="20、offsetWidth-offsetHeight-clientWidth-clientHeight与scrollWidth-scrollHeight的区别"><a href="#20、offsetWidth-offsetHeight-clientWidth-clientHeight与scrollWidth-scrollHeight的区别" class="headerlink" title="20、offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别"></a>20、offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别</h3><ul>
<li><code>offsetWidth/offsetHeight</code>返回值包含<strong>content + padding + border</strong>，效果与e.getBoundingClientRect()相同</li>
<li><code>clientWidth/clientHeight</code>返回值只包含<strong>content + padding</strong>，如果有滚动条，也<strong>不包含滚动条</strong></li>
<li><code>scrollWidth/scrollHeight</code>返回值包含<strong>content + padding + 溢出内容的尺寸</strong></li>
</ul>
<h3 id="21、javascript有哪些方法定义对象"><a href="#21、javascript有哪些方法定义对象" class="headerlink" title="21、javascript有哪些方法定义对象"></a>21、javascript有哪些方法定义对象</h3><ul>
<li>对象字面量： <code>var obj = {};</code></li>
<li>构造函数： <code>var obj = new Object();</code></li>
<li>Object.create(): <code>var obj = Object.create(Object.prototype);</code></li>
</ul>
<h3 id="22、常见兼容性问题？"><a href="#22、常见兼容性问题？" class="headerlink" title="22、常见兼容性问题？"></a>22、常见兼容性问题？</h3><ul>
<li><code>png24</code>位的图片在iE6浏览器上出现背景，解决方案是做成<code>PNG8</code></li>
<li>浏览器默认的<code>margin</code>和<code>padding</code>不同。解决方案是加一个全局的<code>*{margin:0;padding:0;}</code>来统一,，但是全局效率很低，一般是如下这样解决：</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">form</span>,<span class="selector-tag">input</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">p</span>&#123;</div><div class="line"><span class="attribute">margin</span>:<span class="number">0</span>;</div><div class="line"><span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>IE</code>下,<code>event</code>对象有<code>x</code>,<code>y</code>属性,但是没有<code>pageX</code>,<code>pageY</code>属性</li>
<li><code>Firefox</code>下,<code>event</code>对象有<code>pageX</code>,<code>pageY</code>属性,但是没有<code>x,y</code>属性.</li>
</ul>
<h3 id="22、说说你对promise的了解"><a href="#22、说说你对promise的了解" class="headerlink" title="22、说说你对promise的了解"></a>22、说说你对promise的了解</h3><ul>
<li><p>依照 <code>Promise/A+</code> 的定义，<code>Promise</code> 有四种状态：</p>
<ul>
<li><p><code>pending:</code> 初始状态, 非 <code>fulfilled</code> 或 <code>rejected.</code></p>
</li>
<li><p><code>fulfilled:</code> 成功的操作.</p>
</li>
<li><p><code>rejected:</code> 失败的操作.</p>
</li>
<li><p><code>settled: Promise</code>已被<code>fulfilled</code>或<code>rejected</code>，且不是<code>pending</code></p>
</li>
</ul>
</li>
<li><p>另外， <code>fulfilled</code>与 <code>rejected</code>一起合称 <code>settled</code></p>
</li>
<li><code>Promise</code> 对象用来进行延迟(<code>deferred</code>) 和异步(<code>asynchronous</code>) 计算</li>
</ul>
<p><strong>Promise 的构造函数</strong></p>
<ul>
<li>构造一个 <code>Promise</code>，最基本的用法如下：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (...) &#123;  <span class="comment">// succeed</span></div><div class="line"></div><div class="line">            resolve(result);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123;   <span class="comment">// fails</span></div><div class="line"></div><div class="line">            reject(<span class="built_in">Error</span>(errMessage));</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<ul>
<li><p><code>Promise</code> 实例拥有 <code>then</code> 方法（具有 <code>then</code> 方法的对象，通常被称为<code>thenable</code>）。它的使用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">promise.then(onFulfilled, onRejected)</div></pre></td></tr></table></figure>
</li>
<li><p>接收两个函数作为参数，一个在 <code>fulfilled</code> 的时候被调用，一个在<code>rejected</code>的时候被调用，接收参数就是 <code>future</code>，<code>onFulfilled</code> 对应<code>resolve</code>, <code>onRejected</code>对应 <code>reject</code></p>
</li>
</ul>
<h3 id="23、你觉得jQuery源码有哪些写的好的地方"><a href="#23、你觉得jQuery源码有哪些写的好的地方" class="headerlink" title="23、你觉得jQuery源码有哪些写的好的地方"></a>23、你觉得jQuery源码有哪些写的好的地方</h3><ul>
<li><code>jquery</code>源码封装在一个匿名函数的自执行环境中，有助于防止变量的全局污染，然后通过传入<code>window</code>对象参数，可以使<code>window</code>对象作为局部变量使用，好处是当<code>jquery</code>中访问<code>window</code>对象的时候，就不用将作用域链退回到顶层作用域了，从而可以更快的访问window对象。同样，传入<code>undefined</code>参数，可以缩短查找<code>undefined</code>时的作用域链</li>
<li><code>jquery</code>将一些原型属性和方法封装在了<code>jquery.prototype</code>中，为了缩短名称，又赋值给了<code>jquery.fn</code>，这是很形象的写法</li>
<li>有一些数组或对象的方法经常能使用到，<code>jQuery</code>将其保存为局部变量以提高访问速度</li>
<li><code>jquery</code>实现的链式调用可以节约代码，所返回的都是同一个对象，可以提高代码效率</li>
</ul>
<h3 id="24、vue、react、angular"><a href="#24、vue、react、angular" class="headerlink" title="24、vue、react、angular"></a>24、vue、react、angular</h3><ul>
<li><p><code>Vue.js</code><br>一个用于创建 <code>web</code> 交互界面的库，是一个精简的 <code>MVVM</code>。它通过双向数据绑定把 <code>View</code> 层和 <code>Model</code> 层连接了起来。实际的 <code>DOM</code> 封装和输出格式都被抽象为了<code>Directives</code> 和 <code>Filters</code></p>
</li>
<li><p><code>AngularJS</code><br>是一个比较完善的前端<code>MVVM</code>框架，包含模板，数据双向绑定，路由，模块化，服务，依赖注入等所有功能，模板功能强大丰富，自带了丰富的 <code>Angular</code>指令</p>
</li>
<li><p><code>react</code><br><code>React</code> 仅仅是 <code>VIEW</code> 层是<code>facebook</code>公司。推出的一个用于构建<code>UI</code>的一个库，能够实现服务器端的渲染。用了<code>virtual dom</code>，所以性能很好。</p>
</li>
</ul>
<h3 id="25、Node的应用场景"><a href="#25、Node的应用场景" class="headerlink" title="25、Node的应用场景"></a>25、Node的应用场景</h3><ul>
<li><p>特点：</p>
<ul>
<li>1、它是一个<code>Javascript</code>运行环境</li>
<li>2、依赖于<code>Chrome V8</code>引擎进行代码解释</li>
<li>3、事件驱动</li>
<li>4、非阻塞<code>I/O</code></li>
<li>5、单进程，单线程</li>
</ul>
</li>
<li><p>优点：</p>
<ul>
<li>高并发（最重要的优点）</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>1、只支持单<code>核CPU</code>，不能充分利用<code>CPU</code></li>
<li>2、可靠性低，一旦代码某个环节崩溃，整个系统都崩溃</li>
</ul>
</li>
</ul>
<h3 id="26、谈谈你对AMD、CMD的理解"><a href="#26、谈谈你对AMD、CMD的理解" class="headerlink" title="26、谈谈你对AMD、CMD的理解"></a>26、谈谈你对AMD、CMD的理解</h3><ul>
<li><p><code>CommonJS</code>是服务器端模块的规范，<code>Node.js</code>采用了这个规范。<code>CommonJS</code>规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。<code>AMD</code>规范则是非同步加载模块，允许指定回调函数</p>
</li>
<li><p><code>AMD</code>推荐的风格通过返回一个对象做为模块对象，<code>CommonJS</code>的风格通过对<code>module.exports</code>或<code>exports</code>的属性赋值来达到暴露模块对象的目的</p>
</li>
</ul>
<h3 id="27、那些操作会造成内存泄漏？"><a href="#27、那些操作会造成内存泄漏？" class="headerlink" title="27、那些操作会造成内存泄漏？"></a>27、那些操作会造成内存泄漏？</h3><ul>
<li>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在</li>
<li><code>setTimeout</code> 的第一个参数使用字符串而非函数的话，会引发内存泄漏</li>
<li>闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）</li>
</ul>
<h3 id="28、web开发中会话跟踪的方法有哪些"><a href="#28、web开发中会话跟踪的方法有哪些" class="headerlink" title="28、web开发中会话跟踪的方法有哪些"></a>28、web开发中会话跟踪的方法有哪些</h3><ul>
<li><code>cookie</code></li>
<li><code>session</code></li>
<li><code>url</code>重写</li>
<li>隐藏<code>input</code></li>
<li><code>ip</code>地址</li>
</ul>
<h3 id="29、介绍js的基本数据类型"><a href="#29、介绍js的基本数据类型" class="headerlink" title="29、介绍js的基本数据类型"></a>29、介绍js的基本数据类型</h3><ul>
<li><code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code></li>
</ul>
<h3 id="30、介绍js有哪些内置对象？"><a href="#30、介绍js有哪些内置对象？" class="headerlink" title="30、介绍js有哪些内置对象？"></a>30、介绍js有哪些内置对象？</h3><ul>
<li><code>Object</code> 是 <code>JavaScript</code> 中所有对象的父对象</li>
<li>数据封装类对象：<code>Object</code>、<code>Array</code>、<code>Boolean</code>、<code>Number</code> 和 <code>String</code></li>
<li>其他对象：<code>Function</code>、<code>Arguments</code>、<code>Math</code>、<code>Date</code>、<code>RegExp</code>、<code>Error</code></li>
</ul>
<h3 id="31、说几条写JavaScript的基本规范？"><a href="#31、说几条写JavaScript的基本规范？" class="headerlink" title="31、说几条写JavaScript的基本规范？"></a>31、说几条写JavaScript的基本规范？</h3><ul>
<li>不要在同一行声明多个变量</li>
<li>请使用<code>===/!==</code>来比较<code>true/false</code>或者数值</li>
<li>使用对象字面量替代<code>new Array</code>这种形式</li>
<li>不要使用全局函数</li>
<li><code>Switch</code>语句必须带有<code>default</code>分支</li>
<li><code>If</code>语句必须使用大括号</li>
<li><code>for-in</code>循环中的变量 应该使用<code>var</code>关键字明确限定作用域，从而避免作用域污</li>
</ul>
<h3 id="32、JavaScript有几种类型的值？，你能画一下他们的内存图吗？"><a href="#32、JavaScript有几种类型的值？，你能画一下他们的内存图吗？" class="headerlink" title="32、JavaScript有几种类型的值？，你能画一下他们的内存图吗？"></a>32、JavaScript有几种类型的值？，你能画一下他们的内存图吗？</h3><ul>
<li>栈：原始数据类型（<code>Undefined</code>，<code>Null</code>，<code>Boolean</code>，<code>Numbe</code>r、<code>String</code>）</li>
<li>堆：引用数据类型（对象、数组和函数）</li>
<li>两种类型的区别是：存储位置不同；</li>
<li>原始数据类型直接存储在栈(<code>stack</code>)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；</li>
<li>引用数据类型存储在堆(<code>heap</code>)中的对象,占据空间大、大小不固定,如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其</li>
<li>在栈中的地址，取得地址后从堆中获得实体</li>
</ul>
<p><img src="https://camo.githubusercontent.com/d1947e624a0444d1032a85800013df487adc5550/687474703a2f2f7777772e77337363686f6f6c2e636f6d2e636e2f692f63745f6a735f76616c75652e676966" alt=""></p>
<h3 id="33、javascript创建对象的几种方式？"><a href="#33、javascript创建对象的几种方式？" class="headerlink" title="33、javascript创建对象的几种方式？"></a>33、javascript创建对象的几种方式？</h3><blockquote>
<p><code>javascript</code>创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用<code>JSON</code>；但写法有很多种，也能混合使用</p>
</blockquote>
<ul>
<li>对象字面量的方式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">person=&#123;<span class="attr">firstname</span>:<span class="string">"Mark"</span>,<span class="attr">lastname</span>:<span class="string">"Yun"</span>,<span class="attr">age</span>:<span class="number">25</span>,<span class="attr">eyecolor</span>:<span class="string">"black"</span>&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>用<code>function</code>来模拟无参的构造函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</div><div class="line">    <span class="keyword">var</span> person=<span class="keyword">new</span> Person();<span class="comment">//定义一个function，如果使用new"实例化",该function可以看作是一个Class</span></div><div class="line">        person.name=<span class="string">"Mark"</span>;</div><div class="line">        person.age=<span class="string">"25"</span>;</div><div class="line">        person.work=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(person.name+<span class="string">" hello..."</span>);</div><div class="line">    &#125;</div><div class="line">person.work();</div></pre></td></tr></table></figure>
<ul>
<li>用<code>function</code>来模拟参构造函数来实现（用<code>this</code>关键字定义构造的上下文属性）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pet</span>(<span class="params">name,age,hobby</span>)</span>&#123;</div><div class="line">       <span class="keyword">this</span>.name=name;<span class="comment">//this作用域：当前对象</span></div><div class="line">       <span class="keyword">this</span>.age=age;</div><div class="line">       <span class="keyword">this</span>.hobby=hobby;</div><div class="line">       <span class="keyword">this</span>.eat=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          alert(<span class="string">"我叫"</span>+<span class="keyword">this</span>.name+<span class="string">",我喜欢"</span>+<span class="keyword">this</span>.hobby+<span class="string">",是个程序员"</span>);</div><div class="line">       &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> maidou =<span class="keyword">new</span> Pet(<span class="string">"麦兜"</span>,<span class="number">25</span>,<span class="string">"coding"</span>);<span class="comment">//实例化、创建对象</span></div><div class="line">    maidou.eat();<span class="comment">//调用eat方法</span></div></pre></td></tr></table></figure>
<ul>
<li>用工厂方式来创建（内置对象）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var wcDog =new Object();</div><div class="line">     wcDog.name=&quot;旺财&quot;;</div><div class="line">     wcDog.age=3;</div><div class="line">     wcDog.work=function()&#123;</div><div class="line">       alert(&quot;我是&quot;+wcDog.name+&quot;,汪汪汪......&quot;);</div><div class="line">     &#125;</div><div class="line">     wcDog.work();</div></pre></td></tr></table></figure>
<ul>
<li>用原型方式来创建</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function Dog()&#123;</div><div class="line"></div><div class="line">     &#125;</div><div class="line">     Dog.prototype.name=&quot;旺财&quot;;</div><div class="line">     Dog.prototype.eat=function()&#123;</div><div class="line">     alert(this.name+&quot;是个吃货&quot;);</div><div class="line">     &#125;</div><div class="line">     var wangcai =new Dog();</div><div class="line">     wangcai.eat();</div></pre></td></tr></table></figure>
<ul>
<li>用混合方式来创建</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function Car(name,price)&#123;</div><div class="line">     this.name=name;</div><div class="line">     this.price=price; </div><div class="line">   &#125;</div><div class="line">    Car.prototype.sell=function()&#123;</div><div class="line">      alert(&quot;我是&quot;+this.name+&quot;，我现在卖&quot;+this.price+&quot;万元&quot;);</div><div class="line">     &#125;</div><div class="line">   var camry =new Car(&quot;凯美瑞&quot;,27);</div><div class="line">   camry.sell();</div></pre></td></tr></table></figure>
<h3 id="34、eval是做什么的？"><a href="#34、eval是做什么的？" class="headerlink" title="34、eval是做什么的？"></a>34、eval是做什么的？</h3><ul>
<li>它的功能是把对应的字符串解析成<code>JS</code>代码并运行</li>
<li>应该避免使用<code>eval</code>，不安全，非常耗性能（<code>2</code>次，一次解析成<code>js</code>语句，一次执行）</li>
<li>由<code>JSON</code>字符串转换为JSON对象的时候可以用<code>eval，var obj =eval(&#39;(&#39;+ str +&#39;)&#39;)</code></li>
</ul>
<h3 id="35、null，undefined-的区别？"><a href="#35、null，undefined-的区别？" class="headerlink" title="35、null，undefined 的区别？"></a>35、null，undefined 的区别？</h3><ul>
<li><code>undefined</code>   表示不存在这个值。</li>
<li><code>undefined</code> :是一个表示”无”的原始值或者说表示”缺少值”，就是此处应该有一个值，但是还没有定义。当尝试读取时会返回 <code>undefined</code></li>
<li><p>例如变量被声明了，但没有赋值时，就等于<code>undefined</code></p>
</li>
<li><p><code>null</code> 表示一个对象被定义了，值为“空值”</p>
</li>
<li><code>null</code> : 是一个对象(空对象, 没有任何属性和方法)</li>
<li><p>例如作为函数的参数，表示该函数的参数不是对象；</p>
</li>
<li><p>在验证<code>null</code>时，一定要使用　<code>===</code> ，因为 <code>==</code>无法分别<code>null</code> 和　<code>undefined</code></p>
</li>
</ul>
<h3 id="36、-“1”-“2”-“3”-map-parseInt-答案是多少？"><a href="#36、-“1”-“2”-“3”-map-parseInt-答案是多少？" class="headerlink" title="36、[“1”, “2”, “3”].map(parseInt) 答案是多少？"></a>36、[“1”, “2”, “3”].map(parseInt) 答案是多少？</h3><ul>
<li><code>[1, NaN, NaN]</code>因为 <code>parseInt</code> 需要两个参数 <code>(val, radix)</code>，其中<code>radix</code> 表示解析时用的基数。</li>
<li><code>map</code>传了 <code>3</code>个<code>(element, index, array)</code>，对应的 <code>radix</code> 不合法导致解析失败。</li>
</ul>
<h3 id="37、javascript-代码中的”use-strict”-是什么意思-使用它区别是什么？"><a href="#37、javascript-代码中的”use-strict”-是什么意思-使用它区别是什么？" class="headerlink" title="37、javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？"></a>37、javascript 代码中的”use strict”;是什么意思 ? 使用它区别是什么？</h3><ul>
<li><code>use strict</code>是一种<code>ECMAscript 5</code> 添加的（严格）运行模式,这种模式使得 Javascript 在更严格的条件下运行,使<code>JS</code>编码更加规范化的模式,消除<code>Javascript</code>语法的一些不合理、不严谨之处，减少一些怪异行为</li>
</ul>
<h3 id="38、JSON-的了解？"><a href="#38、JSON-的了解？" class="headerlink" title="38、JSON 的了解？**"></a>38、JSON 的了解？**</h3><ul>
<li><code>JSON(JavaScript Object Notation)</code> 是一种轻量级的数据交换格式</li>
<li><p>它是基于<code>JavaScript</code>的一个子集。数据格式简单, 易于读写, 占用带宽小</p>
</li>
<li><p><code>JSON</code>字符串转换为JSON对象:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var obj =eval(&apos;(&apos;+ str +&apos;)&apos;);</div><div class="line">var obj = str.parseJSON();</div><div class="line">var obj = JSON.parse(str);</div></pre></td></tr></table></figure>
<ul>
<li><code>JSON</code>对象转换为JSON字符串：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var last=obj.toJSONString();</div><div class="line">var last=JSON.stringify(obj);</div></pre></td></tr></table></figure>
<h3 id="39、js延迟加载的方式有哪些？"><a href="#39、js延迟加载的方式有哪些？" class="headerlink" title="39、js延迟加载的方式有哪些？"></a>39、js延迟加载的方式有哪些？</h3><ul>
<li><code>defer</code>和<code>async</code>、动态创建<code>DOM</code>方式（用得最多）、按需异步载入<code>js</code></li>
</ul>
<h3 id="40、同步和异步的区别"><a href="#40、同步和异步的区别" class="headerlink" title="40、同步和异步的区别?"></a>40、同步和异步的区别?</h3><ul>
<li>同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作</li>
<li>异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容</li>
</ul>
<h3 id="41、渐进增强和优雅降级"><a href="#41、渐进增强和优雅降级" class="headerlink" title="41、渐进增强和优雅降级"></a>41、渐进增强和优雅降级</h3><ul>
<li><p>渐进增强 ：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p>
</li>
<li><p>优雅降级 ：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容</p>
</li>
</ul>
<h3 id="42、defer和async"><a href="#42、defer和async" class="headerlink" title="42、defer和async"></a>42、defer和async</h3><ul>
<li><code>defer</code>并行加载<code>js</code>文件，会按照页面上<code>script</code>标签的顺序执行</li>
<li><code>async</code>并行加载<code>js</code>文件，下载完成立即执行，不会按照页面上<code>script</code>标签的顺序执行</li>
</ul>
<h3 id="43、说说严格模式的限制"><a href="#43、说说严格模式的限制" class="headerlink" title="43、说说严格模式的限制"></a>43、说说严格模式的限制</h3><ul>
<li>变量必须声明后再使用</li>
<li>函数的参数不能有同名属性，否则报错</li>
<li>不能使用<code>with</code>语句</li>
<li>禁止<code>this</code>指向全局对象</li>
</ul>
<h3 id="44、attribute和property的区别是什么？"><a href="#44、attribute和property的区别是什么？" class="headerlink" title="44、attribute和property的区别是什么？"></a>44、attribute和property的区别是什么？</h3><ul>
<li><code>attribute</code>是<code>dom</code>元素在文档中作为<code>html</code>标签拥有的属性；</li>
<li><code>property</code>就是<code>dom</code>元素在<code>js</code>中作为对象拥有的属性。</li>
<li>对于<code>html</code>的标准属性来说，<code>attribute</code>和<code>property</code>是同步的，是会自动更新的</li>
<li>但是对于自定义的属性来说，他们是不同步的</li>
</ul>
<h3 id="45、谈谈你对ES6的理解"><a href="#45、谈谈你对ES6的理解" class="headerlink" title="45、谈谈你对ES6的理解"></a>45、谈谈你对ES6的理解</h3><ul>
<li>新增模板字符串（为<code>JavaScript</code>提供了简单的字符串插值功能）</li>
<li>箭头函数</li>
<li><code>for-of</code>（用来遍历数据—例如数组中的值。）</li>
<li><code>arguments</code>对象可被不定参数和默认参数完美代替。</li>
<li><code>ES6</code>将p<code>romise</code>对象纳入规范，提供了原生的<code>Promise</code>对象。</li>
<li>增加了<code>let</code>和<code>const</code>命令，用来声明变量。</li>
<li>增加了块级作用域。</li>
<li><code>let</code>命令实际上就增加了块级作用域。</li>
<li>还有就是引入<code>module</code>模块的概念</li>
</ul>
<h3 id="46、ECMAScript6-怎么写class么，为什么会出现class这种东西"><a href="#46、ECMAScript6-怎么写class么，为什么会出现class这种东西" class="headerlink" title="46、ECMAScript6 怎么写class么，为什么会出现class这种东西?"></a>46、ECMAScript6 怎么写class么，为什么会出现class这种东西?</h3><ul>
<li>这个语法糖可以让有<code>OOP</code>基础的人更快上手<code>js</code>，至少是一个官方的实现了</li>
<li>但对熟悉<code>js</code>的人来说，这个东西没啥大影响；一个<code>Object.creat()</code>搞定继承，比<code>class</code>简洁清晰的多</li>
</ul>
<h3 id="47、什么是面向对象编程及面向过程编程，它们的异同和优缺点"><a href="#47、什么是面向对象编程及面向过程编程，它们的异同和优缺点" class="headerlink" title="47、什么是面向对象编程及面向过程编程，它们的异同和优缺点"></a>47、什么是面向对象编程及面向过程编程，它们的异同和优缺点</h3><ul>
<li>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了</li>
<li>面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为</li>
<li>面向对象是以功能来划分问题，而不是步骤</li>
</ul>
<h3 id="48、面向对象编程思想"><a href="#48、面向对象编程思想" class="headerlink" title="48、面向对象编程思想"></a>48、面向对象编程思想</h3><ul>
<li>基本思想是使用对象，类，继承，封装等基本概念来进行程序设计</li>
<li>优点<ul>
<li>易维护<ul>
<li>采用面向对象思想设计的结构，可读性高，由于继承的存在，即使改变需求，那么维护也只是在局部模块，所以维护起来是非常方便和较低成本的</li>
</ul>
</li>
<li>易扩展</li>
<li>开发工作的重用性、继承性高，降低重复工作量。</li>
<li>缩短了开发周期</li>
</ul>
</li>
</ul>
<h3 id="49、对web标准、可用性、可访问性的理解"><a href="#49、对web标准、可用性、可访问性的理解" class="headerlink" title="49、对web标准、可用性、可访问性的理解"></a>49、对web标准、可用性、可访问性的理解</h3><ul>
<li>可用性（Usability）：产品是否容易上手，用户能否完成任务，效率如何，以及这过程中用户的主观感受可好，是从用户的角度来看产品的质量。可用性好意味着产品质量高，是企业的核心竞争力</li>
<li>可访问性（Accessibility）：Web内容对于残障用户的可阅读和可理解性</li>
<li>可维护性（Maintainability）：一般包含两个层次，一是当系统出现问题时，快速定位并解决问题的成本，成本低则可维护性好。二是代码是否容易被人理解，是否容易修改和增强功能。</li>
</ul>
<h2 id="编程题-1"><a href="#编程题-1" class="headerlink" title="$编程题"></a>$编程题</h2><h3 id="1、写一个通用的事件侦听器函数"><a href="#1、写一个通用的事件侦听器函数" class="headerlink" title="1、写一个通用的事件侦听器函数"></a>1、写一个通用的事件侦听器函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// event(事件)工具集，来源：github.com/markyun</span></div><div class="line">   markyun.Event = &#123;</div><div class="line">      </div><div class="line">       <span class="comment">// 视能力分别使用dom0||dom2||IE方式 来绑定事件</span></div><div class="line">       <span class="comment">// 参数： 操作的元素,事件名称 ,事件处理程序</span></div><div class="line">       addEvent : <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</div><div class="line">           <span class="keyword">if</span> (element.addEventListener) &#123;</div><div class="line">               <span class="comment">//事件类型、需要执行的函数、是否捕捉</span></div><div class="line">               element.addEventListener(type, handler, <span class="literal">false</span>);</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</div><div class="line">               element.attachEvent(<span class="string">'on'</span> + type, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                   handler.call(element);</div><div class="line">               &#125;);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               element[<span class="string">'on'</span> + type] = handler;</div><div class="line">           &#125;</div><div class="line">       &#125;,</div><div class="line">       <span class="comment">// 移除事件</span></div><div class="line">       removeEvent : <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</div><div class="line">           <span class="keyword">if</span> (element.removeEventListener) &#123;</div><div class="line">               element.removeEventListener(type, handler, <span class="literal">false</span>);</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.datachEvent) &#123;</div><div class="line">               element.detachEvent(<span class="string">'on'</span> + type, handler);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               element[<span class="string">'on'</span> + type] = <span class="literal">null</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;,</div><div class="line">       <span class="comment">// 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)</span></div><div class="line">       stopPropagation : <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</div><div class="line">           <span class="keyword">if</span> (ev.stopPropagation) &#123;</div><div class="line">               ev.stopPropagation();</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               ev.cancelBubble = <span class="literal">true</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;,</div><div class="line">       <span class="comment">// 取消事件的默认行为</span></div><div class="line">       preventDefault : <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">           <span class="keyword">if</span> (event.preventDefault) &#123;</div><div class="line">               event.preventDefault();</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               event.returnValue = <span class="literal">false</span>;</div><div class="line">           &#125;</div><div class="line">       &#125;,</div><div class="line">       <span class="comment">// 获取事件目标</span></div><div class="line">       getTarget : <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> event.target || event.srcElement;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<h3 id="2、如何判断一个对象是否为数组"><a href="#2、如何判断一个对象是否为数组" class="headerlink" title="2、如何判断一个对象是否为数组"></a>2、如何判断一个对象是否为数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arg</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arg === <span class="string">'object'</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arg) === <span class="string">'[object Array]'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3、冒泡排序"><a href="#3、冒泡排序" class="headerlink" title="3、冒泡排序"></a>3、冒泡排序</h3><ul>
<li>每次比较相邻的两个数，如果后一个比前一个小，换位置</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>; j++) &#123;</div><div class="line">        <span class="keyword">if</span>(arr[j + <span class="number">1</span>] &lt; arr[j]) &#123;</div><div class="line">            <span class="keyword">var</span> temp;</div><div class="line">            temp = arr[j];</div><div class="line">            arr[j] = arr[j + <span class="number">1</span>];</div><div class="line">            arr[j + <span class="number">1</span>] = temp;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> arr;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(bubbleSort(arr));</div></pre></td></tr></table></figure>
<h3 id="4、快速排序"><a href="#4、快速排序" class="headerlink" title="4、快速排序"></a>4、快速排序</h3><ul>
<li>采用二分法，取出中间数，数组每次和中间数比较，小的放到左边，大的放到右边</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(arr.length == <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">return</span> [];    <span class="comment">// 返回空数组</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> cIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</div><div class="line">    <span class="keyword">var</span> c = arr.splice(cIndex, <span class="number">1</span>);</div><div class="line">    <span class="keyword">var</span> l = [];</div><div class="line">    <span class="keyword">var</span> r = [];</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span>(arr[i] &lt; c) &#123;</div><div class="line">            l.push(arr[i]);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            r.push(arr[i]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> quickSort(l).concat(c, quickSort(r));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(quickSort(arr));</div></pre></td></tr></table></figure>
<h3 id="5、编写一个方法-求一个字符串的字节长度"><a href="#5、编写一个方法-求一个字符串的字节长度" class="headerlink" title="5、编写一个方法 求一个字符串的字节长度"></a>5、编写一个方法 求一个字符串的字节长度</h3><ul>
<li>假设：一个英文字符占用一个字节，一个中文字符占用两个字节    </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetBytes</span>(<span class="params">str</span>)</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> len = str.length;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> bytes = len;</div><div class="line"></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (str.charCodeAt(i) &gt; <span class="number">255</span>) bytes++;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> bytes;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">alert(GetBytes(<span class="string">"你好,as"</span>));</div></pre></td></tr></table></figure>
<h3 id="6、bind的用法，以及如何实现bind的函数和需要注意的点"><a href="#6、bind的用法，以及如何实现bind的函数和需要注意的点" class="headerlink" title="6、bind的用法，以及如何实现bind的函数和需要注意的点"></a>6、bind的用法，以及如何实现bind的函数和需要注意的点</h3><ul>
<li><code>bind</code>的作用与<code>call</code>和<code>apply</code>相同，区别是<code>call</code>和<code>apply</code>是立即调用函数，而<code>bind</code>是返回了一个函数，需要调用的时候再执行。<br>一个简单的<code>bind</code>函数实现如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> fn = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        fn.apply(ctx, <span class="built_in">arguments</span>);</div><div class="line">    &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="其他-1"><a href="#其他-1" class="headerlink" title="$其他"></a>$其他</h2><h3 id="1、谈谈你对重构的理解"><a href="#1、谈谈你对重构的理解" class="headerlink" title="1、谈谈你对重构的理解"></a>1、谈谈你对重构的理解</h3><ul>
<li>网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。也就是说是在不改变UI的情况下，对网站进行优化， 在扩展的同时保持一致的UI</li>
<li><p>对于传统的网站来说重构通常是：</p>
<ul>
<li><p>表格(<code>table</code>)布局改为<code>DIV+CSS</code></p>
</li>
<li><p>使网站前端兼容于现代浏览器(针对于不合规范的<code>CSS</code>、如对IE6有效的)</p>
</li>
<li><p>对于移动平台的优化</p>
</li>
<li><p>针对于<code>SEO</code>进行优化</p>
</li>
</ul>
</li>
</ul>
<h3 id="2、什么样的前端代码是好的"><a href="#2、什么样的前端代码是好的" class="headerlink" title="2、什么样的前端代码是好的"></a>2、什么样的前端代码是好的</h3><ul>
<li>高复用低耦合，这样文件小，好维护，而且好扩展。</li>
</ul>
<h3 id="3、对前端工程师这个职位是怎么样理解的？它的前景会怎么样？"><a href="#3、对前端工程师这个职位是怎么样理解的？它的前景会怎么样？" class="headerlink" title="3、对前端工程师这个职位是怎么样理解的？它的前景会怎么样？"></a>3、对前端工程师这个职位是怎么样理解的？它的前景会怎么样？</h3><ul>
<li><p>前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近</p>
<ul>
<li>实现界面交互</li>
<li>提升用户体验</li>
<li>有了Node.js，前端可以实现服务端的一些事情</li>
</ul>
</li>
<li><p>前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，</p>
</li>
</ul>
<ul>
<li><p>与团队成员，<code>UI</code>设计，产品经理的沟通；</p>
</li>
<li><p>做好的页面结构，页面重构和用户体验；</p>
</li>
</ul>
<h3 id="4、你觉得前端工程的价值体现在哪"><a href="#4、你觉得前端工程的价值体现在哪" class="headerlink" title="4、你觉得前端工程的价值体现在哪"></a>4、你觉得前端工程的价值体现在哪</h3><ul>
<li><p>为简化用户使用提供技术支持（交互部分）</p>
</li>
<li><p>为多个浏览器兼容性提供支持</p>
</li>
<li><p>为提高用户浏览速度（浏览器性能）提供支持</p>
</li>
<li><p>为跨平台或者其他基于webkit或其他渲染引擎的应用提供支持</p>
</li>
<li><p>为展示数据提供支持（数据接口）</p>
</li>
</ul>
<h3 id="5、平时如何管理你的项目？"><a href="#5、平时如何管理你的项目？" class="headerlink" title="5、平时如何管理你的项目？"></a>5、平时如何管理你的项目？</h3><ul>
<li><p>先期团队必须确定好全局样式（<code>globe.css</code>），编码模式(<code>utf-8</code>) 等；</p>
</li>
<li><p>编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；</p>
</li>
<li><p>标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；</p>
</li>
<li><p>页面进行标注（例如 页面 模块 开始和结束）；</p>
</li>
<li><p><code>CSS</code>跟<code>HTML</code> 分文件夹并行存放，命名都得统一（例如<code>style.css</code>）；</p>
</li>
<li><p><code>JS</code> 分文件夹存放 命名以该<code>JS</code>功能为准的英文翻译。</p>
</li>
<li><p>图片采用整合的 <code>images.png png8</code> 格式文件使用 - 尽量整合在一起使用方便将来的管理</p>
</li>
</ul>
<h2 id="人事面-1"><a href="#人事面-1" class="headerlink" title="人事面"></a>人事面</h2><ul>
<li>面试完你还有什么问题要问的吗</li>
<li>你有什么爱好?</li>
<li>你最大的优点和缺点是什么?</li>
<li>你为什么会选择这个行业，职位?</li>
<li>你觉得你适合从事这个岗位吗?</li>
<li>你有什么职业规划?</li>
<li>你对工资有什么要求?</li>
<li>如何看待前端开发？</li>
<li>未来三到五年的规划是怎样的？</li>
</ul>
<h2 id="常问-1"><a href="#常问-1" class="headerlink" title="常问"></a>常问</h2><ul>
<li>自我介绍</li>
<li>你的项目中技术难点是什么？遇到了什么问题？你是怎么解决的？</li>
<li>你认为哪个项目做得最好？</li>
<li>最近在看哪些前端方面的书？</li>
<li>平时是如何学习前端开发的？</li>
<li>你最有成就感的一件事</li>
<li>你是怎么学习前端的</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;h3 id=&quot;HTML，-HTTP，web综合问题&quot;&gt;&lt;a href=&quot;#HTML，-HTTP，web综合问题&quot; class=&quot;headerli
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="面试" scheme="http://blog.poetries.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>IE6下常见的兼容性问题</title>
    <link href="http://blog.poetries.top/2017/02/07/ie-compatibility-summary/"/>
    <id>http://blog.poetries.top/2017/02/07/ie-compatibility-summary/</id>
    <published>2017-02-07T03:10:43.000Z</published>
    <updated>2017-06-11T07:22:47.725Z</updated>
    
    <content type="html"><![CDATA[<h4 id="常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确"><a href="#常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确" class="headerlink" title="常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确"></a>常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确</h4><hr>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">400px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">210px</span>;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">    <span class="attribute">float</span>:left</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">float</span>:right;</div><div class="line">    <span class="attribute">overflow</span>:hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.div</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">180px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">180px</span>;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">25px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/1-1.png" alt=""></p>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/1-2.png" alt=""></p>
<a id="more"></a>
<h4 id="常见问题二：在IE6元素浮动，如果宽度需要内容撑开，里面块级元素的内容也要加浮动"><a href="#常见问题二：在IE6元素浮动，如果宽度需要内容撑开，里面块级元素的内容也要加浮动" class="headerlink" title="常见问题二：在IE6元素浮动，如果宽度需要内容撑开，里面块级元素的内容也要加浮动"></a>常见问题二：在IE6元素浮动，如果宽度需要内容撑开，里面块级元素的内容也要加浮动</h4><hr>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">400px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">    <span class="attribute">float</span>:right;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h3</span>&#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">30px</span>;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
 <figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>左侧<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>右侧<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/2-1.png" alt=""></p>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/2-2.png" alt=""></p>
<hr>
<h4 id="常见问题三：p里面不要套用p标签或者标题标签"><a href="#常见问题三：p里面不要套用p标签或者标题标签" class="headerlink" title="常见问题三：p里面不要套用p标签或者标题标签"></a>常见问题三：p里面不要套用p标签或者标题标签</h4><hr>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/3-1.png" alt=""></p>
<h4 id="常见问题四：IE6下最小高度问题"><a href="#常见问题四：IE6下最小高度问题" class="headerlink" title="常见问题四：IE6下最小高度问题"></a>常见问题四：IE6下最小高度问题</h4><hr>
<ul>
<li><p>当<code>height&lt;19px</code>的时候会被当作19px来处理</p>
</li>
<li><p>解决办法：<code>overflow:hidden</code></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    height:2px;</div><div class="line">    background:red;</div><div class="line">    overflow:hidden</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/4-1.png" alt=""></p>
<h4 id="常见问题五：border-1px-dotted-IE6不支持"><a href="#常见问题五：border-1px-dotted-IE6不支持" class="headerlink" title="常见问题五：border:1px dotted; IE6不支持"></a>常见问题五：<code>border:1px dotted</code>; <code>IE6</code>不支持</h4><hr>
<ul>
<li>解决办法：切背景平铺</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width:100px;</div><div class="line">    height:100px;</div><div class="line">    border:1px dotted red;</div><div class="line">    margin:100px auto;</div><div class="line">&#125;</div><div class="line">        </div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/5-1.png" alt=""></p>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/5-2.png" alt=""></p>
<h4 id="常见问题六：IE6下，父元素用边框，子元素的margin会消失"><a href="#常见问题六：IE6下，父元素用边框，子元素的margin会消失" class="headerlink" title="常见问题六：IE6下，父元素用边框，子元素的margin会消失"></a>常见问题六：IE6下，父元素用边框，子元素的margin会消失</h4><hr>
<ul>
<li>解决办法：触发父元素的<code>haslayout</code>;</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red;</div><div class="line">    <span class="attribute">zoom</span>:<span class="number">1</span>;</div><div class="line">    <span class="comment">/*padding:1px;*/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-class">.div</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">100px</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p> <img src="http://7xq6al.com1.z0.glb.clouddn.com/6-1.png" alt=""></p>
<p> <img src="http://7xq6al.com1.z0.glb.clouddn.com/6-2.png" alt=""></p>
<h4 id="常见问题七：IE6双边距bug：横向的margin值会被放大为两倍"><a href="#常见问题七：IE6双边距bug：横向的margin值会被放大为两倍" class="headerlink" title="常见问题七：IE6双边距bug：横向的margin值会被放大为两倍"></a>常见问题七：<code>IE6</code>双边距<code>bug</code>：横向的<code>margin</code>值会被放大为两倍</h4><hr>
<ul>
<li>解决方法：<code>display:inline</code>;</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    width:200px;</div><div class="line">    height:200px;</div><div class="line">    background:red;</div><div class="line">    float:left;</div><div class="line">    margin:100px;</div><div class="line">    display:inline;</div><div class="line">&#125;</div><div class="line">        </div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/7-1.png" alt=""></p>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/7-2.png" alt=""></p>
<hr>
<h4 id="常见问题八：IE6下外边距消失：当父元素的宽度和一行内容的宽度的差别-gt-3px的时候"><a href="#常见问题八：IE6下外边距消失：当父元素的宽度和一行内容的宽度的差别-gt-3px的时候" class="headerlink" title="常见问题八：IE6下外边距消失：当父元素的宽度和一行内容的宽度的差别&gt;3px的时候"></a>常见问题八：IE6下外边距消失：当父元素的宽度和一行内容的宽度的差别<code>&gt;3px</code>的时候</h4><hr>
<ul>
<li>IE6双边距bug：横向的<code>margin</code>值会被放大为两倍</li>
<li>解决方法：<code>display:inline;</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">.box&#123;</div><div class="line">    float:left;</div><div class="line">    border:10px solid #000;</div><div class="line">    width:600px;</div><div class="line">&#125;</div><div class="line">.box div&#123;</div><div class="line">    width:100px;</div><div class="line">    height:100px;</div><div class="line">    background:red;</div><div class="line">    margin:20px;</div><div class="line">    border:5px solid blue;</div><div class="line">    float:left;</div><div class="line">    display:inline;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/8-1.png" alt=""></p>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/8-2.png" alt=""></p>
<h4 id="常见问题九：IE6，7下-li本身没有浮动，但是li里面的内容有浮动，每个li下边就会产生一个间距"><a href="#常见问题九：IE6，7下-li本身没有浮动，但是li里面的内容有浮动，每个li下边就会产生一个间距" class="headerlink" title="常见问题九：IE6，7下 li本身没有浮动，但是li里面的内容有浮动，每个li下边就会产生一个间距"></a>常见问题九：<code>IE6，7</code>下 <code>li</code>本身没有浮动，但是<code>li</code>里面的内容有浮动，每个<code>li</code>下边就会产生一个间距</h4><hr>
<ul>
<li>解决办法：<ul>
<li>1、给<code>li</code>添加 <code>vertical-align:top</code></li>
<li>2、给<code>li</code>添加浮动</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">ul&#123;</div><div class="line">    width:</div><div class="line">&#125;</div><div class="line">li&#123;</div><div class="line">    list-style:none;</div><div class="line">    height:30px;</div><div class="line">    border:1px solid #000;</div><div class="line">    /*vertical-align:top*/;float:left;</div><div class="line">&#125;</div><div class="line">a&#123;</div><div class="line">    width:100px;</div><div class="line">    height:30px;</div><div class="line">    float:left;</div><div class="line">    background:red;</div><div class="line">&#125;</div><div class="line">span&#123;</div><div class="line">    width:100px;</div><div class="line">    height:30px;</div><div class="line">    float:right;</div><div class="line">    background:blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/9-1.png" alt=""></p>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/9-2.png" alt=""></p>
<h4 id="常见问题十：IE6，7下面让两个块级元素在一行内显示-都用浮动"><a href="#常见问题十：IE6，7下面让两个块级元素在一行内显示-都用浮动" class="headerlink" title="常见问题十：IE6，7下面让两个块级元素在一行内显示 都用浮动"></a>常见问题十：IE6，7下面让两个块级元素在一行内显示 都用浮动</h4><hr>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">    <span class="attribute">float</span>:left;<span class="comment">/*margin-left:100px;*/</span></div><div class="line">&#125;</div><div class="line">```		</div><div class="line"></div><div class="line"></div><div class="line">#### 常见问题十一：<span class="selector-tag">IE6</span>下的文字溢出</div><div class="line"><span class="selector-tag">---</span></div><div class="line"></div><div class="line">&gt; 子元素的宽度和父元素的宽度相差小于3<span class="selector-tag">px</span>的时候，两个浮动元素之间有注释或者行内元素的时候</div><div class="line"></div><div class="line"><span class="selector-tag">-</span> 解决办法：用<span class="selector-tag">div</span>把注释和行内元素包裹起来</div><div class="line"></div><div class="line">```<span class="selector-tag">css</span></div><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">400px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">400px</span>;</div><div class="line">    <span class="attribute">float</span>:right</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="comment">&lt;!--IE6下的文字溢出--&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>@poetries<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="常见问题十二：IE6下，当浮动元素和绝对定位元素是并列关系的时候，绝对定位元素会消失"><a href="#常见问题十二：IE6下，当浮动元素和绝对定位元素是并列关系的时候，绝对定位元素会消失" class="headerlink" title="常见问题十二：IE6下，当浮动元素和绝对定位元素是并列关系的时候，绝对定位元素会消失"></a>常见问题十二：IE6下，当浮动元素和绝对定位元素是并列关系的时候，绝对定位元素会消失</h4><hr>
<ul>
<li>解决办法：给定位元素外面包一个div</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#000</span>;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">ul</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">150px</span>; </div><div class="line">    <span class="attribute">height</span>:<span class="number">150px</span>;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">50px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">span</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">50px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">50px</span>;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">right</span>:-<span class="number">20px</span>;</div><div class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="常见问题十三：IE67下，子元素有相对定位属性，父元素的overflow包不住子元素"><a href="#常见问题十三：IE67下，子元素有相对定位属性，父元素的overflow包不住子元素" class="headerlink" title="常见问题十三：IE67下，子元素有相对定位属性，父元素的overflow包不住子元素"></a>常见问题十三：IE67下，子元素有相对定位属性，父元素的overflow包不住子元素</h4><hr>
<ul>
<li>解决办法：给父元素也添加相对定位属性</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">*&#123;margin:0px;padding:0px;&#125;</div><div class="line">.box&#123;</div><div class="line">    width:200px;</div><div class="line">    height:200px;</div><div class="line">    border:1px solid red;</div><div class="line">    overflow:auto;</div><div class="line">    position:relative;</div><div class="line">&#125;</div><div class="line">.con&#123;</div><div class="line">    width:150px;</div><div class="line">    height:300px;</div><div class="line">    background:blue;</div><div class="line">    position:relative;</div><div class="line">&#125;</div><div class="line">```		</div><div class="line"></div><div class="line">```html</div><div class="line">&lt;div class="box"&gt;</div><div class="line">	&lt;div class="con"&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<h4 id="常见问题十四：IE6下，绝对定位的父元素的宽高为奇数的时候，元素的right和bottom值会有1px的偏差"><a href="#常见问题十四：IE6下，绝对定位的父元素的宽高为奇数的时候，元素的right和bottom值会有1px的偏差" class="headerlink" title="常见问题十四：IE6下，绝对定位的父元素的宽高为奇数的时候，元素的right和bottom值会有1px的偏差"></a>常见问题十四：IE6下，绝对定位的父元素的宽高为奇数的时候，元素的right和bottom值会有1px的偏差</h4><hr>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">201px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">201px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">span</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">20px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">20px</span>;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">    <span class="attribute">position</span>:absolute;</div><div class="line">    <span class="attribute">right</span>:-<span class="number">1px</span>;<span class="attribute">bottom</span>:-<span class="number">1px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="常见问题十五：IE6不支持固定定位-css没办法解决"><a href="#常见问题十五：IE6不支持固定定位-css没办法解决" class="headerlink" title="常见问题十五：IE6不支持固定定位  css没办法解决"></a>常见问题十五：IE6不支持固定定位  css没办法解决</h4><hr>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;<span class="comment">/*去除默认外边距、内边距*/</span></div><div class="line"></div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">    <span class="attribute">position</span>:fixed;</div><div class="line">    <span class="attribute">left</span>:<span class="number">50px</span>;</div><div class="line">    <span class="attribute">top</span>:<span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">div class="box"&gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="常见问题十六：IE6-7下，输入类型的表单控件上下各有1px间隙"><a href="#常见问题十六：IE6-7下，输入类型的表单控件上下各有1px间隙" class="headerlink" title="常见问题十六：IE6 7下，输入类型的表单控件上下各有1px间隙"></a>常见问题十六：IE6 7下，输入类型的表单控件上下各有1px间隙</h4><hr>
<ul>
<li>解决办法：给input加浮动</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">32px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red;  </div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">28px</span>;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="常见问题十七：IE6-7下，输入类型的表单控件加border-none没用"><a href="#常见问题十七：IE6-7下，输入类型的表单控件加border-none没用" class="headerlink" title="常见问题十七：IE6 7下，输入类型的表单控件加border:none没用"></a>常见问题十七：IE6 7下，输入类型的表单控件加border:none没用</h4><hr>
<ul>
<li>解决办法：<ul>
<li>1、border:0;</li>
<li>2、给input添加背景颜色</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">32px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red;  </div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">28px</span>;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="attribute">border</span>:none;</div><div class="line">    <span class="attribute">background</span>:<span class="number">#fff</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="常见问题十八："><a href="#常见问题十八：" class="headerlink" title="常见问题十八："></a>常见问题十八：</h4><hr>
<blockquote>
<ul>
<li>1、输入类型的表单控件添加背景图片url和no-repeat之间一定要有空格</li>
<li>2、输入文字时候，背景图片会跟着移动</li>
</ul>
</blockquote>
<ul>
<li>解决办法：2、给背景图片固定定位，但是在IE7下 背景图片显示会错误</li>
<li>最佳办法：把背景图添加给父元素</li>
</ul>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-class">.box</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">32px</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red; </div><div class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(ball.png) no-repeat; </div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">30px</span>;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</div><div class="line">    <span class="attribute">float</span>:left;</div><div class="line">    <span class="attribute">border</span>:none;</div><div class="line">    <span class="attribute">background</span>:none;</div><div class="line">    <span class="comment">/*background:#fff url(ball.png) no-repeat fixed;*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="常见问题十九：IE6不支持tbody"><a href="#常见问题十九：IE6不支持tbody" class="headerlink" title="常见问题十九：IE6不支持tbody"></a>常见问题十九：IE6不支持tbody</h4><hr>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">*&#123;<span class="attribute">margin</span>:<span class="number">0px</span>;<span class="attribute">padding</span>:<span class="number">0px</span>;&#125;</div><div class="line"><span class="selector-tag">table</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">200px</span>;</div><div class="line">    <span class="attribute">border-collapse</span>:collapse;</div><div class="line">    <span class="attribute">background</span>:red;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">tbody</span>&#123;</div><div class="line">    <span class="attribute">background</span>:blue;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">tr</span>&#123;</div><div class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(ball.png) no-repeat;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">td</span>&#123;</div><div class="line">    <span class="attribute">height</span>:<span class="number">20px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">td</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确&quot;&gt;&lt;a href=&quot;#常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确&quot; class=&quot;headerlink&quot; title=&quot;常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确&quot;&gt;&lt;/a&gt;常见问题一：在Ie6下，内容会把父元素设置好的宽高撑开。计算一定要精确&lt;/h4&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;400px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.left&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;210px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:red;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;:left&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.right&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;float&lt;/span&gt;:right;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;overflow&lt;/span&gt;:hidden;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.div&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;180px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;180px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background&lt;/span&gt;:blue;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;padding&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;25px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;box&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;left&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;right&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;div&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq6al.com1.z0.glb.clouddn.com/1-1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq6al.com1.z0.glb.clouddn.com/1-2.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="CSS" scheme="http://blog.poetries.top/tags/CSS/"/>
    
      <category term="csshack" scheme="http://blog.poetries.top/tags/csshack/"/>
    
  </entry>
  
  <entry>
    <title>弹性布局总结</title>
    <link href="http://blog.poetries.top/2017/02/06/flex/"/>
    <id>http://blog.poetries.top/2017/02/06/flex/</id>
    <published>2017-02-06T11:20:43.000Z</published>
    <updated>2017-06-11T07:22:47.721Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><strong>以下6个属性设置在容器上</strong><ul>
<li><code>flex-direction</code></li>
<li><code>flex-wrap</code></li>
<li><code>flex-flow</code></li>
<li><code>justify-content</code></li>
<li><code>align-items</code></li>
<li><code>align-content</code></li>
</ul>
</li>
<li><strong>属性详解</strong><ul>
<li><code>flex-direction: row</code> | <code>row-reverse</code> | <code>column</code> | <code>column-reverse</code>;</li>
<li><code>flex-wrap: nowrap</code> | <code>wrap</code> | <code>wrap-reverse</code>;</li>
<li><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code><ul>
<li><code>flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;</code>;</li>
</ul>
</li>
<li><code>justify-content</code>属性定义了项目在主轴上的对齐方式。<ul>
<li><code>justify-content: flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>space-between</code> | <code>space-around</code>;</li>
</ul>
</li>
<li><code>align-items</code>属性定义项目在交叉轴上如何对齐。<ul>
<li><code>align-items: flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>baseline</code> | <code>stretch</code>;</li>
</ul>
</li>
<li><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。<ul>
<li><code>align-content: flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>space-between</code> | <code>space-around</code> | <code>stretch</code>;</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p><strong>以下6个属性设置在项目上</strong></p>
<ul>
<li><code>order</code></li>
<li><code>flex-grow</code></li>
<li><code>flex-shrink</code></li>
<li><code>flex-basis</code></li>
<li><code>flex</code></li>
<li><code>align-self</code></li>
</ul>
</li>
<li><p><strong>属性详解</strong></p>
<ul>
<li><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为<code>0</code></li>
<li><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</li>
<li><code>flex-shrink</code>属性定义了项目的缩小比例，默认为<code>1</code>，即如果空间不足，该项目将缩小。</li>
<li><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</li>
<li><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</li>
<li><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</li>
<li><code>align-self: auto</code> | <code>flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>baseline</code> | <code>stretch</code>;</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><strong>图解flex布局</strong></li>
</ul>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/0001.jpg" alt="enter description here"></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;以下6个属性设置在容器上&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flex-direction&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-wrap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-flow&lt;/code&gt;&lt;/
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="HTML5" scheme="http://blog.poetries.top/tags/HTML5/"/>
    
      <category term="弹性布局" scheme="http://blog.poetries.top/tags/%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>ES6新特性</title>
    <link href="http://blog.poetries.top/2017/02/04/es6-new-property/"/>
    <id>http://blog.poetries.top/2017/02/04/es6-new-property/</id>
    <published>2017-02-04T10:20:43.000Z</published>
    <updated>2017-06-11T07:22:47.721Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、作用域"><a href="#一、作用域" class="headerlink" title="一、作用域"></a>一、作用域</h4><hr>
<ul>
<li>块级作用域</li>
<li>块级变量<code>let</code></li>
<li>块级常量 <code>const</code></li>
</ul>
<h4 id="二、箭头函数"><a href="#二、箭头函数" class="headerlink" title="二、箭头函数"></a>二、箭头函数</h4><hr>
<ul>
<li><code>sum = (a,b)=&gt; a + b</code></li>
<li><code>nums.forEach(v=&gt; {console.log(v)})</code></li>
<li>词法 <code>this</code></li>
</ul>
<h4 id="三、参数处理"><a href="#三、参数处理" class="headerlink" title="三、参数处理"></a>三、参数处理</h4><hr>
<ul>
<li>默认参数值</li>
<li>剩余参数</li>
<li>展开运算符</li>
</ul>
<h4 id="四、模板字面量"><a href="#四、模板字面量" class="headerlink" title="四、模板字面量"></a>四、模板字面量</h4><hr>
<ul>
<li>多行字符串</li>
<li>字符串插值</li>
<li>带标签的模板字面量</li>
<li>原始字符串</li>
</ul>
<h4 id="五、原有字面量加强"><a href="#五、原有字面量加强" class="headerlink" title="五、原有字面量加强"></a>五、原有字面量加强</h4><hr>
<ul>
<li>更安全的二进制字面量(0b1111101)</li>
<li>更安全的八进制字面量(0o767)</li>
<li>字符串支持<code>Unicode</code><ul>
<li><code>String.fromCodePoint</code></li>
<li><code>String.prototype.codePointAt</code></li>
</ul>
</li>
<li>正则表达式字面量添加 Unicode</li>
<li>正则表达式添加y标记，支持粘滞匹配</li>
<li>对象属性加强<ul>
<li>属性定义支持短语法<code>obj = {x,y}</code></li>
<li>属性名支持表达式 <code>obj = {[&quot;baz&quot;+quux()]:42}</code></li>
<li>添加<code>__proto__</code>属性，但不建议使用</li>
</ul>
</li>
</ul>
<h4 id="六、解构赋值"><a href="#六、解构赋值" class="headerlink" title="六、解构赋值"></a>六、解构赋值</h4><hr>
<ul>
<li>匹配 <code>[b,a] = [a,b]</code></li>
<li>对象匹配 <code>let {a,b,c} = objABC</code></li>
<li>参数匹配 <code>function g({name:n,val:v}){}</code></li>
</ul>
<h4 id="七、模块"><a href="#七、模块" class="headerlink" title="七、模块"></a>七、模块</h4><hr>
<ul>
<li>导入(<code>import</code>)</li>
<li>导出(<code>export</code>)</li>
<li>默认导出(<code>export default</code>)</li>
</ul>
<h4 id="八、类"><a href="#八、类" class="headerlink" title="八、类"></a>八、类</h4><hr>
<ul>
<li>使用<code>extends</code>继承</li>
<li>重写构造器</li>
<li><code>super</code>关键字</li>
</ul>
<h4 id="九、迭代"><a href="#九、迭代" class="headerlink" title="九、迭代"></a>九、迭代</h4><hr>
<ul>
<li>迭代器</li>
<li><code>for of</code></li>
</ul>
<h4 id="十、生成器"><a href="#十、生成器" class="headerlink" title="十、生成器"></a>十、生成器</h4><hr>
<h4 id="十一、promise"><a href="#十一、promise" class="headerlink" title="十一、promise"></a>十一、promise</h4><hr>
<h4 id="十二、元编程"><a href="#十二、元编程" class="headerlink" title="十二、元编程"></a>十二、元编程</h4><hr>
<ul>
<li>代理(<code>proxy</code>)</li>
<li>反射(<code>Reflex</code>)</li>
</ul>
<h4 id="十三、新增数据类型"><a href="#十三、新增数据类型" class="headerlink" title="十三、新增数据类型"></a>十三、新增数据类型</h4><hr>
<ul>
<li><code>Symbol</code>类型</li>
<li><code>Set</code>类型</li>
<li><code>Map</code>类型</li>
<li><code>WeakSet</code>类型</li>
<li><code>WeakMap</code>类型</li>
<li><code>TypedArray</code>类型</li>
</ul>
<h4 id="十四、原有内置对象API增强"><a href="#十四、原有内置对象API增强" class="headerlink" title="十四、原有内置对象API增强"></a>十四、原有内置对象<code>API</code>增强</h4><hr>
<ul>
<li><p><code>Object.assign</code></p>
</li>
<li><p><code>Array.from</code></p>
</li>
<li><p><code>Array.of</code></p>
</li>
<li><p><code>Array.prototype.fill</code></p>
</li>
<li><p><code>Array.prototype.find</code></p>
</li>
<li><p><code>Array.prototype.findIndex</code></p>
</li>
<li><p><code>Array.prototype.copyWithin</code></p>
</li>
<li><p><code>Array.prototype.entries</code></p>
</li>
<li><p><code>Array.prototype.keys</code></p>
</li>
<li><p><code>Array.prototype.values</code></p>
</li>
<li><p><code>String.prototype.includes</code></p>
</li>
<li><p><code>String.prototype.repeat</code></p>
</li>
<li><p><code>String.prototype.startsWidth</code></p>
</li>
<li><p><code>String.prototype.endsWidth()</code></p>
</li>
<li><p><code>Number.EPSILON</code></p>
</li>
<li><p><code>Number.isInteger</code></p>
</li>
<li><p><code>Number.isSafeInteger</code></p>
</li>
<li><p><code>Number.isFinite</code></p>
</li>
<li><p><code>Number.isNaN(&quot;NaN&quot;)</code></p>
</li>
<li><p><code>Math.acosh</code></p>
</li>
<li><p><code>Math.hypot</code></p>
</li>
<li><p><code>Math.imul</code></p>
</li>
<li><p><code>Math.sign</code></p>
</li>
<li><p><code>Math.trunc</code></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、作用域&quot;&gt;&lt;a href=&quot;#一、作用域&quot; class=&quot;headerlink&quot; title=&quot;一、作用域&quot;&gt;&lt;/a&gt;一、作用域&lt;/h4&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;块级作用域&lt;/li&gt;
&lt;li&gt;块级变量&lt;code&gt;let&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;块级
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://blog.poetries.top/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>基于gulp的工作流配置</title>
    <link href="http://blog.poetries.top/2017/01/21/gulp-works/"/>
    <id>http://blog.poetries.top/2017/01/21/gulp-works/</id>
    <published>2017-01-21T09:40:43.000Z</published>
    <updated>2017-06-11T07:22:47.725Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>配置一套基于<code>gulp</code>的工作流，满足日常的基本开发。</p>
</blockquote>
<a id="more"></a>
<h3 id="一、目录结构"><a href="#一、目录结构" class="headerlink" title="一、目录结构"></a>一、目录结构</h3><hr>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-12325acbb263363b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一套基于gulp的工作流"></p>
<h3 id="二、-package-json"><a href="#二、-package-json" class="headerlink" title="二、 package.json"></a>二、 package.json</h3><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"gulp-project"</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"dev"</span>: <span class="string">"gulp dev"</span>, <span class="comment">//npm run dev   开发</span></div><div class="line">    <span class="string">"build"</span>: <span class="string">"gulp build"</span>, <span class="comment">//npm run build   发布</span></div><div class="line">    <span class="string">"upload"</span>: <span class="string">"gulp upload"</span>, <span class="comment">//npm run upload 上传服务器 </span></div><div class="line">    <span class="string">"zip"</span>: <span class="string">"gulp zip"</span> <span class="comment">////npm run zip 打包文件</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.22.0"</span>, <span class="comment">//编译es6</span></div><div class="line">    <span class="string">"browser-sync"</span>: <span class="string">"^2.15.0"</span>,  <span class="comment">//监听改动刷新</span></div><div class="line">    <span class="string">"gulp"</span>: <span class="string">"^3.9.1"</span>, <span class="comment">//gulp</span></div><div class="line">    <span class="string">"gulp-autoprefixer"</span>: <span class="string">"^3.1.1"</span>, <span class="comment">//补齐css浏览器前缀</span></div><div class="line">    <span class="string">"gulp-babel"</span>: <span class="string">"^6.1.2"</span>, <span class="comment">// Es6</span></div><div class="line">    <span class="string">"gulp-clean"</span>: <span class="string">"^0.3.2"</span>, <span class="comment">//删除文件</span></div><div class="line">    <span class="string">"gulp-clean-css"</span>: <span class="string">"^2.0.12"</span>, <span class="comment">//css压缩，gulp-minify-css不更新了</span></div><div class="line">    <span class="string">"gulp-concat"</span>: <span class="string">"^2.6.0"</span>,<span class="comment">//合并文件</span></div><div class="line">    <span class="string">"gulp-ftp"</span>: <span class="string">"^1.1.0"</span>,<span class="comment">//提交到ftp服务器</span></div><div class="line">    <span class="string">"gulp-git"</span>: <span class="string">"^1.11.3"</span>,<span class="comment">//提交到git</span></div><div class="line">    <span class="string">"gulp-htmlmin"</span>: <span class="string">"^2.0.0"</span>,<span class="comment">//压缩html</span></div><div class="line">    <span class="string">"gulp-imagemin"</span>: <span class="string">"^3.0.3"</span>,<span class="comment">//压缩图片</span></div><div class="line">    <span class="string">"gulp-rename"</span>: <span class="string">"^1.2.2"</span>,<span class="comment">//重命名文件</span></div><div class="line">    <span class="string">"gulp-rev-append"</span>: <span class="string">"^0.1.6"</span>, <span class="comment">//添加MD5版本号，这里改成了时间戳</span></div><div class="line">    <span class="string">"gulp-sass"</span>: <span class="string">"^2.3.2"</span>,<span class="comment">//编译SASS</span></div><div class="line">    <span class="string">"gulp-uglify"</span>: <span class="string">"^2.0.0"</span>,<span class="comment">//js压缩</span></div><div class="line">    <span class="string">"gulp-util"</span>: <span class="string">"^3.0.7"</span>, <span class="comment">//说是ftp配套用的，看了下是包装了些常用函数</span></div><div class="line">    <span class="string">"gulp-zip"</span>: <span class="string">"^3.2.0"</span> <span class="comment">// 打包文件</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="三、-gulpfile-js"><a href="#三、-gulpfile-js" class="headerlink" title="三、 gulpfile.js"></a>三、 gulpfile.js</h3><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//组件</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">	browserSync = <span class="built_in">require</span>(<span class="string">'browser-sync'</span>).create(), <span class="comment">//监听刷新</span></div><div class="line">    reload = browserSync.reload,</div><div class="line">    ftp = <span class="built_in">require</span>(<span class="string">'gulp-ftp'</span>), <span class="comment">// ftp上传</span></div><div class="line">    gutil = <span class="built_in">require</span>(<span class="string">'gulp-util'</span>),</div><div class="line">    sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>), <span class="comment">// sass</span></div><div class="line">    cleancss = <span class="built_in">require</span>(<span class="string">'gulp-clean-css'</span>), <span class="comment">// CSS压缩</span></div><div class="line">    autoprefixer = <span class="built_in">require</span>(<span class="string">"gulp-autoprefixer"</span>),</div><div class="line">    uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>), <span class="comment">// js压缩</span></div><div class="line">    concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>), <span class="comment">// 合并文件</span></div><div class="line">    rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>), <span class="comment">// 重命名</span></div><div class="line">    clean = <span class="built_in">require</span>(<span class="string">'gulp-clean'</span>), <span class="comment">//清空文件夹</span></div><div class="line">    imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>), <span class="comment">//压缩图片</span></div><div class="line">    zip = <span class="built_in">require</span>(<span class="string">'gulp-zip'</span>), <span class="comment">//打包文件</span></div><div class="line">    rev = <span class="built_in">require</span>(<span class="string">'gulp-rev-append'</span>), <span class="comment">//添加MD5</span></div><div class="line">    htmlmin = <span class="built_in">require</span>(<span class="string">'gulp-htmlmin'</span>), <span class="comment">// 压缩html</span></div><div class="line">	git = <span class="built_in">require</span>(<span class="string">'gulp-git'</span>),     <span class="comment">//git</span></div><div class="line">	babel = <span class="built_in">require</span>(<span class="string">"gulp-babel"</span>); <span class="comment">//ES6 转es5</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// =========== 开发构建流程 [多文件输出] ==============</span></div><div class="line"></div><div class="line"><span class="comment">//dev</span></div><div class="line">gulp.task(<span class="string">'sass:dev'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'src/sass/*.scss'</span>)</div><div class="line">        .pipe(sass())</div><div class="line">        .pipe(gulp.dest(<span class="string">'src/css/'</span>))</div><div class="line">        .pipe(reload(&#123; <span class="attr">stream</span>: <span class="literal">true</span> &#125;))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 合并、重命名css</span></div><div class="line">gulp.task(<span class="string">'css:dev'</span>, [<span class="string">'sass:dev'</span>], () =&gt; &#123;</div><div class="line">    gulp.src([<span class="string">'src/css/*.css'</span>, <span class="string">'!src/css/areaMap.css'</span>])</div><div class="line">        .pipe(concat(<span class="string">'all.css'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/css/'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 合并、重命名js</span></div><div class="line">gulp.task(<span class="string">'js:dev'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'src/js/*.js'</span>)</div><div class="line">    	.pipe(babel(&#123;</div><div class="line">		      	 	<span class="attr">presets</span>: [<span class="string">'es2015'</span>]</div><div class="line">     			&#125;)) <span class="comment">//ES6转ES5</span></div><div class="line">        <span class="comment">//.pipe(concat('all.js')) 开发阶段分开输出js文件</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/js/'</span>))</div><div class="line">        .pipe(reload(&#123; <span class="attr">stream</span>: <span class="literal">true</span> &#125;))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// HTML</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'html:dev'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'src/tpl/*.html'</span>)</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 将lib的库文件对应到指定位置</span></div><div class="line">gulp.task(<span class="string">'lib:dev'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'./src/lib/*'</span>)</div><div class="line">        .pipe(gulp.dest(<span class="string">'./dist/lib/'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//开发构建</span></div><div class="line">gulp.task(<span class="string">'dev'</span>, [<span class="string">'css:dev'</span>, <span class="string">'js:dev'</span>, <span class="string">'html:dev'</span>, <span class="string">'img'</span>,<span class="string">'copyFonts'</span>,<span class="string">'lib'</span>], () =&gt; &#123;</div><div class="line">    browserSync.init(&#123;</div><div class="line">        <span class="attr">server</span>: &#123;</div><div class="line">            <span class="attr">baseDir</span>: <span class="string">"dist"</span> <span class="comment">// 设置服务器的根目录为dist目录</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">notify</span>: <span class="literal">false</span> <span class="comment">// 开启静默模式</span></div><div class="line">    &#125;);</div><div class="line">    <span class="comment">// 我们使用gulp的文件监听功能，来实时编译修改过后的文件</span></div><div class="line"></div><div class="line">    gulp.watch(<span class="string">'src/js/*.js'</span>, [<span class="string">'js:dev'</span>]);</div><div class="line">    gulp.watch(<span class="string">'src/sass/*.scss'</span>, [<span class="string">'sass:dev'</span>]);</div><div class="line">    gulp.watch(<span class="string">'src/tpl/*.html'</span>, [<span class="string">'html:dev'</span>]);</div><div class="line">    gulp.watch(<span class="string">'src/fonts/**'</span>, [<span class="string">'copyFonts'</span>]);</div><div class="line">    gulp.watch(<span class="string">'src/images/**'</span>, [<span class="string">'img'</span>]);</div><div class="line">    gulp.watch(<span class="string">'src/lib/**'</span>, [<span class="string">'lib'</span>]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// =========== 正式构建 build [单文件输出] ==============</span></div><div class="line"></div><div class="line"><span class="comment">// sass解析</span></div><div class="line">gulp.task(<span class="string">'sass'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'src/sass/*.scss'</span>)</div><div class="line">        <span class="comment">//输出为压缩</span></div><div class="line">         .pipe(sass(&#123;</div><div class="line">             <span class="attr">outputStyle</span>: <span class="string">'compressed'</span></div><div class="line">         &#125;))</div><div class="line">        .pipe(sass())</div><div class="line">        .pipe(gulp.dest(<span class="string">'src/css/'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 合并、压缩、重命名css</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'css'</span>, [<span class="string">'sass'</span>], () =&gt; &#123;</div><div class="line">    gulp.src([<span class="string">'src/css/*.css'</span>, <span class="string">'!src/css/areaMap.css'</span>])</div><div class="line">        .pipe(concat(<span class="string">'all.css'</span>))</div><div class="line">        .pipe(autoprefixer(&#123;</div><div class="line">            <span class="attr">browsers</span>: [<span class="string">'last 2 versions'</span>, <span class="string">'Android &gt;= 4.0'</span>],</div><div class="line">            <span class="attr">cascade</span>: <span class="literal">true</span>, <span class="comment">//是否美化属性值 默认：true 像这样：</span></div><div class="line">            remove: <span class="literal">false</span> <span class="comment">//是否去掉不必要的前缀 默认：true </span></div><div class="line">        &#125;))</div><div class="line">        .pipe(cleancss()) <span class="comment">//压缩css</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/css'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 合并，压缩,重命名js文件</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'js'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'src/js/*.js'</span>)</div><div class="line">    	.pipe(babel(&#123;</div><div class="line">		      	 	<span class="attr">presets</span>: [<span class="string">'es2015'</span>]</div><div class="line">     			&#125;)) <span class="comment">//ES6转ES5</span></div><div class="line">        .pipe(concat(<span class="string">'all.js'</span>))</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/js'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 压缩HTML</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'html'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'src/tpl/*.html'</span>)</div><div class="line">        .pipe(rev())<span class="comment">//记得在引用地址后面加后缀，插件原本是ver=@@hash ,这里改成了v=@@hash</span></div><div class="line">      <span class="comment">//&lt;link rel="stylesheet" href="css/all.css?v=@@hash"&gt;</span></div><div class="line">      <span class="comment">//&lt;script src="js/all.js?v=@@hash"&gt;&lt;/script&gt;</span></div><div class="line">        .pipe(htmlmin(&#123;</div><div class="line">            <span class="attr">removeComments</span>: <span class="literal">true</span>, <span class="comment">//清除HTML注释</span></div><div class="line">            collapseWhitespace: <span class="literal">true</span>, <span class="comment">//压缩HTML</span></div><div class="line">            collapseBooleanAttributes: <span class="literal">true</span>, <span class="comment">//省略布尔属性的值 &lt;input checked="true"/&gt; ==&gt; &lt;input /&gt;</span></div><div class="line">            removeEmptyAttributes: <span class="literal">true</span>, <span class="comment">//删除所有空格作属性值 &lt;input id="" /&gt; ==&gt; &lt;input /&gt;</span></div><div class="line">            removeScriptTypeAttributes: <span class="literal">true</span>, <span class="comment">//删除&lt;script&gt;的type="text/javascript"</span></div><div class="line">            removeStyleLinkTypeAttributes: <span class="literal">true</span>, <span class="comment">//删除&lt;style&gt;和&lt;link&gt;的type="text/css"</span></div><div class="line">            minifyJS: <span class="literal">true</span>, <span class="comment">//压缩页面JS</span></div><div class="line">            minifyCSS: <span class="literal">true</span> <span class="comment">//压缩页面CSS</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//压缩图片</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'img'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'src/images/*.&#123;png,jpg,gif,ico&#125;'</span>)</div><div class="line">        .pipe(imagemin(&#123;</div><div class="line">            <span class="attr">optimizationLevel</span>: <span class="number">5</span>, <span class="comment">//类型：Number  默认：3  取值范围：0-7（优化等级）</span></div><div class="line">            progressive: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 无损压缩jpg图片</span></div><div class="line">            interlaced: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span></div><div class="line">            multipass: <span class="literal">true</span> <span class="comment">//类型：Boolean 默认：false 多次优化svg直到完全优化</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/images'</span>));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//字体文件</span></div><div class="line">gulp.task(<span class="string">'copyFonts'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/fonts/**/*'</span>)</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/fonts/'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 清空图片、样式、js</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'clean'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'dist'</span>, &#123; <span class="attr">read</span>: <span class="literal">false</span> &#125;)</div><div class="line">        .pipe(clean(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;));</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 将bower的库文件对应到指定位置</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'lib'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'/src/lib/*'</span>)</div><div class="line">        .pipe(gulp.dest(<span class="string">'/dist/lib/'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// ================ 打包主体dist 文件夹 zip ====</div><div class="line"></div><div class="line">//打包主体dist 文件夹并按照时间重命名</div><div class="line">gulp.task(&apos;zip&apos;, function()&#123;</div><div class="line">      function checkTime(i) &#123;</div><div class="line">          if (i &lt; 10) &#123;</div><div class="line">              i = &quot;0&quot; + i</div><div class="line">          &#125;</div><div class="line">          return i</div><div class="line">      &#125;</div><div class="line">          </div><div class="line">      var d=new Date();</div><div class="line">      var year=d.getFullYear();</div><div class="line">      var month=checkTime(d.getMonth() + 1);</div><div class="line">      var day=checkTime(d.getDate());</div><div class="line">      var hour=checkTime(d.getHours());</div><div class="line">      var minute=checkTime(d.getMinutes());</div><div class="line"></div><div class="line">  return gulp.src(&apos;./dist/**&apos;)</div><div class="line">        .pipe(zip(year+month+day +hour+minute+&apos;.zip&apos;))</div><div class="line">        .pipe(gulp.dest(&apos;./zip&apos;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//正式构建</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'build'</span>, [<span class="string">'clean'</span>,<span class="string">'css'</span>, <span class="string">'js'</span>, <span class="string">'img'</span>, <span class="string">'html'</span>,<span class="string">'copyFonts'</span>,<span class="string">'lib'</span>]);</div><div class="line"></div><div class="line"><span class="comment">// ================ 上传 upload ====</span></div><div class="line"></div><div class="line">gulp.task(<span class="string">'upload'</span>, () =&gt; &#123;</div><div class="line">    gulp.src(<span class="string">'dist/**'</span>)</div><div class="line">        .pipe(ftp(&#123;</div><div class="line">            <span class="attr">host</span>: <span class="string">'8.8.8.8'</span>, <span class="comment">// 远程主机ip</span></div><div class="line">            port: <span class="number">22</span>, <span class="comment">// 端口</span></div><div class="line">            user: <span class="string">'username'</span>, <span class="comment">// 帐号</span></div><div class="line">            pass: <span class="string">'password'</span>, <span class="comment">// 密码</span></div><div class="line">            remotePath: <span class="string">'/project'</span> <span class="comment">// 上传路径，不存在则新建</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(gutil.noop())</div><div class="line">&#125;)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;配置一套基于&lt;code&gt;gulp&lt;/code&gt;的工作流，满足日常的基本开发。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Build" scheme="http://blog.poetries.top/categories/Build/"/>
    
    
      <category term="gulp" scheme="http://blog.poetries.top/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>webpack学习总结(二)</title>
    <link href="http://blog.poetries.top/2017/01/14/webpack-summary/"/>
    <id>http://blog.poetries.top/2017/01/14/webpack-summary/</id>
    <published>2017-01-14T09:40:43.000Z</published>
    <updated>2017-06-11T07:22:47.753Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>声明 本教程整理于互联网</p>
<p><code>webpack</code>是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，到实际需要的时候再异步加载。通过 <code>loader</code> 的转换，任何形式的资源都可以视作模块，比如<code>CommonJs</code>模块、 <code>AMD</code> 模块、 <code>ES6</code> 模块、<code>CSS</code>、图片、 <code>JSON</code>、<code>Coffeescript</code>、 LESS等</p>
</blockquote>
<h2 id="一、模块系统的演进"><a href="#一、模块系统的演进" class="headerlink" title="一、模块系统的演进"></a>一、模块系统的演进</h2><hr>
<ul>
<li><p>模块系统主要解决模块的定义、依赖和导出，先来看看已经存在的模块系统</p>
</li>
<li><p><code>&lt;script&gt;</code>标签</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;script src=&quot;module1.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;module2.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;libraryA.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;script src=&quot;module3.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>
<ul>
<li><p>这是最原始的 <code>JavaScript</code> 文件加载方式，如果把每一个文件看做是一个模块，那么他们的接口通常是暴露在全局作用域下，也就是定义在 <code>window</code> 对象中，不同模块的接口调用都是一个作用域中，一些复杂的框架，会使用命名空间的概念来组织这些模块的接口，典型的例子如 <code>YUI</code> 库</p>
</li>
<li><p>这种原始的加载方式暴露了一些显而易见的弊端</p>
<ul>
<li>全局作用域下容易造成变量冲突</li>
<li>文件只能按照 <code>&lt;script&gt;</code>的书写顺序进行加载</li>
<li>开发人员必须主观解决模块和代码库的依赖关系</li>
<li>在大型项目中各种资源难以管理，长期积累的问题导致代码库混乱不堪</li>
</ul>
</li>
</ul>
<h3 id="1-1-CommonJS"><a href="#1-1-CommonJS" class="headerlink" title="1.1 CommonJS"></a>1.1 CommonJS</h3><hr>
<ul>
<li>服务器端的 <code>Node.js</code>遵循 <code>CommonJS</code>规范，该规范的核心思想是允许模块通过<code>require</code>方法来同步加载所要依赖的其他模块，然后通过 <code>exports</code> 或 <code>module.exports</code> 来导出需要暴露的接口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">require(&quot;module&quot;);</div><div class="line">require(&quot;../file.js&quot;);</div><div class="line">exports.doStuff = function() &#123;&#125;;</div><div class="line">module.exports = someValue;</div></pre></td></tr></table></figure>
<ul>
<li>优点：<ul>
<li>服务器端模块便于重用</li>
<li><code>NPM</code> 中已经有将近<code>20</code>万个可以使用模块包</li>
<li>简单并容易使用</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>同步的模块加载方式不适合在浏览器环境中，同步意味着阻塞加载，浏览器资源是异步加载的</li>
<li>不能非阻塞的并行加载多个模块</li>
</ul>
</li>
<li><p>实现</p>
<ul>
<li>服务器端的 <code>Node.js</code></li>
<li><code>Browserify</code>，浏览器端的 <code>CommonJS</code> 实现，可以使用 <code>NPM</code>的模块，但是编译打包后的文件体积可能很大</li>
<li><code>modules-webmake</code>，类似<code>Browserify</code>，还不如 <code>Browserify</code> 灵活</li>
<li><code>wreq</code>，<code>Browserify</code>的前身</li>
</ul>
</li>
</ul>
<h3 id="1-2-AMD"><a href="#1-2-AMD" class="headerlink" title="1.2 AMD"></a>1.2 AMD</h3><hr>
<blockquote>
<p><code>Asynchronous Module Definition</code> 规范其实只有一个主要接口<code>define(id?, dependencies?,factory)</code> ，它要在声明模块的时候指定所有的依赖 <code>dependencies</code>，并且还要当做形参传到<code>factory</code> 中，对于依赖的模块提前执行，依赖前置</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">define(&quot;module&quot;, [&quot;dep1&quot;, &quot;dep2&quot;], function(d1, d2) &#123;</div><div class="line">return someExportedValue;</div><div class="line">&#125;);require([&quot;module&quot;, &quot;../file&quot;], function(module, file) &#123; /* ... */ &#125;);</div></pre></td></tr></table></figure>
<ul>
<li><p>优点：</p>
<ul>
<li>适合在浏览器环境中异步加载模块</li>
<li>可以并行加载多个模块</li>
</ul>
</li>
<li><p>缺点：</p>
<ul>
<li>提高了开发成本，代码的阅读和书写比较困难，模块定义方式的语义 不顺畅</li>
<li>不符合通用的模块化思维方式，是一种妥协的实现</li>
</ul>
</li>
<li><p>实现：</p>
<ul>
<li><code>RequireJS</code></li>
<li><code>curl</code></li>
</ul>
</li>
</ul>
<h3 id="1-3-CMD"><a href="#1-3-CMD" class="headerlink" title="1.3 CMD"></a>1.3 CMD</h3><hr>
<ul>
<li><code>Common Module Definition</code> 规范和 <code>AMD</code>很相似，尽量保持简单，并与 <code>CommonJS</code> 和<code>Node.js</code> 的 <code>Modules</code>规范保持了很大的兼容性</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">define(function(require, exports, module) &#123;</div><div class="line">var $ = require(&apos;jquery&apos;);</div><div class="line">var Spinning = require(&apos;./spinning&apos;);</div><div class="line">exports.doSomething = ...</div><div class="line">module.exports = ...</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li>优点：<ul>
<li>依赖就近，延迟执行</li>
<li>可以很容易在 <code>Node.js</code> 中运行</li>
</ul>
</li>
<li>缺点：<ul>
<li>依赖 <code>SPM</code> 打包，模块的加载逻辑偏重</li>
</ul>
</li>
<li>实现：<ul>
<li><code>Sea.js</code></li>
<li><code>coolie</code></li>
</ul>
</li>
</ul>
<h3 id="1-4-ES6-模块"><a href="#1-4-ES6-模块" class="headerlink" title="1.4 ES6 模块"></a>1.4 ES6 模块</h3><hr>
<ul>
<li><code>EcmaScript6</code> 标准增加了 <code>JavaScript</code>语言层面的模块体系定义。<code>ES6</code> 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。<code>CommonJS</code> 和<code>AMD</code> 模块，都只能在运行时确定这些东西</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import &quot;jquery&quot;;</div><div class="line">export function doStuff() &#123;&#125;</div><div class="line">module &quot;localModule&quot; &#123;&#125;</div></pre></td></tr></table></figure>
<ul>
<li>优点：<ul>
<li>容易进行静态分析</li>
<li>面向未来的 <code>EcmaScript</code>标准</li>
</ul>
</li>
<li>缺点：<ul>
<li>原生浏览器端还没有实现该标准</li>
<li>全新的命令字，新版的 <code>Node.js</code>才支持</li>
</ul>
</li>
<li>实现：<ul>
<li><code>Babel</code></li>
</ul>
</li>
</ul>
<h3 id="1-5-前端模块加载"><a href="#1-5-前端模块加载" class="headerlink" title="1.5 前端模块加载"></a>1.5 前端模块加载</h3><hr>
<ul>
<li>前端模块要在客户端中执行，所以他们需要增量加载到浏览器中</li>
<li>模块的加载和传输，我们首先能想到两种极端的方式，一种是每个模块文件都单独请求，另一种是把所有模块打包成一个文件然后只请求一次。显而易见，每个模块都发起单独的请求造成了请求次数过多，导致应用启动速度慢；一次请求加载所有模块导致流量浪费、初始化过程慢。这两种方式都不是好的解决方案，它们过于简单粗暴</li>
<li>分块传输，按需进行懒加载，在实际用到某些模块的时候再增量更新，才是较为合理的模块加载方案</li>
<li>要实现模块的按需加载，就需要一个对整个代码库中的模块进行静态分析、编译打包的过<br>程</li>
</ul>
<h3 id="1-6-所有资源都是模块"><a href="#1-6-所有资源都是模块" class="headerlink" title="1.6 所有资源都是模块"></a>1.6 所有资源都是模块</h3><hr>
<blockquote>
<p>在上面的分析过程中，我们提到的模块仅仅是指<code>JavaScript</code>模块文件。然而，在前端开发过程中还涉及到样式、图片、字体、<code>HTML</code> 模板等等众多的资源。这些资源还会以各种方言的形式存在，比如 <code>coffeescript</code>、 <code>less</code>、 <code>sass</code>、众多的模板库、多语言系统（<code>i18n</code>）等</p>
</blockquote>
<ul>
<li>如果他们都可以视作模块，并且都可以通过 <code>require</code> 的方式来加载，将带来优雅的开发体验，比如</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">require(&quot;./style.css&quot;);</div><div class="line">require(&quot;./style.less&quot;);</div><div class="line">require(&quot;./template.jade&quot;);</div><div class="line">require(&quot;./image.png&quot;);</div></pre></td></tr></table></figure>
<ul>
<li>那么如何做到让 <code>require</code> 能加载各种资源呢？</li>
</ul>
<h3 id="1-7-静态分析"><a href="#1-7-静态分析" class="headerlink" title="1.7 静态分析"></a>1.7 静态分析</h3><hr>
<blockquote>
<p>在编译的时候，要对整个代码进行静态分析，分析出各个模块的类型和它们依赖关系，然后将不同类型的模块提交给适配的加载器来处理。比如一个用<code>LESS</code> 写的样式模块，可以先用<code>LESS</code> 加载器将它转成一个<code>CSS</code>模块，在通过 <code>CSS</code> 模块把他插入到页面的 <code>&lt;style&gt;</code> 标签中执行。<code>Webpack</code>就是在这样的需求中应运而生</p>
</blockquote>
<h2 id="二、webpack基础知识"><a href="#二、webpack基础知识" class="headerlink" title="二、webpack基础知识"></a>二、webpack基础知识</h2><hr>
<h3 id="2-1-什么是-Webpack"><a href="#2-1-什么是-Webpack" class="headerlink" title="2.1 什么是 Webpack"></a>2.1 什么是 Webpack</h3><hr>
<ul>
<li><code>Webpack</code> 是一个模块打包器。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源</li>
</ul>
<h3 id="2-2-Webpack-的特点"><a href="#2-2-Webpack-的特点" class="headerlink" title="2.2  Webpack 的特点"></a>2.2  Webpack 的特点</h3><hr>
<ul>
<li><p>代码拆分</p>
<ul>
<li><code>Webpack</code>有两种组织模块依赖的方式，同步和异步。异步依赖作为分割点，形成一个新的块。在优化了依赖树后，每一个异步区块都作为一个文件被打包</li>
</ul>
</li>
<li><p>Loader</p>
<ul>
<li><code>Webpack</code> 本身只能处理原生的 <code>JavaScript</code> 模块，但是 <code>loader</code> 转换器可以将各种类型的资源转换成 <code>JavaScript</code> 模块。这样，任何资源都可以成为 <code>Webpack</code>可以处理的模块</li>
</ul>
</li>
<li>智能解析<ul>
<li><code>Webpack</code> 有一个智能解析器，几乎可以处理任何第三方库，无论它们的模块形式是<code>CommonJS</code>、 <code>AMD</code>还是普通的 <code>JS</code> 文件。甚至在加载依赖的时候，允许使用动态表达式<code>require(&quot;./templates/&quot; + name + &quot;.jade&quot;)</code></li>
</ul>
</li>
<li>插件系统<ul>
<li><code>Webpack</code> 还有一个功能丰富的插件系统。大多数内容功能都是基于这个插件系统运行的，还可以开发和使用开源的 <code>Webpack</code> 插件，来满足各式各样的需求</li>
</ul>
</li>
<li>快速运行<ul>
<li><code>Webpack</code> 使用异步 <code>I/O</code> 和多级缓存提高运行效率，这使得 <code>Webpack</code>能够以令人难以置信的速度快速增量编译</li>
</ul>
</li>
</ul>
<h3 id="2-3-总览"><a href="#2-3-总览" class="headerlink" title="2.3 总览"></a>2.3 总览</h3><hr>
<ul>
<li>他的目的就是把有依赖关系的各种文件打包成一系列的静<br>态资源</li>
<li><code>webpack</code>简单点来说就就是一个配置文件，所有的魔力都是在这一个文件中发生的。 这个配置文件主要分<br>为三大块<ul>
<li><code>entry</code> 入口文件 让<code>webpack</code>用哪个文件作为项目的入口</li>
<li><code>output</code> 出口 让<code>webpack</code>把处理完成的文件放在哪里</li>
<li><code>module</code> 模块 要用什么不同的模块来处理各种类型的文件</li>
</ul>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-476c485bbf2af2f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h3 id="2-4-安装"><a href="#2-4-安装" class="headerlink" title="2.4 安装"></a>2.4 安装</h3><hr>
<ul>
<li>先装好node和npm，因为webpack是一个基于node的项目。然后</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g webpack</div></pre></td></tr></table></figure>
<ul>
<li>此时 <code>Webpack</code>已经安装到了全局环境下，可以通过命令行<code>webpack -h</code> 试试</li>
<li>通常我们会将 <code>Webpack</code>安装到项目的依赖中，这样就可以使用项目本地版本的 <code>Webpack</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 进入项目目录</div><div class="line"># 确定已经有 package.json，没有就通过 npm init 创建</div><div class="line"># 安装 webpack 依赖</div><div class="line">$ npm install webpack --save-dev</div></pre></td></tr></table></figure>
<blockquote>
<p><code>Webpack</code> 目前有两个主版本，一个是在 master 主干的稳定版，一个是在 <code>webpack-2</code> 分支的测试版，测试版拥有一些实验性功能并且和稳定版不兼容，在正式项目中应该使用稳定版</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 查看 webpack 版本信息</div><div class="line">$ npm info webpack</div><div class="line"># 安装指定版本的 webpack</div><div class="line">$ npm install webpack@1.12.x --save-dev</div></pre></td></tr></table></figure>
<ul>
<li>如果需要使用 <code>Webpack</code>开发工具，要单独安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install webpack-dev-server --save-dev</div></pre></td></tr></table></figure>
<h3 id="2-5-建立一个项目"><a href="#2-5-建立一个项目" class="headerlink" title="2.5  建立一个项目"></a>2.5  建立一个项目</h3><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir webpack</div><div class="line">cd webpack</div><div class="line">npm init</div></pre></td></tr></table></figure>
<ul>
<li>如果你使用git管理你的这个项目的话，建议你新建一个<code>.gitignore</code>文件，不要让<code>git</code>提交一些<code>node</code>依赖的模<br>块</li>
<li>创建一个静态页面 <code>index.html</code> 和一个 <code>JS</code> 入口文件 <code>entry.js：</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// entry.js</span></div><div class="line"><span class="built_in">document</span>.write(<span class="string">'It works.'</span>)</div></pre></td></tr></table></figure>
<ul>
<li>然后编译 <code>entry.js</code> 并打包到 <code>bundle.js</code>：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ webpack entry.js bundle.js</div></pre></td></tr></table></figure>
<ul>
<li>打包过程会显示日志：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Hash: e964f90ec65eb2c29bb9</div><div class="line">Version: webpack 1.12.2</div><div class="line">Time: 54ms</div><div class="line">Asset Size Chunks Chunk Names</div><div class="line">bundle.js 1.42 kB 0 [emitted] main</div><div class="line">[0] ./entry.js 27 bytes &#123;0&#125; [built]</div></pre></td></tr></table></figure>
<ul>
<li>用浏览器打开 <code>index.html</code> 将会看到 <code>It works.</code></li>
<li>接下来添加一个模块 <code>module.js</code>并修改入口 <code>entry.js</code>：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// module.js</div><div class="line">module.exports = &apos;It works from module.js.&apos;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// entry.js</div><div class="line">document.write(&apos;It works.&apos;)</div><div class="line">document.write(require(&apos;./module.js&apos;)) // 添加模块</div></pre></td></tr></table></figure>
<ul>
<li><p>重新打包 <code>webpack entry.js bundle.js</code>后刷新页面看到变化 <code>It works.It works from module.js.</code></p>
</li>
<li><p><code>Webpack</code> 会分析入口文件，解析包含依赖关系的各个文件。这些文件（模块）都打包到<code>bundle.js</code> 。<code>Webpack</code> 会给每个模块分配一个唯一的<code>id</code>并通过这个<code>id</code> 索引和访问模块。在页面启动时，会先执<code>entry.js</code> 中的代码，其它模块会在运行<code>require</code>的时候再执行</p>
</li>
</ul>
<h2 id="三、Loader"><a href="#三、Loader" class="headerlink" title="三、Loader"></a>三、Loader</h2><hr>
<ul>
<li><code>Webpack</code> 本身只能处理 <code>JavaScript</code> 模块，如果要处理其他类型的文件，就需要使用 <code>loader</code>进行转换</li>
<li><code>Loader</code> 可以理解为是模块和资源的转换器，它本身是一个函数，接受源文件作为参数，返回转换的结果。这样，我们就可以通过 require 来加载任何类型的模块或文件，比如CoffeeScript、 JSX、 LESS </li>
</ul>
<h3 id="3-1-loader-有哪些特性"><a href="#3-1-loader-有哪些特性" class="headerlink" title="3.1  loader 有哪些特性"></a>3.1  loader 有哪些特性</h3><hr>
<ul>
<li><code>Loader</code> 可以通过管道方式链式调用，每个 <code>loader</code> 可以把资源转换成任意格式并传递给下一个 <code>loader</code> ，但是最后一个 <code>loader</code> 必须返回 <code>JavaScript</code></li>
<li><code>Loader</code>可以同步或异步执行。</li>
<li><code>Loader</code> 运行在 <code>node.js</code> 环境中，所以可以做任何可能的事情。</li>
<li><code>Loader</code> 可以接受参数，以此来传递配置项给 <code>loader</code>。</li>
<li><code>Loader</code> 可以通过文件扩展名（或正则表达式）绑定给不同类型的文件。</li>
<li><code>Loader</code>可以通过 <code>npm</code>发布和安装。</li>
<li>除了通过 <code>package.json</code>的 <code>main</code>指定，通常的模块也可以导出一个 <code>loader</code>来使用。</li>
<li><code>Loader</code> 可以访问配置。</li>
<li>插件可以让 <code>loader</code> 拥有更多特性。</li>
<li><code>Loader</code>可以分发出附加的任意文件</li>
</ul>
<blockquote>
<ul>
<li><code>Loader</code>本身也是运行在 <code>node.js</code> 环境中的 <code>JavaScript</code>模块，它通常会返回一个函数。大多数情况下，我们通过 npm 来管理 <code>loader</code>，但是你也可以在项目中自己写 <code>loader</code> 模块</li>
<li>按照惯例，而非必须，<code>loader</code> 一般以 <code>xxx-loader</code> 的方式命名， <code>xxx</code> 代表了这个 <code>loader</code>要做的转换功能，比如 <code>json-loader</code></li>
<li>在引用 <code>loader</code> 的时候可以使用全名 <code>json-loader</code> ，或者使用短名 <code>json</code>。这个命名规则和搜索优先级顺序在<code>webpack</code> 的<code>resolveLoader.moduleTemplates api</code>中定义</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Default: [&quot;*-webpack-loader&quot;, &quot;*-web-loader&quot;, &quot;*-loader&quot;, &quot;*&quot;]</div></pre></td></tr></table></figure>
<ul>
<li><code>Loader</code>可以在 <code>require()</code>引用模块的时候添加，也可以在 <code>webpack</code> 全局配置中进行绑定，还可以通过命令行的方式使用</li>
<li>我们要在页面中引入一个<code>CSS</code>文件<code>style.css</code>，首页将 <code>style.css</code>也看成是一个模块，然后用 <code>css-loader</code> 来读取它，再用<code>style-loader</code>把它插入到页面中</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/* style.css */</div><div class="line">body &#123; </div><div class="line">  background: yellow; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>修改 entry.js：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">require(&quot;!style!css!./style.css&quot;) // 载入 style.css</div><div class="line">document.write(&apos;It works.&apos;)</div><div class="line">document.write(require(&apos;./module.js&apos;))</div></pre></td></tr></table></figure>
<p>安装 loader：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install css-loader style-loader</div></pre></td></tr></table></figure>
<p>重新编译打包，刷新页面，就可以看到黄色的页面背景了</p>
<blockquote>
<p>如果每次   require CSS   文件的时候都要写   loader   前缀，是一件很繁琐的事情。我们可以根据模块类型（扩展名）来自动绑定需要的   loader  </p>
</blockquote>
<ul>
<li>将   <code>entry.js</code>  中的 <code>require(&quot;!style!css!./style.css&quot;)</code>修改为 <code>require(&quot;./style.css&quot;)</code>，然后执行：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ webpack entry.js bundle.js --module-bind &apos;css=style!css&apos;</div><div class="line"># 有些环境下可能需要使用双引号</div><div class="line">$ webpack entry.js bundle.js --module-bind &quot;css=style!css&quot;</div></pre></td></tr></table></figure>
<ul>
<li>显然，这两种使用 <code>loader</code> 的方式，效果是一样的</li>
</ul>
<h2 id="四、配置webpack"><a href="#四、配置webpack" class="headerlink" title="四、配置webpack"></a>四、配置webpack</h2><hr>
<blockquote>
<p><code>Webpack</code>在执行的时候，除了在命令行传入参数，还可以通过指定的配置文件来执行。默认情况下，会搜索当前目<code>webpack.config.js</code> 文件，这个文件是一个 <code>node.js</code>模块，返回一个<code>json</code> 格式的配置信息对象，或者通过 <code>--config</code> 选项来指定配置文件</p>
</blockquote>
<ul>
<li><p>现在开始配置<code>webpack</code>，目标是把这两个<code>js</code>文件合并成一个文件. 我们可以自己在<code>build</code>文件夹里面手动建一个<code>index.html</code>文件夹，然后再把合并以后的<code>js</code>引用在里面，但是这样有些麻烦，所以我们这里安装一个<code>plugin</code>，可以自动快速的帮我们生成<code>HTML</code></p>
</li>
<li><p>创建一个配置文件 <code>webpack.config.js</code></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var webpack = require(&apos;webpack&apos;)</div><div class="line">module.exports = &#123;</div><div class="line">entry: &apos;./entry.js&apos;,</div><div class="line">output: &#123;</div><div class="line">path: __dirname,</div><div class="line">filename: &apos;bundle.js&apos;</div><div class="line">&#125;,</div><div class="line">module: &#123;</div><div class="line">loaders: [</div><div class="line">&#123;test: /\.css$/, loader: &apos;style!css&apos;&#125;</div><div class="line">]</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>同时简化 <code>entry.js</code> 中的 <code>style.css</code> 加载方式</li>
<li><code>require(&#39;./style.css&#39;)</code></li>
<li>最后运行 <code>webpack</code> ，可以看到 <code>webpack</code> 通过配置文件执行的结果和通过命令行<code>webpack entry.js bundle.js --module-bind &#39;css=style!css&#39;</code>执行的结果是一样的</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install html-webpack-plugin --save-dev</div></pre></td></tr></table></figure>
<ul>
<li>有了这个插件 开始写<code>config</code>文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">var path = require(&apos;path&apos;);</div><div class="line">var HtmlwebpackPlugin = require(&apos;html-webpack-plugin&apos;);</div><div class="line">//定义了一些文件夹的路径</div><div class="line">var ROOT_PATH = path.resolve(__dirname);</div><div class="line">var APP_PATH = path.resolve(ROOT_PATH, &apos;app&apos;);</div><div class="line">var BUILD_PATH = path.resolve(ROOT_PATH, &apos;build&apos;);</div><div class="line">module.exports = &#123;</div><div class="line">//项目的文件夹 可以直接用文件夹名称 默认会找index.js 也可以确定是哪个文件名字</div><div class="line">entry: APP_PATH,</div><div class="line">//输出的文件名 合并以后的js会命名为bundle.js</div><div class="line">output: &#123;</div><div class="line">path: BUILD_PATH,</div><div class="line">filename: &apos;bundle.js&apos;</div><div class="line">&#125;,</div><div class="line">//添加我们的插件 会自动生成一个html文件</div><div class="line">plugins: [</div><div class="line">new HtmlwebpackPlugin(&#123;</div><div class="line">title: &apos;Hello World app&apos;</div><div class="line">&#125;)</div><div class="line">]</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>然后在项目根目录运行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure>
<ul>
<li>你会发现多出来一个build文件夹，直接点开里面的html文件，你会发现我们可爱的<code>“hello world”</code>已经插入到页面了。我们的任务完成了，成功生成<code>html</code>，合并<code>js</code>，<code>html</code>引入了<code>js</code>，<code>js</code>被执行了</li>
</ul>
<h3 id="4-1-配置webpack-dev-server"><a href="#4-1-配置webpack-dev-server" class="headerlink" title="4.1 配置webpack-dev-server"></a>4.1 配置webpack-dev-server</h3><hr>
<ul>
<li><p>上面任务虽然完成了，但是我们要不断运行程序然后查看页面，所以最好新建一个开发服务器，可以<code>serve</code>我们<code>pack</code>以后的代码，并且当代码更新的时候自动刷新浏览器</p>
</li>
<li><p>安装<code>webpack-dev-server</code></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install webpack-dev-server --save-dev</div></pre></td></tr></table></figure>
<ul>
<li>安装完毕后在<code>config</code>中添加配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line"></div><div class="line">devServer: &#123;</div><div class="line">historyApiFallback: true,</div><div class="line">hot: true,</div><div class="line">inline: true,</div><div class="line">progress: true,</div><div class="line">&#125;,</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后再<code>package.json</code>里面配置一下运行的命令,<code>npm</code>支持自定义一些命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">&quot;start&quot;: &quot;webpack-dev-server --hot --inline&quot;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<ul>
<li><p>在项目根目录下输入<code>npm start</code>,一堆花花绿绿的信息后server已经起来了，在浏览器里面输入<code>http://localhost:8080</code>发现<code>hello world</code>出现了，在<code>js</code>里面随便修改一些输出,然后保存,浏览器自动刷新，新的结果出现了</p>
</li>
<li><p>拓展阅读 如果你的服务器端使用的是<code>express</code>框架，你还可以直接安装<code>express</code>的<code>middleware</code>，<code>webpack</code>配合<code>express</code>，很好用</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install webpack-dev-middleware --save-dev</div></pre></td></tr></table></figure>
<h3 id="4-2-添加CSS样式"><a href="#4-2-添加CSS样式" class="headerlink" title="4.2 添加CSS样式"></a>4.2 添加CSS样式</h3><ul>
<li><p>现在来添加一些样式，<code>webpack</code>使用<code>loader</code>的方式来处理各种各样的资源，比如说样式文件，我们需要两种<code>loader</code>，<code>css-loader</code>和 <code>style－loader</code>，<code>css-loader</code>会遍历<code>css</code>文件，找到所有的<code>url(...)</code>并且处理。<code>style-loader</code>会把所有的样式插入到你页面的一个<code>style tag</code>中</p>
</li>
<li><p>安装我们的<code>loader</code></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install css-loader style-loader --save-dev</div></pre></td></tr></table></figure>
<ul>
<li>配置<code>loader</code>，在<code>webpack.config.js</code>中</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">devServer: &#123;</div><div class="line">historyApiFallback: true,</div><div class="line">hot: true,</div><div class="line">inline: true,</div><div class="line">progress: true,</div><div class="line">&#125;,</div><div class="line">...</div><div class="line">module: &#123;</div><div class="line">loaders: [</div><div class="line">&#123;</div><div class="line">test: /\.css$/,</div><div class="line">loaders: [&apos;style&apos;, &apos;css&apos;],</div><div class="line">include: APP_PATH</div><div class="line">&#125;</div><div class="line">]</div><div class="line">&#125;,</div><div class="line">...</div><div class="line">plugins: [</div><div class="line">new HtmlwebpackPlugin(&#123;</div><div class="line">title: &apos;Hello World app&apos;</div></pre></td></tr></table></figure>
<ul>
<li><p>看<code>loaders</code>的书写方式，test里面包含一个正则，包含需要匹配的文件，<code>loaders</code>是一个数组，包含要处理这些程序的<code>loaders</code>，这里我们用了<code>css</code>和<code>style</code>，注意<code>loaders</code>的处理顺序是从右到左的，这里就是先运行<code>css-loader</code>然后是<code>style-loader</code></p>
</li>
<li><p>新建一个样式文件 <code>main.css</code></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">h1 &#123;</div><div class="line">color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>记得在入口文件<code>index.js</code>中引用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">require(&apos;./main.css&apos;);</div></pre></td></tr></table></figure>
<ul>
<li><p>然后发现标题变成红色的了，<code>webpack</code>的理念是基于项目处理的，把对应的文件格式给对应的<code>loader</code>处理，然后你就不用管了，它会决定怎么压缩，编译</p>
</li>
<li><p>那现在想使用一些有爱的<code>css</code>预编译程序，来点<code>sass</code>吧。 你可能已经想到了，再来个loader就行啦，确实是<br>这样简单</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install sass-loader --save-dev</div></pre></td></tr></table></figure>
<ul>
<li>稍微修改一下<code>config</code>，删掉我们先前添加的<code>css</code>规则，加上下面的<code>loader</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">test: /\.scss$/,</div><div class="line">loaders: [&apos;style&apos;, &apos;css&apos;, &apos;sass&apos;],</div><div class="line">include: APP_PATH</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<ul>
<li>添加两个<code>sass</code>文件，<code>variables.scss</code>和<code>main.scss</code></li>
</ul>
<p><code>variables.scss</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$red: red;</div></pre></td></tr></table></figure>
<p><code>main.scss</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@import &quot;./variables.scss&quot;;</div><div class="line">h1 &#123;</div><div class="line">color: $red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>index.js</code>中引用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">require(&apos;./main.scss&apos;);</div></pre></td></tr></table></figure></p>
<ul>
<li>然后发现标题如愿变红</li>
</ul>
<h3 id="4-3-处理图片和其他静态文件"><a href="#4-3-处理图片和其他静态文件" class="headerlink" title="4.3 处理图片和其他静态文件"></a>4.3 处理图片和其他静态文件</h3><hr>
<ul>
<li><p>这个和其他一样，也许你也已经会玩了。安装<code>loader</code>，处理文件。诸如图片，字体等等，不过有个神奇的地方它可以根据你的需求将一些图片自动转成<code>base64</code>编码的，为你减轻很多的网络请求</p>
</li>
<li><p>安装<code>url-loader</code></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install url-loader --save-dev</div></pre></td></tr></table></figure>
<ul>
<li>配置<code>config</code>文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">test: /\.(png|jpg)$/,</div><div class="line">loader: &apos;url?limit=40000&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>注意后面那个limit的参数，当你图片大小小于这个限制的时候，会自动启用base64编码图片</li>
</ul>
<p>新建一个<code>imgs</code>文件夹，往里面添加一张照片。在<code>scss</code>文件中添加如下的东西</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@import &quot;./variables.scss&quot;;</div><div class="line">h1 &#123;</div><div class="line">color: $red;</div><div class="line">background: url(&apos;./imgs/avatar.jpg&apos;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>npm start, 然后查看图片的url</li>
</ul>
<h3 id="4-4-添加第三方库"><a href="#4-4-添加第三方库" class="headerlink" title="4.4 添加第三方库"></a>4.4 添加第三方库</h3><hr>
<ul>
<li>有的时候还想来点<code>jquery</code>，<code>moment</code>，<code>undersocre</code>之类的库<code>webpack</code>可以非常容易的做到这一点</li>
<li>那么我们现在安装在我们的<code>app</code>中添加<code>jquery</code>和<code>moment</code>的支持</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install jquery moment --save-dev</div></pre></td></tr></table></figure>
<ul>
<li>在js中引用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var sub = require(&apos;./sub&apos;);</div><div class="line">var $ = require(&apos;jquery&apos;);</div><div class="line">var moment = require(&apos;moment&apos;);</div><div class="line">var app = document.createElement(&apos;div&apos;);</div><div class="line">app.innerHTML = &apos;&lt;h1&gt;Hello World it&lt;/h1&gt;&apos;;</div><div class="line">document.body.appendChild(app);</div><div class="line">app.appendChild(sub());</div><div class="line">$(&apos;body&apos;).append(&apos;&lt;p&gt;look at me! now is &apos; + moment().format() + &apos;&lt;/p&gt;&apos;);</div></pre></td></tr></table></figure>
<ul>
<li>看看浏览器，成功！ <code>jquery</code>和<code>moment</code>现在都起作用了</li>
</ul>
<h3 id="4-5-添加ES6的支持"><a href="#4-5-添加ES6的支持" class="headerlink" title="4.5 添加ES6的支持"></a>4.5 添加ES6的支持</h3><hr>
<ul>
<li>首先 装各种<code>loader</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install babel-loader babel-preset-es2015 --save-dev</div></pre></td></tr></table></figure>
<ul>
<li>配置我们的<code>config</code>文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">test: /\.jsx?$/,</div><div class="line">loader: &apos;babel&apos;,</div><div class="line">include: APP_PATH,</div><div class="line">query: &#123;</div><div class="line">presets: [&apos;es2015&apos;]</div><div class="line">&#125;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<ul>
<li><p><code>es2015</code>这个参数是<code>babel</code>的<code>plugin</code>，可以支持各种最新的<code>es6</code>的特性，具体的情况看这个链接</p>
</li>
<li><p>现在我们可以改掉<code>CommonJS</code>风格的文件了</p>
</li>
</ul>
<p><code>sub.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">export default function() &#123;</div><div class="line">  var element = document.createElement(&apos;h2&apos;);</div><div class="line">  element.innerHTML = &quot;Hello h2 world hahaha&quot;;</div><div class="line">  return element;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>index.js</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import &apos;./main.scss&apos;;</div><div class="line">import generateText from &apos;./sub&apos;;</div><div class="line">import $ from &apos;jquery&apos;;</div><div class="line">import moment from &apos;moment&apos;;</div><div class="line">let app = document.createElement(&apos;div&apos;);</div><div class="line">const myPromise = Promise.resolve(42);</div><div class="line">myPromise.then((number) =&gt; &#123;</div><div class="line">$(&apos;body&apos;).append(&apos;&lt;p&gt;promise result is &apos; + number + &apos; now is &apos; + moment().format() + &apos;&lt;/p&gt;&apos;);</div><div class="line">&#125;);</div><div class="line">app.innerHTML = &apos;&lt;h1&gt;Hello World it&lt;/h1&gt;&apos;;</div><div class="line">document.body.appendChild(app);</div><div class="line">app.appendChild(generateText());</div></pre></td></tr></table></figure>
<ul>
<li>我们上面测试了<code>import</code>,<code>export</code>，<code>const</code>，<code>let</code>，<code>promise</code>等一系列<code>es6</code>的特性</li>
</ul>
<h2 id="五、插件"><a href="#五、插件" class="headerlink" title="五、插件"></a>五、插件</h2><hr>
<blockquote>
<ul>
<li>插件可以完成更多 <code>loader</code> 不能完成的功能</li>
<li>插件的使用一般是在 <code>webpack</code> 的配置信息 <code>plugins</code> 选项中指定</li>
<li><code>Webpack</code> 本身内置了一些常用的插件，还可以通过 <code>npm</code> 安装第三方插件</li>
<li>接下来，我们利用一个最简单的 <code>BannerPlugin</code> 内置插件来实践插件的配置和运行，这个插件的作用是给输出的文件头部添加注释信息</li>
</ul>
</blockquote>
<p>修改 <code>webpack.config.js</code>，添加 <code>plugins</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">var webpack = require(&apos;webpack&apos;)</div><div class="line">module.exports = &#123;</div><div class="line">entry: &apos;./entry.js&apos;,</div><div class="line">output: &#123;</div><div class="line">path: __dirname,</div><div class="line">filename: &apos;bundle.js&apos;</div><div class="line">&#125;,</div><div class="line">module: &#123;</div><div class="line">loaders: [</div><div class="line">&#123;test: /\.css$/, loader: &apos;style!css&apos;&#125;</div><div class="line">]</div><div class="line">&#125;,</div><div class="line">plugins: [</div><div class="line">new webpack.BannerPlugin(&apos;This file is created by zhaoda&apos;)</div><div class="line">]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>然后运行 <code>webpack</code> ，打开 <code>bundle.js</code> ，可以看到文件头部出现了我们指定的注释信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/*! This file is created by zhaoda */</div><div class="line">/******/ (function(modules) &#123; // webpackBootstrap</div><div class="line">/******/ // The module cache</div><div class="line">/******/ var installedModules = &#123;&#125;;</div><div class="line">// 后面代码省略</div></pre></td></tr></table></figure>
<h2 id="六、开发环境"><a href="#六、开发环境" class="headerlink" title="六、开发环境"></a>六、开发环境</h2><hr>
<ul>
<li>当项目逐渐变大，<code>webpack</code> 的编译时间会变长，可以通过参数让编译的输出内容带有进度和颜色</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ webpack --progress --colors</div></pre></td></tr></table></figure>
<ul>
<li>如果不想每次修改模块后都重新编译，那么可以启动监听模式。开启监听模式后，没有变化的模块会在编译后缓存到内存中，而不会每次都被重新编译，所以监听模式的整体速度是很快的</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ webpack --progress --colors --watch</div></pre></td></tr></table></figure>
<blockquote>
<p>当然，使用 <code>webpack-dev-server</code>开发服务是一个更好的选择。它将在 localhost:8080 启动一个 <code>express</code> 静态资源 <code>web</code>服务器，并且会以监听模式自动运行 webpack，在浏览器打开<code>http://localhost:8080/</code>或 <code>http://localhost:8080/webpack-dev-server/</code> 可以浏览项目中的页面和<br>编译后的资源输出，并且通过一个 <code>socket.io</code> 服务实时监听它们的变化并自动刷新页面</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 安装</div><div class="line">$ npm install webpack-dev-server -g</div><div class="line"># 运行</div><div class="line">$ webpack-dev-server --progress --colors</div></pre></td></tr></table></figure>
<h2 id="七、故障处理"><a href="#七、故障处理" class="headerlink" title="七、故障处理"></a>七、故障处理</h2><hr>
<ul>
<li><code>Webpack</code> 的配置比较复杂，很容出现错误，下面是一些通常的故障处理手段</li>
<li>一般情况下，<code>webpack</code>如果出问题，会打印一些简单的错误信息，比如模块没有找到。我们还可以通过参数 <code>--display-error-details</code>来打印错误详情</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">$ webpack --display-error-details</div><div class="line">Hash: a40fbc6d852c51fceadb</div><div class="line">Version: webpack 1.12.2</div><div class="line">Time: 586ms</div><div class="line">Asset Size Chunks Chunk Names</div><div class="line">bundle.js 12.1 kB 0 [emitted] main</div><div class="line">[0] ./entry.js 153 bytes &#123;0&#125; [built] [1 error]</div><div class="line">[5] ./module.js 43 bytes &#123;0&#125; [built]</div><div class="line">+ 4 hidden modules</div><div class="line">ERROR in ./entry.js</div><div class="line">Module not found: Error: Cannot resolve &apos;file&apos; or &apos;directory&apos; ./badpathmodule in /Users/zhaoda/data/projects/webpack-handbook/examples</div><div class="line">resolve file</div><div class="line">/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule doesn&apos;t exist</div><div class="line">/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.webpack.js doesn&apos;t exist</div><div class="line">/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.js doesn&apos;t exist</div><div class="line">/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.web.js doesn&apos;t exist</div><div class="line">/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.json doesn&apos;t exist</div><div class="line">resolve directory</div><div class="line">/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule doesn&apos;t exist (directory default file)</div><div class="line">/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule/package.json doesn&apos;t exist (directory description file)</div><div class="line">[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule]</div><div class="line">[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.webpack.js]</div><div class="line">[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.js]</div><div class="line">[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.web.js]</div><div class="line">[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.json]</div><div class="line">@ ./entry.js 3:0-26</div></pre></td></tr></table></figure>
<ul>
<li><code>Webpack</code>的配置提供了 <code>resolve</code> 和<code>resolveLoader</code> 参数来设置模块解析的处理细节， <code>resolve</code>用来配置应用层的模块（要被打包的模块）解析， <code>resolveLoader</code>用来配置<code>loader</code>模块的解析</li>
<li>当引入通过 <code>npm</code> 安装的 <code>node.js</code> 模块时，可能出现找不到依赖的错误。<code>Node.js</code>模块的依赖解析算法很简单，是通过查看模块的每一层父目录中的 <code>node_modules</code> 文件夹来查询依赖的。当出现 <code>Node.js</code>模块依赖查找失败的时候，可以尝试设置 <code>resolve.fallback</code>和<code>resolveLoader.fallback</code> 来解决问题</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">resolve: &#123; fallback: path.join(__dirname, &quot;node_modules&quot;) &#125;,</div><div class="line">resolveLoader: &#123; fallback: path.join(__dirname, &quot;node_modules&quot;) &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p><code>Webpack</code>中涉及路径配置最好使用绝对路径，建议通过 <code>path.resolve(__dirname,&quot;app/folder&quot;)</code> 或 <code>path.join(__dirname, &quot;app&quot;, &quot;folder&quot;)</code>的方式来配置，以兼容 <code>Windows</code>环境</p>
</blockquote>
<h2 id="八、开发和部署技巧"><a href="#八、开发和部署技巧" class="headerlink" title="八、开发和部署技巧"></a>八、开发和部署技巧</h2><hr>
<h3 id="8-1-启用source-map"><a href="#8-1-启用source-map" class="headerlink" title="8.1 启用source-map"></a>8.1 启用source-map</h3><hr>
<ul>
<li>现在的代码是合并以后的代码，不利于排错和定位，只需要在config中添加</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">devtool: &apos;eval-source-map&apos;,</div></pre></td></tr></table></figure>
<ul>
<li>这样出错以后就会采用source-map的形式直接显示你出错代码的位置</li>
</ul>
<h3 id="8-2-使用preLoaders和postLoaders"><a href="#8-2-使用preLoaders和postLoaders" class="headerlink" title="8.2 使用preLoaders和postLoaders"></a>8.2 使用preLoaders和postLoaders</h3><hr>
<ul>
<li>也许你想在写代码的时候检查自己的<code>js</code>是否符合<code>jshint</code>的规范，那么隆重推荐<code>preLoaders</code>和<code>postLoaders</code></li>
<li><p><code>perLoaders</code>顾名思义就是在<code>loaders</code>执行之前处理的，<code>webpack</code>的处理顺序是<code>perLoaders - loaders - postLoaders</code></p>
</li>
<li><p>安装<code>jshint</code></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install jshint-loader --save-dev</div></pre></td></tr></table></figure>
<ul>
<li>在<code>config</code>文件中配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">module: &#123;</div><div class="line">...</div><div class="line">//和loaders一样的语法，很简单</div><div class="line">perLoaders: [</div><div class="line">&#123;</div><div class="line">test: /\.jsx?$/,</div><div class="line">include: APP_PATH,</div><div class="line">loader: &apos;jshint-loader&apos;</div><div class="line">&#125;</div><div class="line">]</div><div class="line">&#125;</div><div class="line">...</div><div class="line">//配置jshint的选项，支持es6的校验</div><div class="line">jshint: &#123;</div><div class="line">&quot;esnext&quot;: true</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<ul>
<li>好了 现在每次npm run start的时候就可以看到jshint的提示信息啦</li>
</ul>
<h3 id="8-3-部署上线"><a href="#8-3-部署上线" class="headerlink" title="8.3 部署上线"></a>8.3 部署上线</h3><hr>
<ul>
<li><p>刚才说的各种情况都是在开发时候的情况，那么假如项目已经开发完了，需要部署上线了。我们应该新创建一个单独的<code>config</code>文件，因为部署上线使用<code>webpack</code>的时候我们不需要一些<code>dev-tools</code>,<code>dev-server</code>和<code>jshint</code>校验等</p>
</li>
<li><p>复制我们现有的<code>config</code>文件，命名<code>webpack.production.config.js</code>，将里面关于 <code>devServer</code>等和开发有关的东西删掉</p>
</li>
<li><p>在<code>package.json</code>中添加一个命令</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&quot;scripts&quot;: &#123;</div><div class="line">&quot;start&quot;: &quot;webpack-dev-server --hot --inline&quot;,</div><div class="line">&quot;build&quot;: &quot;webpack --progress --profile --colors --config webpack.production.config.js&quot;</div><div class="line">&#125;,</div></pre></td></tr></table></figure>
<ul>
<li>当要上线的时候,运行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run build</div></pre></td></tr></table></figure>
<ul>
<li>可以发现<code>build</code>文件夹中生成了所有东西</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;声明 本教程整理于互联网&lt;/p&gt;
&lt;p&gt;&lt;code&gt;webpack&lt;/code&gt;是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，到实际需要的时候再
    
    </summary>
    
      <category term="Build" scheme="http://blog.poetries.top/categories/Build/"/>
    
    
      <category term="webpack" scheme="http://blog.poetries.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>原生JS与jQuery操作DOM对比</title>
    <link href="http://blog.poetries.top/2017/01/14/js-and-jquery-dom-compare/"/>
    <id>http://blog.poetries.top/2017/01/14/js-and-jquery-dom-compare/</id>
    <published>2017-01-14T03:30:43.000Z</published>
    <updated>2017-06-11T07:22:47.749Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、创建元素节点"><a href="#一、创建元素节点" class="headerlink" title="一、创建元素节点"></a>一、创建元素节点</h3><hr>
<h4 id="1-1-原生JS创建元素节点"><a href="#1-1-原生JS创建元素节点" class="headerlink" title="1.1 原生JS创建元素节点"></a>1.1 原生<code>JS</code>创建元素节点</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</div></pre></td></tr></table></figure>
<h4 id="1-2-jQuery创建元素节点"><a href="#1-2-jQuery创建元素节点" class="headerlink" title="1.2 jQuery创建元素节点"></a>1.2 <code>jQuery</code>创建元素节点</h4><hr>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'&lt;p&gt;&lt;/p&gt;'</span>);<span class="string">`</span></div></pre></td></tr></table></figure>
<h3 id="二、创建并添加文本节点"><a href="#二、创建并添加文本节点" class="headerlink" title="二、创建并添加文本节点"></a>二、创建并添加文本节点</h3><hr>
<h4 id="2-1-原生JS创建文本节点"><a href="#2-1-原生JS创建文本节点" class="headerlink" title="2.1 原生JS创建文本节点"></a>2.1 原生JS创建文本节点</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="string">`document.createTextNode("Text Content");</span></div></pre></td></tr></table></figure>
<ul>
<li>通常创建文本节点和创建元素节点配合使用，比如：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> textEl = <span class="built_in">document</span>.createTextNode(<span class="string">"Hello World."</span>);</div><div class="line"><span class="keyword">var</span> pEl = <span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</div><div class="line">pEl.appendChild(textEl);</div></pre></td></tr></table></figure>
<h4 id="2-2-jQuery创建并添加文本节点："><a href="#2-2-jQuery创建并添加文本节点：" class="headerlink" title="2.2 jQuery创建并添加文本节点："></a>2.2 <code>jQuery</code>创建并添加文本节点：</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $p = $(<span class="string">'&lt;p&gt;Hello World.&lt;/p&gt;'</span>);</div></pre></td></tr></table></figure>
<h3 id="三、复制节点"><a href="#三、复制节点" class="headerlink" title="三、复制节点"></a>三、复制节点</h3><hr>
<h4 id="3-1-原生JS复制节点"><a href="#3-1-原生JS复制节点" class="headerlink" title="3.1 原生JS复制节点:"></a>3.1 原生<code>JS</code>复制节点:</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> newEl = pEl.cloneNode(<span class="literal">true</span>);  <span class="string">`</span></div></pre></td></tr></table></figure>
<ul>
<li><code>true</code>和<code>false</code>的区别：<ul>
<li><code>true</code> ：克隆整个<code>&#39;&lt;p&gt;Hello World.&lt;/p&gt;&#39;</code>节点</li>
<li><code>false</code>：只克隆<code>&#39;&lt;p&gt;&lt;/p&gt;&#39;</code> ，不克隆文本<code>Hello World.&#39;</code></li>
</ul>
</li>
</ul>
<h4 id="3-2-jQuery复制节点"><a href="#3-2-jQuery复制节点" class="headerlink" title="3.2 jQuery复制节点"></a>3.2 <code>jQuery</code>复制节点</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$newEl = $(<span class="string">'#pEl'</span>).clone(<span class="literal">true</span>);</div></pre></td></tr></table></figure>
<ul>
<li>注意：克隆节点要避免`ID重复</li>
</ul>
<h3 id="四、-插入节点"><a href="#四、-插入节点" class="headerlink" title="四、 插入节点"></a>四、 插入节点</h3><hr>
<h4 id="4-1-原生JS向子节点列表的末尾添加新的子节点"><a href="#4-1-原生JS向子节点列表的末尾添加新的子节点" class="headerlink" title="4.1 原生JS向子节点列表的末尾添加新的子节点"></a>4.1 原生JS向子节点列表的末尾添加新的子节点</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">El.appendChild(newNode);</div></pre></td></tr></table></figure>
<ul>
<li>原生JS在节点的已有子节点之前插入一个新的子节点：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">El.insertBefore(newNode, targetNode);</div></pre></td></tr></table></figure>
<h4 id="4-2-在jQuery中，插入节点的方法比原生JS多的多"><a href="#4-2-在jQuery中，插入节点的方法比原生JS多的多" class="headerlink" title="4.2 在jQuery中，插入节点的方法比原生JS多的多"></a>4.2 在jQuery中，插入节点的方法比原生JS多的多</h4><hr>
<ul>
<li>在匹配元素子节点列表结尾添加内容</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#El'</span>).append(<span class="string">'&lt;p&gt;Hello World.&lt;/p&gt;'</span>);</div></pre></td></tr></table></figure>
<ul>
<li>把匹配元素添加到目标元素子节点列表结尾</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'&lt;p&gt;Hello World.&lt;/p&gt;'</span>).appendTo(<span class="string">'#El'</span>);</div></pre></td></tr></table></figure>
<ul>
<li>在匹配元素子节点列表开头添加内容</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#El'</span>).prepend(<span class="string">'&lt;p&gt;Hello World.&lt;/p&gt;'</span>);</div></pre></td></tr></table></figure>
<ul>
<li>把匹配元素添加到目标元素子节点列表开头</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'&lt;p&gt;Hello World.&lt;/p&gt;'</span>).prependTo(<span class="string">'#El'</span>);</div></pre></td></tr></table></figure>
<ul>
<li>在匹配元素之前添加目标内容</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#El'</span>).before(<span class="string">'&lt;p&gt;Hello World.&lt;/p&gt;'</span>);</div></pre></td></tr></table></figure>
<ul>
<li>把匹配元素添加到目标元素之前</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'&lt;p&gt;Hello World.&lt;/p&gt;'</span>).insertBefore(<span class="string">'#El'</span>);</div></pre></td></tr></table></figure>
<ul>
<li>在匹配元素之后添加目标内容</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#El'</span>).after(<span class="string">'&lt;p&gt;Hello World.&lt;/p&gt;'</span>);</div></pre></td></tr></table></figure>
<ul>
<li>把匹配元素添加到目标元素之后</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'&lt;p&gt;Hello World.&lt;/p&gt;'</span>).insertAfter(<span class="string">'#El'</span>);</div></pre></td></tr></table></figure>
<h3 id="五、删除节点"><a href="#五、删除节点" class="headerlink" title="五、删除节点"></a>五、删除节点</h3><hr>
<h4 id="5-1-原生JS删除节点"><a href="#5-1-原生JS删除节点" class="headerlink" title="5.1 原生JS删除节点"></a>5.1 原生JS删除节点</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">El.parentNode.removeChild(El);</div></pre></td></tr></table></figure>
<h4 id="5-2-jQuery删除节点"><a href="#5-2-jQuery删除节点" class="headerlink" title="5.2 jQuery删除节点"></a>5.2 jQuery删除节点</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#El'</span>).remove();</div></pre></td></tr></table></figure>
<h3 id="六、替换节点"><a href="#六、替换节点" class="headerlink" title="六、替换节点"></a>六、替换节点</h3><hr>
<h4 id="6-1-原生JS替换节点"><a href="#6-1-原生JS替换节点" class="headerlink" title="6.1 原生JS替换节点"></a>6.1 原生JS替换节点</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">El.repalceChild(newNode, oldNode);</div></pre></td></tr></table></figure>
<ul>
<li>注意：<code>oldNode</code>必须是<code>parentEl</code>真实存在的一个子节点</li>
</ul>
<h4 id="6-2-jQuery替换节点"><a href="#6-2-jQuery替换节点" class="headerlink" title="6.2 jQuery替换节点"></a>6.2 jQuery替换节点</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'p'</span>).replaceWith(<span class="string">'&lt;p&gt;Hello World.&lt;/p&gt;'</span>);</div></pre></td></tr></table></figure>
<h3 id="七、设置属性-获取属性"><a href="#七、设置属性-获取属性" class="headerlink" title="七、设置属性/获取属性"></a>七、设置属性/获取属性</h3><hr>
<h4 id="7-1-原生JS设置属性-获取属性"><a href="#7-1-原生JS设置属性-获取属性" class="headerlink" title="7.1 原生JS设置属性/获取属性"></a>7.1 原生JS设置属性/获取属性</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">imgEl.setAttribute(<span class="string">"title"</span>, <span class="string">"logo"</span>);</div><div class="line">imgEl.getAttribute(<span class="string">"title"</span>);</div><div class="line">checkboxEl.checked = <span class="literal">true</span>;</div><div class="line">checkboxEl.checked;</div></pre></td></tr></table></figure>
<h4 id="7-2-jQuery设置属性-获取属性"><a href="#7-2-jQuery设置属性-获取属性" class="headerlink" title="7.2 jQuery设置属性/获取属性:"></a>7.2 jQuery设置属性/获取属性:</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#logo"</span>).attr(&#123;<span class="string">"title"</span>: <span class="string">"logo"</span>&#125;);</div><div class="line">$(<span class="string">"#logo"</span>).attr(<span class="string">"title"</span>);</div><div class="line">$(<span class="string">"#checkbox"</span>).prop(&#123;<span class="string">"checked"</span>: <span class="literal">true</span>&#125;);</div><div class="line">$(<span class="string">"#checkbox"</span>).prop(<span class="string">"checked"</span>);</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、创建元素节点&quot;&gt;&lt;a href=&quot;#一、创建元素节点&quot; class=&quot;headerlink&quot; title=&quot;一、创建元素节点&quot;&gt;&lt;/a&gt;一、创建元素节点&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;1-1-原生JS创建元素节点&quot;&gt;&lt;a href=&quot;#1-1-原生JS创建元素节点&quot; class=&quot;headerlink&quot; title=&quot;1.1 原生JS创建元素节点&quot;&gt;&lt;/a&gt;1.1 原生&lt;code&gt;JS&lt;/code&gt;创建元素节点&lt;/h4&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&quot;p&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;1-2-jQuery创建元素节点&quot;&gt;&lt;a href=&quot;#1-2-jQuery创建元素节点&quot; class=&quot;headerlink&quot; title=&quot;1.2 jQuery创建元素节点&quot;&gt;&lt;/a&gt;1.2 &lt;code&gt;jQuery&lt;/code&gt;创建元素节点&lt;/h4&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="DOM" scheme="http://blog.poetries.top/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>jQuery之DOM操作小结</title>
    <link href="http://blog.poetries.top/2017/01/14/jQuery-dom/"/>
    <id>http://blog.poetries.top/2017/01/14/jQuery-dom/</id>
    <published>2017-01-14T02:20:43.000Z</published>
    <updated>2017-06-11T07:22:47.749Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、过滤器"><a href="#一、过滤器" class="headerlink" title="一、过滤器"></a>一、过滤器</h3><hr>
<h4 id="1-匹配指定元素的父"><a href="#1-匹配指定元素的父" class="headerlink" title="1 匹配指定元素的父"></a>1 匹配指定元素的父</h4><hr>
<ul>
<li><code>elem.parent([exp])</code></li>
</ul>
<h4 id="2-匹配指定元素的子元素"><a href="#2-匹配指定元素的子元素" class="headerlink" title="2 匹配指定元素的子元素"></a>2 匹配指定元素的子元素</h4><hr>
<a id="more"></a>
<ul>
<li><code>elem.children([exp])</code></li>
</ul>
<h4 id="3-匹配指定元素的父、祖元素…"><a href="#3-匹配指定元素的父、祖元素…" class="headerlink" title="3 匹配指定元素的父、祖元素…"></a>3 匹配指定元素的父、祖元素…</h4><hr>
<ul>
<li><code>elem.parents([exp])</code></li>
</ul>
<h4 id="4-匹配指定元素的子、孙元素…"><a href="#4-匹配指定元素的子、孙元素…" class="headerlink" title="4 匹配指定元素的子、孙元素…"></a>4 匹配指定元素的子、孙元素…</h4><hr>
<ul>
<li><code>elem.find([exp])</code></li>
</ul>
<h4 id="5-匹配指定元素的后一个兄弟元素"><a href="#5-匹配指定元素的后一个兄弟元素" class="headerlink" title="5 匹配指定元素的后一个兄弟元素"></a>5 匹配指定元素的后一个兄弟元素</h4><hr>
<ul>
<li><code>elem.next([exp])</code></li>
</ul>
<h4 id="6-匹配指定元素的后面所有兄弟元素"><a href="#6-匹配指定元素的后面所有兄弟元素" class="headerlink" title="6 匹配指定元素的后面所有兄弟元素"></a>6 匹配指定元素的后面所有兄弟元素</h4><hr>
<ul>
<li><code>elem.nextAll([exp])</code></li>
</ul>
<h4 id="7-匹配指定元素的前一个兄弟元素"><a href="#7-匹配指定元素的前一个兄弟元素" class="headerlink" title="7 匹配指定元素的前一个兄弟元素"></a>7 匹配指定元素的前一个兄弟元素</h4><hr>
<ul>
<li><code>elem.prev([exp])</code></li>
</ul>
<h4 id="8-匹配指定元素的前面所有兄弟元素"><a href="#8-匹配指定元素的前面所有兄弟元素" class="headerlink" title="8 匹配指定元素的前面所有兄弟元素"></a>8 匹配指定元素的前面所有兄弟元素</h4><hr>
<ul>
<li><code>elem.prevAll([exp])</code></li>
</ul>
<h4 id="9-匹配指定元素的所有兄弟元素"><a href="#9-匹配指定元素的所有兄弟元素" class="headerlink" title="9 匹配指定元素的所有兄弟元素"></a>9 匹配指定元素的所有兄弟元素</h4><hr>
<ul>
<li><code>elem.siblings([exp])</code></li>
</ul>
<h4 id="10-匹配指定以外的元素"><a href="#10-匹配指定以外的元素" class="headerlink" title="10 匹配指定以外的元素"></a>10 匹配指定以外的元素</h4><hr>
<ul>
<li><code>elem.not(exp)</code></li>
</ul>
<h4 id="11-包括自身在内的全部元素"><a href="#11-包括自身在内的全部元素" class="headerlink" title="11 包括自身在内的全部元素"></a>11 包括自身在内的全部元素</h4><hr>
<ul>
<li><code>elem.andSelf()</code></li>
</ul>
<h4 id="12-返回指定索引值的元素"><a href="#12-返回指定索引值的元素" class="headerlink" title="12 返回指定索引值的元素"></a>12 返回指定索引值的元素</h4><hr>
<ul>
<li><code>elem.eq(index)</code></li>
</ul>
<h4 id="13-判断元素是否包含指定的类"><a href="#13-判断元素是否包含指定的类" class="headerlink" title="13 判断元素是否包含指定的类"></a>13 判断元素是否包含指定的类</h4><hr>
<ul>
<li><code>elem.hasClass(className)</code></li>
</ul>
<h3 id="二、文档处理"><a href="#二、文档处理" class="headerlink" title="二、文档处理"></a>二、文档处理</h3><hr>
<h4 id="1-在指定元素内的未尾追加一个子元素"><a href="#1-在指定元素内的未尾追加一个子元素" class="headerlink" title="1 在指定元素内的未尾追加一个子元素"></a>1 在指定元素内的未尾追加一个子元素</h4><hr>
<ul>
<li>语法 :<code>Elem.append(ele)</code></li>
</ul>
<h4 id="2-把元素的追加到指定父级元素内的末尾"><a href="#2-把元素的追加到指定父级元素内的末尾" class="headerlink" title="2 把元素的追加到指定父级元素内的末尾"></a>2 把元素的追加到指定父级元素内的末尾</h4><hr>
<ul>
<li>语法 : <code>ele.appendTo(Elem)</code></li>
<li>说明 : 要求<code>ele</code>必须为<code>JQuery</code>元素，可以通过<code>Elem.children</code>(‘:last’)引用</li>
</ul>
<h4 id="3-在指定元素内的开始添加一个子元素"><a href="#3-在指定元素内的开始添加一个子元素" class="headerlink" title="3 在指定元素内的开始添加一个子元素"></a>3 在指定元素内的开始添加一个子元素</h4><hr>
<ul>
<li>语法 : <code>Elem.prepend(ele)</code></li>
</ul>
<h4 id="4-把元素的加入指定父级元素内的开始"><a href="#4-把元素的加入指定父级元素内的开始" class="headerlink" title="4 把元素的加入指定父级元素内的开始"></a>4 把元素的加入指定父级元素内的开始</h4><hr>
<ul>
<li>语法 : <code>ele.prependTo(Elem)</code></li>
<li>说明 : 要求<code>ele</code>必须为<code>JQuery</code>元素，可以通过<code>Elem.children().eq(0)</code>引用</li>
</ul>
<h4 id="5-使元素逐一被指定的HTML标记包裹起来"><a href="#5-使元素逐一被指定的HTML标记包裹起来" class="headerlink" title="5 使元素逐一被指定的HTML标记包裹起来"></a>5 使元素逐一被指定的HTML标记包裹起来</h4><hr>
<ul>
<li>语法 : <code>Elem.wrap(Tag)</code></li>
<li>说明: <code>Tag</code>将成为元素的父元素，可以通过<code>Elem.parent()</code>引用</li>
</ul>
<h4 id="6-使元素集合被指定的HTML标记包裹起来"><a href="#6-使元素集合被指定的HTML标记包裹起来" class="headerlink" title="6 使元素集合被指定的HTML标记包裹起来"></a>6 使元素集合被指定的HTML标记包裹起来</h4><hr>
<ul>
<li>语法 :<code>Elem.wrapAll(Tag)</code></li>
<li>说明:<br><code>wrap</code>把每个子元素逐一都包裹起来，<code>wrapAll</code>是把所有的子元素作为整体包裹起来。</li>
</ul>
<h4 id="7-包裹指定元素的子元素，相当于在元素和子元素中间加了隔离层"><a href="#7-包裹指定元素的子元素，相当于在元素和子元素中间加了隔离层" class="headerlink" title="7 包裹指定元素的子元素，相当于在元素和子元素中间加了隔离层"></a>7 包裹指定元素的子元素，相当于在元素和子元素中间加了隔离层</h4><hr>
<ul>
<li>语法 : <code>elem.wrapInner(Tag)</code></li>
</ul>
<h4 id="8-在元素之后添加兄弟元素。新添加的元素可以通过elem-next-引用。"><a href="#8-在元素之后添加兄弟元素。新添加的元素可以通过elem-next-引用。" class="headerlink" title="8 在元素之后添加兄弟元素。新添加的元素可以通过elem.next() 引用。"></a>8 在元素之后添加兄弟元素。新添加的元素可以通过elem.next() 引用。</h4><hr>
<ul>
<li>语法 : <code>elem.after(ele)</code></li>
</ul>
<h4 id="9-在元素之前添加兄弟元素。新添加的元素可以通过elem-prev-引用。"><a href="#9-在元素之前添加兄弟元素。新添加的元素可以通过elem-prev-引用。" class="headerlink" title="9 在元素之前添加兄弟元素。新添加的元素可以通过elem.prev() 引用。"></a>9 在元素之前添加兄弟元素。新添加的元素可以通过elem.prev() 引用。</h4><hr>
<ul>
<li>语法 : <code>elem.before(ele)</code></li>
</ul>
<h4 id="10-将元素A移动到元素B之后"><a href="#10-将元素A移动到元素B之后" class="headerlink" title="10 将元素A移动到元素B之后"></a>10 将元素A移动到元素B之后</h4><hr>
<ul>
<li>语法 : <code>elA.insertAfter(elB)</code></li>
</ul>
<h4 id="11-将元素A移动到元素B之前"><a href="#11-将元素A移动到元素B之前" class="headerlink" title="11 将元素A移动到元素B之前"></a>11 将元素A移动到元素B之前</h4><hr>
<ul>
<li>语法 : <code>elA.insertBefore(elB)</code></li>
</ul>
<h4 id="12-清空元素的子节点-元素本身及其属性仍然存在"><a href="#12-清空元素的子节点-元素本身及其属性仍然存在" class="headerlink" title="12 清空元素的子节点(元素本身及其属性仍然存在)"></a>12 清空元素的子节点(元素本身及其属性仍然存在)</h4><hr>
<ul>
<li>语法 : <code>elem.empty()</code></li>
</ul>
<h4 id="13-从DOM中删除所有匹配的元素"><a href="#13-从DOM中删除所有匹配的元素" class="headerlink" title="13 从DOM中删除所有匹配的元素"></a>13 从DOM中删除所有匹配的元素</h4><hr>
<ul>
<li>语法 : <code>elems.remove([条件])</code></li>
</ul>
<h4 id="14-将元素A替换为B"><a href="#14-将元素A替换为B" class="headerlink" title="14 将元素A替换为B"></a>14 将元素A替换为B</h4><hr>
<ul>
<li>语法 : <code>elA.replaceWith(elB);</code>    </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、过滤器&quot;&gt;&lt;a href=&quot;#一、过滤器&quot; class=&quot;headerlink&quot; title=&quot;一、过滤器&quot;&gt;&lt;/a&gt;一、过滤器&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;1-匹配指定元素的父&quot;&gt;&lt;a href=&quot;#1-匹配指定元素的父&quot; class=&quot;headerlink&quot; title=&quot;1 匹配指定元素的父&quot;&gt;&lt;/a&gt;1 匹配指定元素的父&lt;/h4&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elem.parent([exp])&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-匹配指定元素的子元素&quot;&gt;&lt;a href=&quot;#2-匹配指定元素的子元素&quot; class=&quot;headerlink&quot; title=&quot;2 匹配指定元素的子元素&quot;&gt;&lt;/a&gt;2 匹配指定元素的子元素&lt;/h4&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="DOM" scheme="http://blog.poetries.top/tags/DOM/"/>
    
      <category term="jQuery" scheme="http://blog.poetries.top/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>javascript常用积累</title>
    <link href="http://blog.poetries.top/2017/01/14/js-snippets-summary/"/>
    <id>http://blog.poetries.top/2017/01/14/js-snippets-summary/</id>
    <published>2017-01-14T00:20:43.000Z</published>
    <updated>2017-06-11T07:22:47.753Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、JS动画与动作不一致解决"><a href="#一、JS动画与动作不一致解决" class="headerlink" title="一、JS动画与动作不一致解决:"></a>一、JS动画与动作不一致解决:</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(!$( <span class="string">"#handle"</span>).is(<span class="string">":animated"</span>))&#123;</div><div class="line">	<span class="comment">//判断元素是否处于动画状态</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="二、停止事件冒泡"><a href="#二、停止事件冒泡" class="headerlink" title="二、停止事件冒泡"></a>二、停止事件冒泡</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">event.stopPropagation();</div><div class="line">- 禁止JS报错</div><div class="line">	<span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="literal">true</span> ; </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">/*try to do*/</span></div><div class="line">&#125; <span class="keyword">catch</span>(e)&#123;</div><div class="line"><span class="comment">/*do this if try error */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="三、查看JS对象属性"><a href="#三、查看JS对象属性" class="headerlink" title="三、查看JS对象属性"></a>三、查看JS对象属性</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">var</span> res = <span class="string">''</span> ; </div><div class="line"><span class="keyword">var</span> obj = <span class="built_in">eval</span>( obj );</div><div class="line">	<span class="keyword">for</span>( <span class="keyword">var</span> p <span class="keyword">in</span> <span class="built_in">eval</span>( obj ) )&#123;</div><div class="line">		<span class="keyword">var</span> prop = p + <span class="string">':'</span> + obj[p] + <span class="string">'\n'</span> ; </div><div class="line">		res += prop ; </div><div class="line">	&#125;</div><div class="line">	alert( res );</div></pre></td></tr></table></figure>
<h4 id="四、页面刷新时禁用提交按钮"><a href="#四、页面刷新时禁用提交按钮" class="headerlink" title="四、页面刷新时禁用提交按钮"></a>四、页面刷新时禁用提交按钮</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	$(<span class="string">':submit'</span>).attr(<span class="string">'disabled'</span>,<span class="literal">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意</strong>：<code>Opera</code> 浏览器不支持，其他浏览器避免在同一页面中使用 <code>&quot;javascrpt:&quot;</code> 等伪协议</p>
<h4 id="五、获取事件"><a href="#五、获取事件" class="headerlink" title="五、获取事件"></a>五、获取事件</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getEvent = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> ieEvent = <span class="built_in">window</span>.event ; </div><div class="line">	<span class="keyword">var</span> ffEvent = <span class="built_in">arguments</span>.callee.caller.arguments[<span class="number">0</span>] ; </div><div class="line">	<span class="comment">//arguments.callee						当前执行函数</span></div><div class="line">	<span class="comment">//arguments.callee.caller				当前执行函数的调用者</span></div><div class="line">	<span class="comment">//arguments.callee.caller.arguments[0]	当前函数调用者的第一个参数</span></div><div class="line">	<span class="keyword">var</span> e = ieEvent || ffEvent ; </div><div class="line">	<span class="keyword">return</span> e ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>获取鼠标距离浏览器顶部 左侧的实际距离 兼容IE</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getXY</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</div><div class="line">	<span class="keyword">var</span> xx  = <span class="number">0</span>;</div><div class="line">	<span class="keyword">var</span> yy = <span class="number">0</span>;</div><div class="line">	<span class="keyword">if</span>(ev.pageX)&#123; <span class="comment">//iE9+</span></div><div class="line">		xx = ev.pageX;</div><div class="line">		yy = ev.pageY;</div><div class="line">	&#125;<span class="keyword">else</span>&#123; </div><div class="line">		<span class="comment">//IE678 clientX,clientY + scroll</span></div><div class="line">		<span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop || </div><div class="line">				   <span class="built_in">document</span>.body.scrollTop;<span class="comment">//IE9+</span></div><div class="line">		<span class="keyword">var</span> scrollLeft = <span class="built_in">document</span>.documentElement.scrollLeft || </div><div class="line">					<span class="built_in">document</span>.body.scrollLeft;<span class="comment">//IE9+     </span></div><div class="line">		xx = ev.clientX + scrollLeft;</div><div class="line">		yy = ev.clientY + scrollTop;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		<span class="attr">x</span>:xx,</div><div class="line">		<span class="attr">y</span>:yy</div><div class="line">	&#125;;</div><div class="line"></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="六、获取键盘码"><a href="#六、获取键盘码" class="headerlink" title="六、获取键盘码"></a>六、获取键盘码</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> getKCode = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> ieEvent = <span class="built_in">window</span>.event ; </div><div class="line">		<span class="keyword">var</span> ffEvent = <span class="built_in">arguments</span>.callee.caller.arguments[<span class="number">0</span>] ; </div><div class="line">		<span class="keyword">var</span> e = ieEvent || ffEvent ; </div><div class="line">		<span class="keyword">var</span> kCode = e.keyCode || e.which ;</div><div class="line">		<span class="keyword">return</span> kCode ;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="七、-鼠标滑入-滑出样式切换"><a href="#七、-鼠标滑入-滑出样式切换" class="headerlink" title="七、 鼠标滑入/滑出样式切换"></a>七、 鼠标滑入/滑出样式切换</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div"</span>).on(<span class="string">"mouseover mouseout"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="keyword">this</span>).toggleClass(<span class="string">"over"</span>);</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<h4 id="八、点击鼠标-显示-隐藏切换"><a href="#八、点击鼠标-显示-隐藏切换" class="headerlink" title="八、点击鼠标,显示/隐藏切换"></a>八、点击鼠标,显示/隐藏切换</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#panel h5.head"</span>).toggle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	$(<span class="keyword">this</span>).toggleClass(<span class="string">"highlight"</span>);</div><div class="line">	$(<span class="keyword">this</span>).next().toggle();</div><div class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	$(<span class="keyword">this</span>).toggleClass(<span class="string">"highlight"</span>);</div><div class="line">	$(<span class="keyword">this</span>).next().toggle();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="九、JS-调试"><a href="#九、JS-调试" class="headerlink" title="九、JS 调试"></a>九、JS 调试</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log() ;			<span class="comment">//打印变量</span></div><div class="line"><span class="built_in">console</span>.dir() ; 		<span class="comment">//打印对象</span></div><div class="line"><span class="built_in">console</span>.dirxml() ; 		<span class="comment">//打印节点</span></div><div class="line"><span class="built_in">console</span>.trace() ; 		<span class="comment">//打印函数调用轨迹</span></div><div class="line"><span class="built_in">window</span>.document.title = str;</div></pre></td></tr></table></figure>
<h4 id="十、为子元素集合绑定事件"><a href="#十、为子元素集合绑定事件" class="headerlink" title="十、为子元素集合绑定事件"></a>十、为子元素集合绑定事件</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"div"</span>).delegate(<span class="string">"button"</span>,<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	$(<span class="string">"p"</span>).slideToggle();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="十一、自定义IE浏览器渲染方式-解决IE10下JS或插件失效"><a href="#十一、自定义IE浏览器渲染方式-解决IE10下JS或插件失效" class="headerlink" title="十一、自定义IE浏览器渲染方式(解决IE10下JS或插件失效):"></a>十一、自定义<code>IE</code>浏览器渲染方式(解决<code>IE10</code>下<code>JS</code>或插件失效):</h4><hr>
<p>如果安装了<code>Chrome</code>内核，则使用<code>Chrome</code>内核来渲染页面<code>[chrome=1]</code>，如果未安装，则使用最高版本的IE内核进行渲染<code>[IE=edge]:</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h4 id="十二、注册事件"><a href="#十二、注册事件" class="headerlink" title="十二、注册事件"></a>十二、注册事件</h4><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 标准浏览器</span></div><div class="line">form1.addEventListener(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    e.preventDefault();		<span class="comment">//阻止浏览器默认动作</span></div><div class="line">	e.stopPropagation();		<span class="comment">//阻止事件流产生</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// IE8及更早版本IE浏览器</span></div><div class="line">form1.attachEvent(<span class="string">'submit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	event.cancelBubble = <span class="literal">true</span>; <span class="comment">//阻止浏览器默认动作--IE8及更早版本IE浏览器</span></div><div class="line">	event.returnValue = <span class="literal">false</span>; <span class="comment">//阻止事件流产生--IE8及更早版本IE浏览器</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、JS动画与动作不一致解决&quot;&gt;&lt;a href=&quot;#一、JS动画与动作不一致解决&quot; class=&quot;headerlink&quot; title=&quot;一、JS动画与动作不一致解决:&quot;&gt;&lt;/a&gt;一、JS动画与动作不一致解决:&lt;/h4&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!$( &lt;span class=&quot;string&quot;&gt;&quot;#handle&quot;&lt;/span&gt;).is(&lt;span class=&quot;string&quot;&gt;&quot;:animated&quot;&lt;/span&gt;))&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//判断元素是否处于动画状态&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="Snippet" scheme="http://blog.poetries.top/tags/Snippet/"/>
    
  </entry>
  
  <entry>
    <title>webpack学习总结(一)</title>
    <link href="http://blog.poetries.top/2017/01/13/webpack/"/>
    <id>http://blog.poetries.top/2017/01/13/webpack/</id>
    <published>2017-01-13T10:40:43.000Z</published>
    <updated>2017-06-11T07:22:47.753Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>声明 本教程整理于互联网</p>
</blockquote>
<p>先看一个例子</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">// 入口</span></div><div class="line">    entry: &#123;</div><div class="line">        <span class="string">'index'</span>: <span class="string">'./index.js'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 输出</span></div><div class="line">    output: &#123;</div><div class="line">        <span class="attr">path</span>: <span class="string">'./'</span>,</div><div class="line">        <span class="comment">/*</span></div><div class="line">            [name] 是 entry 中的 key</div><div class="line">            entry: &#123;</div><div class="line">                key: value</div><div class="line">            &#125;</div><div class="line">        */</div><div class="line">        filename: <span class="string">"[name].b.js"</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>module.exports 是 CommonJS 规范中定义一个文件对外接口的语法，<a href="webpack.config.js">webpack.config.js</a> 文件对外的接口是一个 object ，其中定义了一些配置参数。</p>
<a id="more"></a>
<h3 id="一、参数详解"><a href="#一、参数详解" class="headerlink" title="一、参数详解"></a>一、参数详解</h3><hr>
<h4 id="1-1-entry"><a href="#1-1-entry" class="headerlink" title="1.1 entry"></a>1.1 entry</h4><hr>
<p>最初 webpack 是为了构建 SPA (Single Page Application) ，<code>entry</code> 是『入口』配置。在 <code>entry</code> 中的文件才会被编译。</p>
<h4 id="1-2-output"><a href="#1-2-output" class="headerlink" title="1.2 output"></a>1.2 output</h4><hr>
<p><code>output</code> 控制构建后的文件的存放位置和命名。 <code>path</code> 定义所有构建后文件的所在目录，本例中构建到当前文件夹。</p>
<h4 id="1-3-filename"><a href="#1-3-filename" class="headerlink" title="1.3 filename"></a>1.3 filename</h4><hr>
<p><code>filename</code> 控制构建后文件的文件名</p>
<h4 id="1-4-源码和构建结果"><a href="#1-4-源码和构建结果" class="headerlink" title="1.4 源码和构建结果"></a>1.4 源码和构建结果</h4><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// index.js</span></div><div class="line"><span class="keyword">var</span> content = <span class="built_in">require</span>(<span class="string">"./content.js"</span>)</div><div class="line"></div><div class="line"><span class="built_in">document</span>.body.innerHTML = <span class="built_in">document</span>.body.innerHTML + content</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// content.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="string">"some string"</span></div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"https://github.com/nimojs/webpack-book/blob/gh-pages/1-modules/README.md"</span>&gt;</span>本例说明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index.b.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>建议尽量理解构建后的代码，这样有助于理解 <code>webpack</code></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/******/</span> (<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123; <span class="comment">// webpackBootstrap</span></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// The module cache</span></div><div class="line"><span class="comment">/******/</span> 	<span class="keyword">var</span> installedModules = &#123;&#125;;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// The require function</span></div><div class="line"><span class="comment">/******/</span> 	<span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// Check if module is in cache</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">if</span>(installedModules[moduleId])</div><div class="line"><span class="comment">/******/</span> 			<span class="keyword">return</span> installedModules[moduleId].exports;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// Create a new module (and put it into the cache)</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</div><div class="line"><span class="comment">/******/</span> 			exports: &#123;&#125;,</div><div class="line"><span class="comment">/******/</span> 			id: moduleId,</div><div class="line"><span class="comment">/******/</span> 			loaded: <span class="literal">false</span></div><div class="line"><span class="comment">/******/</span> 		&#125;;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// Execute the module function</span></div><div class="line"><span class="comment">/******/</span> 		modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// Flag the module as loaded</span></div><div class="line"><span class="comment">/******/</span> 		<span class="built_in">module</span>.loaded = <span class="literal">true</span>;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 		<span class="comment">// Return the exports of the module</span></div><div class="line"><span class="comment">/******/</span> 		<span class="keyword">return</span> <span class="built_in">module</span>.exports;</div><div class="line"><span class="comment">/******/</span> 	&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// expose the modules object (__webpack_modules__)</span></div><div class="line"><span class="comment">/******/</span> 	__webpack_require__.m = modules;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// expose the module cache</span></div><div class="line"><span class="comment">/******/</span> 	__webpack_require__.c = installedModules;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// __webpack_public_path__</span></div><div class="line"><span class="comment">/******/</span> 	__webpack_require__.p = <span class="string">""</span>;</div><div class="line"></div><div class="line"><span class="comment">/******/</span> 	<span class="comment">// Load entry module and return exports</span></div><div class="line"><span class="comment">/******/</span> 	<span class="keyword">return</span> __webpack_require__(<span class="number">0</span>);</div><div class="line"><span class="comment">/******/</span> &#125;)</div><div class="line"><span class="comment">/************************************************************************/</span></div><div class="line"><span class="comment">/******/</span> ([</div><div class="line"><span class="comment">/* 0 */</span></div><div class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">var</span> content = __webpack_require__(<span class="number">1</span>)</div><div class="line"></div><div class="line">	<span class="built_in">document</span>.body.innerHTML = <span class="built_in">document</span>.body.innerHTML + content</div><div class="line"></div><div class="line"><span class="comment">/***/</span> &#125;,</div><div class="line"><span class="comment">/* 1 */</span></div><div class="line"><span class="comment">/***/</span> <span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</div><div class="line"></div><div class="line">	<span class="built_in">module</span>.exports = <span class="string">"some string"</span></div><div class="line"></div><div class="line"><span class="comment">/***/</span> &#125;</div><div class="line"><span class="comment">/******/</span> ]);</div></pre></td></tr></table></figure>
<p>前面带 <code>/******/</code>的代码都是 <code>webpack</code>的模块化代码，它内置了一个模块加载器</p>
<p>模块 0 是 <code>index.js</code> 的代码，模块 1 是 <code>require(&quot;./content.js&quot;)</code> 的代码。如果你再  <code>require</code> 一个模块那么就会有模块 3。</p>
<h3 id="二、JS包含样式"><a href="#二、JS包含样式" class="headerlink" title="二、JS包含样式"></a>二、JS包含样式</h3><hr>
<p>安装时间可能会比较久</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> 安装所需 style-loader 和 css-loader</span></div><div class="line">npm install css-loader style-loader -D</div><div class="line"><span class="meta"></span></div><div class="line">#<span class="bash"> less 和 less-loader 可以选择不安装 （如果安装了请去掉 index.js 中引入 less 的注释）</span></div><div class="line">npm install less-loader -D</div><div class="line">npm install less -g</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --watch</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">entry</span>: &#123;</div><div class="line">        <span class="string">'index'</span>: <span class="string">'./index.js'</span></div><div class="line">    &#125;,    </div><div class="line">    <span class="attr">output</span>: &#123;</div><div class="line">        <span class="attr">path</span>: <span class="string">'./'</span>,</div><div class="line">        <span class="attr">filename</span>: <span class="string">"[name].b.js"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">module</span>: &#123;</div><div class="line">        <span class="attr">loaders</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</div><div class="line">                <span class="attr">loader</span>: <span class="string">"style!css"</span></div><div class="line">            &#125;,</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</div><div class="line">                <span class="attr">loader</span>: <span class="string">"style!css!less"</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>module.loaders</code> 定义 <code>require</code> 的模块代码会被如何编译。 <a href="http://webpack.github.io/docs/using-loaders.html" target="_blank" rel="external">官方文档 using-loaders</a></p>
<h4 id="2-1-module-loaders-test"><a href="#2-1-module-loaders-test" class="headerlink" title="2.1 module.loaders[].test"></a>2.1 module.loaders[].test</h4><hr>
<p><code>test</code> 参数是一个正则表达式，用于匹配模块。<code>&#39;./index.css&#39;.test(/\.css&amp;/)</code></p>
<h4 id="2-2-module-loaders-loader"><a href="#2-2-module-loaders-loader" class="headerlink" title="2.2 module.loaders[].loader"></a>2.2 module.loaders[].loader</h4><hr>
<p><code>loader</code> 参数定义被 <code>test</code> 匹配到的模块会执行哪些构建操作</p>
<p>本例中 .css 后缀的文件会被 <code>style-loader</code> 和 <code>css-loader</code> 构建</p>
<h4 id="2-3-require-时配置-loader"><a href="#2-3-require-时配置-loader" class="headerlink" title="2.3 require 时配置 loader"></a>2.3 require 时配置 loader</h4><hr>
<p>如果你不想在 webpack.config.js 配置，你还可以在 require 时单独定义一个文件会使用哪些 loader</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'!style!css!./index.css'</span>)</div></pre></td></tr></table></figure>
<h4 id="2-4-被嵌入-lt-head-gt"><a href="#2-4-被嵌入-lt-head-gt" class="headerlink" title="2.4 被嵌入 &lt;head&gt;"></a>2.4 被嵌入 <code>&lt;head&gt;</code></h4><hr>
<p>查看 <a href="http://nimojs.github.io/webpack-book/2-style/" target="_blank" rel="external">在线预览构建结果页面</a> 源码可以看到样式通过 JS 嵌入到 <code>&lt;head&gt;</code> 中使用的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"><span class="selector-tag">body</span> &#123;</span></div><div class="line">    <span class="attribute">background-color</span>:<span class="number">#ABCDEF</span>;</div><div class="line">&#125;<span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="三、JS包含图片"><a href="#三、JS包含图片" class="headerlink" title="三、JS包含图片"></a>三、JS包含图片</h3><hr>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install url-loader file-loader -D</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --watch</div></pre></td></tr></table></figure>
<blockquote>
<p>代码解释待补充</p>
</blockquote>
<h3 id="四、使用全局变量"><a href="#四、使用全局变量" class="headerlink" title="四、使用全局变量"></a>四、使用全局变量</h3><hr>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack -w</div></pre></td></tr></table></figure>
<h3 id="五、暴露全局变量"><a href="#五、暴露全局变量" class="headerlink" title="五、暴露全局变量"></a>五、暴露全局变量</h3><hr>
<blockquote>
<p>有些模块依赖全局变量 <code>windows.jQuery</code> 才能使用，可以通过 <a href="https://github.com/webpack/expose-loader" target="_blank" rel="external">expose-loader</a> 暴露全局变量</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install jquery --save</div><div class="line">npm install expose-loader -D</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack -w</div></pre></td></tr></table></figure>
<h3 id="六、提取单独样式文件"><a href="#六、提取单独样式文件" class="headerlink" title="六、提取单独样式文件"></a>六、提取单独样式文件</h3><hr>
<p>有时候我们需要编译单独的 CSS 文件，这就需要 <a href="https://github.com/webpack/extract-text-webpack-plugin" target="_blank" rel="external">extract-text-webpack-plugin</a> 插件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install extract-text-webpack-plugin -D</div><div class="line">npm install style-loader css-loader -D</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack -w</div></pre></td></tr></table></figure>
<h3 id="七、自动打包公用资源"><a href="#七、自动打包公用资源" class="headerlink" title="七、自动打包公用资源"></a>七、自动打包公用资源</h3><hr>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install jquery paging --save</div></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack -w</div></pre></td></tr></table></figure>
<h3 id="八、文件指纹-hash"><a href="#八、文件指纹-hash" class="headerlink" title="八、文件指纹 hash"></a>八、文件指纹 hash</h3><hr>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --watch</div></pre></td></tr></table></figure>
<h3 id="九、异步加载"><a href="#九、异步加载" class="headerlink" title="九、异步加载"></a>九、异步加载</h3><hr>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack --watch</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;声明 本教程整理于互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先看一个例子&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// webpack.config.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 入口&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    entry: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&#39;index&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;./index.js&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 输出&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    output: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;path&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;./&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;/*&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            [name] 是 entry 中的 key&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            entry: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                key: value&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        filename: &lt;span class=&quot;string&quot;&gt;&quot;[name].b.js&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;module.exports 是 CommonJS 规范中定义一个文件对外接口的语法，&lt;a href=&quot;webpack.config.js&quot;&gt;webpack.config.js&lt;/a&gt; 文件对外的接口是一个 object ，其中定义了一些配置参数。&lt;/p&gt;
    
    </summary>
    
      <category term="Build" scheme="http://blog.poetries.top/categories/Build/"/>
    
    
      <category term="webpack" scheme="http://blog.poetries.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>gulp学习总结篇</title>
    <link href="http://blog.poetries.top/2017/01/13/gulp/"/>
    <id>http://blog.poetries.top/2017/01/13/gulp/</id>
    <published>2017-01-13T10:20:43.000Z</published>
    <updated>2017-06-11T07:22:47.725Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>声明 本教程整理于互联网</p>
</blockquote>
<h2 id="一、gulp-入门简介"><a href="#一、gulp-入门简介" class="headerlink" title="一、gulp 入门简介"></a>一、gulp 入门简介</h2><hr>
<p><code>gulp</code> 是基于 <code>node</code> 实现<code>Web</code> 前端自动化开发的工具，利用它能够极大的提高开发效率。</p>
<p>在 Web 前端开发工作中有很多“重复工作”，比如压缩<code>CSS/JS</code>文件。而这些工作都是有规律的。找到这些规律，并编写 <code>gulp</code> 配置代码,让 <code>gulp</code> 自动执行这些“重复工作”。</p>
<a id="more"></a>
<ul>
<li>将规律转换为 <code>gulp</code> 代码</li>
</ul>
<ul>
<li>现有目录结构如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">└── js/</div><div class="line">    └── a.js</div></pre></td></tr></table></figure>
<h3 id="1-1-规律"><a href="#1-1-规律" class="headerlink" title="1.1 规律"></a>1.1 规律</h3><hr>
<ul>
<li>找到 <code>js/</code>目录下的所有 .<code>js</code> 文件</li>
<li>压缩这些 <code>js</code> 文件</li>
<li>将压缩后的代码另存在 <code>dist/js/</code> 目录下</li>
</ul>
<h3 id="1-2-编写-gulp-代码"><a href="#1-2-编写-gulp-代码" class="headerlink" title="1.2 编写 gulp 代码"></a>1.2 编写 <code>gulp</code> 代码</h3><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 压缩 JavaScript 文件</span></div><div class="line">gulp.task(<span class="string">'script'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到</span></div><div class="line">    gulp.src(<span class="string">'js/*.js'</span>)</div><div class="line">    <span class="comment">// 2. 压缩</span></div><div class="line">        .pipe(uglify())</div><div class="line">    <span class="comment">// 3. 另存</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/js'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="1-3-代码执行结果"><a href="#1-3-代码执行结果" class="headerlink" title="1.3 代码执行结果"></a>1.3 代码执行结果</h3><hr>
<p>代码执行后文件结构</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">└── js/</div><div class="line">│   └── a.js</div><div class="line">└── dist/</div><div class="line">    └── js/</div><div class="line">        └── a.js</div></pre></td></tr></table></figure>
<p>a.js 压缩前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function demo (msg) &#123;</div><div class="line">    alert(&apos;--------\r\n&apos; + msg + &apos;\r\n--------&apos;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">demo(&apos;Hi&apos;)</div></pre></td></tr></table></figure></p>
<p>a.js 压缩后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">function demo(n)&#123;alert(&quot;--------\r\n&quot;+n+&quot;\r\n--------&quot;)&#125;demo(&quot;Hi&quot;);</div></pre></td></tr></table></figure></p>
<p>此时 <code>dist/js</code> 目录下的 <code>.js</code> 文件都是压缩后的版本。</p>
<p>你还可以监控 <code>js/</code> 目录下的 js 文件，当某个文件被修改时，自动压缩修改文件。启动 gulp 后就可以让它帮助你自动构建 Web 项目。</p>
<hr>
<p><code>gulp</code> 还可以做很多事，例如：</p>
<ol>
<li>压缩<code>CSS</code></li>
<li>压缩图片</li>
<li>编译<code>Sass/LESS</code></li>
<li>编译<code>CoffeeScript</code></li>
<li><code>markdown</code>转换为 <code>html</code></li>
</ol>
<h2 id="二、安装-Node-和-gulp"><a href="#二、安装-Node-和-gulp" class="headerlink" title="二、安装 Node 和 gulp"></a>二、安装 Node 和 gulp</h2><hr>
<p><code>gulp</code> 是基于 <code>node</code> 实现的，那么我们就需要先安装 node。</p>
<blockquote>
<p>Node 是一个基于Chrome JavaScript V8引擎建立的一个平台，可以利用它实现 Web服务，做类似PHP的事。</p>
</blockquote>
<p>打开 <a href="https://nodejs.org/" target="_blank" rel="external">https://nodejs.org/</a> 点击绿色的 <strong>INSTALL</strong> 按钮下载安装 node。</p>
<h3 id="2-1-命令行"><a href="#2-1-命令行" class="headerlink" title="2.1 命令行"></a>2.1 命令行</h3><hr>
<p>在 <code>Windows</code> 中可按 <code>&lt;kbd&gt;</code>徽标键<code>&lt;/kbd&gt;</code>（alt键左边）+ <kbd>R</kbd> 打开输入 <code>cmd</code> + <kbd>Enter</kbd> 打开命令行。</p>
<h3 id="2-2-终端-Mac"><a href="#2-2-终端-Mac" class="headerlink" title="2.2 终端(Mac)"></a>2.2 终端(Mac)</h3><hr>
<p>打开 Launchpad（像火箭一样的图标），在屏幕上方搜索框中输入 <code>终端</code> + <kbd>Enter</kbd> 打开终端。</p>
<h3 id="2-3-查看-node-版本号"><a href="#2-3-查看-node-版本号" class="headerlink" title="2.3 查看 node 版本号"></a>2.3 查看 node 版本号</h3><hr>
<p>在终端/命令行中输入 <code>node -v</code> 检测<code>node</code>是否安装成功，安装成功会显示出<code>node</code> 的版本号。</p>
<h3 id="2-4-跳转目录"><a href="#2-4-跳转目录" class="headerlink" title="2.4 跳转目录"></a>2.4 跳转目录</h3><hr>
<p>终端/命令行 中可使用 <code>cd 目录名</code> 跳转至指定目录，Mac 中还可以使用 <code>ls</code> 查看当前目录下的文件列表。</p>
<h3 id="2-5-Windows"><a href="#2-5-Windows" class="headerlink" title="2.5 Windows"></a>2.5 Windows</h3><hr>
<p><code>Windows</code> 下可使用如下命令跳转至指定目录：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 跳转至 C 盘根目录</div><div class="line">cd c:\</div><div class="line">// 跳转至当前目录的 demo 文件夹</div><div class="line">cd demo</div><div class="line">// 跳转至上一级</div><div class="line">cd ..</div></pre></td></tr></table></figure>
<h3 id="2-6-Mac"><a href="#2-6-Mac" class="headerlink" title="2.6 Mac"></a>2.6 Mac</h3><hr>
<p><code>Mac</code>中建议只在 <code>Documents</code>目录下进行文件操作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 跳转至文档目录</div><div class="line">cd /Users/你的用户名/Documents/</div><div class="line">// 或第一次打开终端时直接输入</div><div class="line">cd Documents</div><div class="line">// 查看目录下文件列表</div><div class="line">ls</div><div class="line">// 创建文件夹</div><div class="line">mkdir demo</div><div class="line">// 跳转至当前目录下的 demo 文件夹</div><div class="line">cd demo</div><div class="line">// 跳转至上级目录</div><div class="line">cd ..</div></pre></td></tr></table></figure>
<h3 id="2-7-退出运行状态"><a href="#2-7-退出运行状态" class="headerlink" title="2.7 退出运行状态"></a>2.7 退出运行状态</h3><hr>
<p>如果你在命令行中启动了一些一直运行的命令，你的命令行会进入“运行”状态，此时你不可以在命令行进行其他操作。可通过 <code>Ctrl + C</code> 停止 gulp。（Mac 中使用 <code>control + C</code>）</p>
<p>后面的章节中如果代码中存在 <code>gulp.watch</code> 并在命令行运行了 <code>gulp</code> 则需要使用 <code>Ctrl + C</code> 退出任务。</p>
<h3 id="2-8-npm-模块管理器"><a href="#2-8-npm-模块管理器" class="headerlink" title="2.8 npm 模块管理器"></a>2.8 npm 模块管理器</h3><hr>
<p>如果你了解 <code>npm</code> 则跳过此章节</p>
<p>若你不了解npm 请阅读 <a href="http://javascript.ruanyifeng.com/nodejs/npm.html" target="_blank" rel="external">npm模块管理器</a></p>
<h3 id="2-9-安装-gulp"><a href="#2-9-安装-gulp" class="headerlink" title="2.9 安装 gulp"></a>2.9 安装 <code>gulp</code></h3><hr>
<p><code>npm</code> 是 node<code>` 的包管理工具，可以利用它安装</code>gulp<code>所需的包。（在安装</code>node<code>时已经自动安装了</code>npm`）</p>
<p>在命令行输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g gulp</div></pre></td></tr></table></figure>
<p>若一直没安装成功，请<a href="https://github.com/nimojs/blog/issues/20" target="_blank" rel="external">使用 cnpm 安装</a>(npm的国内加速镜像)</p>
<p>意思是：使用 <code>npm</code> 安装全局性的(<code>-g</code>) gulp 包。</p>
<blockquote>
<p>如果你安装失败，请输入<code>sudo npm install -g gulp</code>使用管理员权限安装。（可能会要求输入密码）</p>
</blockquote>
<p>安装时请注意命令行的提示信息，安装完成后可在命令行输入 <code>gulp -v</code> 以确认安装成功。</p>
<p>至此，我们完成了准备工作。接着让 <code>gulp</code>开始帮我们干活吧！</p>
<h2 id="三、使用-gulp-压缩-JS"><a href="#三、使用-gulp-压缩-JS" class="headerlink" title="三、使用 gulp 压缩 JS"></a>三、使用 gulp 压缩 JS</h2><hr>
<p>压缩<code>js</code> 代码可降低 <code>js</code> 文件大小，提高页面打开速度。在不利用 gulp 时我们需要通过各种工具手动完成压缩工作。</p>
<p>所有的 <code>gulp</code> 代码编写都可以看做是将规律转化为代码的过程。</p>
<ul>
<li><strong>规律</strong></li>
</ul>
<p>找到 <code>js/</code> 目录下的所有<code>js</code> 文件，压缩它们，将压缩后的文件存放在 <code>dist/js/</code> 目录下。</p>
<ul>
<li><code>gulp</code>  代码</li>
</ul>
<p><code>gulp</code>  的所有配置代码都写在 <code>gulpfile.js</code> 文件。</p>
<h3 id="3-1-新建一个-gulpfile-js-文件"><a href="#3-1-新建一个-gulpfile-js-文件" class="headerlink" title="3.1 新建一个 gulpfile.js 文件"></a>3.1 新建一个 <code>gulpfile.js</code> 文件</h3><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chapter2</div><div class="line">└── gulpfile.js</div></pre></td></tr></table></figure>
<h3 id="3-2-在-gulpfile-js-中编写代码"><a href="#3-2-在-gulpfile-js-中编写代码" class="headerlink" title="3.2 在 gulpfile.js 中编写代码"></a>3.2 在 <code>gulpfile.js</code> 中编写代码</h3><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p><code>require()</code> 是 node （CommonJS）中获取模块的语法。</p>
<p>在 gulp 中你只需要理解 <code>require()</code> 可以获取模块。</p>
</blockquote>
<hr>
<h3 id="3-3-获取-gulp-uglify-组件"><a href="#3-3-获取-gulp-uglify-组件" class="headerlink" title="3.3 获取 gulp-uglify 组件"></a>3.3 获取 <code>gulp-uglify</code> 组件</h3><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 uglify 模块（用于压缩 JS）</span></div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</div></pre></td></tr></table></figure>
<hr>
<h3 id="3-4-创建压缩任务"><a href="#3-4-创建压缩任务" class="headerlink" title="3.4 创建压缩任务"></a>3.4 创建压缩任务</h3><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 压缩 js 文件</span></div><div class="line"><span class="comment">// 在命令行使用 gulp script 启动此任务</span></div><div class="line">gulp.task(<span class="string">'script'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到文件</span></div><div class="line">    gulp.src(<span class="string">'js/*.js'</span>)</div><div class="line">    <span class="comment">// 2. 压缩文件</span></div><div class="line">        .pipe(uglify())</div><div class="line">    <span class="comment">// 3. 另存压缩后的文件</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/js'</span>))</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ul>
<li><code>gulp.task(name, fn)</code> - 定义任务，第一个参数是任务名，第二个参数是任务内容。</li>
<li><code>gulp.src(path)</code> - 选择文件，传入参数是文件路径。</li>
<li><code>gulp.dest(path)</code> - 输出文件</li>
<li><code>gulp.pipe()</code> - 管道，你可以暂时将 pipe 理解为将操作加入执行队列</li>
</ul>
<p>参考：<a href="http://www.gulpjs.com.cn/docs/api/" target="_blank" rel="external">gulp API文档</a></p>
<hr>
<h3 id="3-5-跳转至-gulpfile-js-所在目录"><a href="#3-5-跳转至-gulpfile-js-所在目录" class="headerlink" title="3.5 跳转至 gulpfile.js 所在目录"></a>3.5 跳转至 <code>gulpfile.js</code> 所在目录</h3><hr>
<p>打开命令行使用 <code>cd</code> 命令跳转至 <code>gulpfile.js</code> 文件所在目录。</p>
<p>例如我的 <code>gulpfile.js</code> 文件保存在 <code>C:\gulp-book\demo\chapter2\gulpfile.js</code>。</p>
<p>那么就需要在命令行输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd C:\gulp-book\demo\chapter2</div></pre></td></tr></table></figure></p>
<blockquote>
<p>Mac 用户可使用 <code>cd Documents/gulp-book/demo/chapter2/</code> 跳转</p>
</blockquote>
<hr>
<h3 id="3-6-使用命令行运行-script-任务"><a href="#3-6-使用命令行运行-script-任务" class="headerlink" title="3.6 使用命令行运行 script 任务"></a>3.6 使用命令行运行 script 任务</h3><hr>
<p>在控制台输入 <code>gulp 任务名</code> 可运行任务，此处我们输入 <code>gulp script</code> 回车。</p>
<p>注意：输入 <code>gulp script</code> 后命令行将会提示错误信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 在命令行输入</div><div class="line">gulp script</div><div class="line"></div><div class="line">Error: Cannot find module &apos;gulp-uglify&apos;</div><div class="line">    at Function.Module._resolveFilename (module.js:338:15)</div><div class="line">    at Function.Module._load (module.js:280:25)</div></pre></td></tr></table></figure></p>
<p><code>Cannot find module &#39;gulp-uglify&#39;</code> 没有找到 <code>gulp-uglify</code> 模块。</p>
<hr>
<h3 id="3-7-安装-gulp-uglify-模块"><a href="#3-7-安装-gulp-uglify-模块" class="headerlink" title="3.7 安装 gulp-uglify 模块"></a>3.7 安装 <code>gulp-uglify</code> 模块</h3><hr>
<p>因为我们并没有安装 <code>gulp-uglify</code> 模块到本地，所以找不到此模块。</p>
<p>使用 npm 安装 <code>gulp-uglify</code> 到本地</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-uglify</div></pre></td></tr></table></figure>
<p>安装成功后你会看到如下信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp-uglify@1.1.0 node_modules/gulp-uglify</div><div class="line">├── deepmerge@0.2.7</div><div class="line">├── uglify-js@2.4.16 (uglify-to-browserify@1.0.2, async@0.2.10, source-map@0.1.34, optimist@0.3.7)</div><div class="line">├── vinyl-sourcemaps-apply@0.1.4 (source-map@0.1.43)</div><div class="line">├── through2@0.6.3 (xtend@4.0.0, readable-stream@1.0.33)</div><div class="line">└── gulp-util@3.0.4 (array-differ@1.0.0, beeper@1.0.0, array-uniq@1.0.2, object-assign@2.0.0, lodash._reinterpolate@3.0.0, lodash._reescape@3.0.0, lodash._reevaluate@3.0.0, replace-ext@0.0.1, minimist@1.1.1, chalk@1.0.0, lodash.template@3.3.2, vinyl@0.4.6, multipipe@0.1.2, dateformat@1.0.11)</div><div class="line">chapter2 $</div></pre></td></tr></table></figure></p>
<p>在你的文件夹中会新增一个 <code>node_modules</code> 文件夹，这里面存放着 npm 安装的模块。</p>
<p>目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">├── gulpfile.js</div><div class="line">└── node_modules</div><div class="line">	└── gulp-uglify</div></pre></td></tr></table></figure></p>
<p>接着输入 <code>gulp script</code> 执行任务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gulp script</div><div class="line">[13:34:57] Using gulpfile ~/Documents/code/gulp-book/demo/chapter2/gulpfile.js</div><div class="line">[13:34:57] Starting &apos;script&apos;...</div><div class="line">[13:34:57] Finished &apos;script&apos; after 6.13 ms</div></pre></td></tr></table></figure>
<hr>
<h3 id="3-8-编写-js-文件"><a href="#3-8-编写-js-文件" class="headerlink" title="3.8 编写 js 文件"></a>3.8 编写 js 文件</h3><hr>
<p>我们发现 gulp 没有进行任何压缩操作。因为没有js这个目录，也没有 js 目录下的 <code>.js</code> 后缀文件。</p>
<p>创建 <code>a.js</code> 文件，并编写如下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// a.js</div><div class="line">function demo (msg) &#123;</div><div class="line">    alert(&apos;--------\r\n&apos; + msg + &apos;\r\n--------&apos;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">demo(&apos;Hi&apos;)</div></pre></td></tr></table></figure>
<p>目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">├── gulpfile.js</div><div class="line">├──  js</div><div class="line">│	└── a.js</div><div class="line">└── node_modules</div><div class="line">	└── gulp-uglify</div></pre></td></tr></table></figure></p>
<p>接着在命令行输入 <code>gulp script</code> 执行任务</p>
<p>gulp 会在命令行当前目录下创建 <code>dist/js/</code> 文件夹，并创建压缩后的 <code>a.js</code> 文件。</p>
<p>目录结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">├── gulpfile.js</div><div class="line">├──  js</div><div class="line">│	└── a.js</div><div class="line">├──  dist</div><div class="line">│	└── js</div><div class="line">│		└── a.js</div><div class="line">└── node_modules</div><div class="line">	└── gulp-uglify</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/nimojs/gulp-book/blob/master/demo/chapter2/dist/js/a.js" target="_blank" rel="external">dist/js/a.js</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">n</span>)</span>&#123;alert(<span class="string">"--------\r\n"</span>+n+<span class="string">"\r\n--------"</span>)&#125;demo(<span class="string">"Hi"</span>);</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="3-9-检测代码修改自动执行任务"><a href="#3-9-检测代码修改自动执行任务" class="headerlink" title="3.9 检测代码修改自动执行任务"></a>3.9 检测代码修改自动执行任务</h3><hr>
<p><code>js/a.js</code>一旦有修改 就必须重新在命令行输入 <code>gulp script</code> ，这很麻烦。</p>
<p>可以使用 <code>gulp.watch(src, fn)</code> 检测指定目录下文件的修改后执行任务。</p>
<p>在 <code>gulpfile.js</code> 中编写如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 监听文件修改，当文件被修改则执行 script 任务</div><div class="line">gulp.watch(&apos;js/*.js&apos;, [&apos;script&apos;]);</div></pre></td></tr></table></figure></p>
<p>但是没有命令可以运行 <code>gulp.watch()</code>，需要将 <code>gulp.watch()</code> 包含在一个任务中。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 在命令行使用 gulp auto 启动此任务</div><div class="line">gulp.task(&apos;auto&apos;, function () &#123;</div><div class="line">    // 监听文件修改，当文件被修改则执行 script 任务</div><div class="line">    gulp.watch(&apos;js/*.js&apos;, [&apos;script&apos;])</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>接着在命令行输入 <code>gulp auto</code>，自动监听 <code>js/*.js</code> 文件的修改后压缩js。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$gulp auto</div><div class="line">[21:09:45] Using gulpfile ~/Documents/code/gulp-book/demo/chapter2/gulpfile.js</div><div class="line">[21:09:45] Starting &apos;auto&apos;...</div><div class="line">[21:09:45] Finished &apos;auto&apos; after 9.19 ms</div></pre></td></tr></table></figure>
<p>此时修改 <code>js/a.js</code> 中的代码并保存。命令行将会出现提示，表示检测到文件修改并压缩文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[21:11:01] Starting &apos;script&apos;...</div><div class="line">[21:11:01] Finished &apos;script&apos; after 2.85 ms</div></pre></td></tr></table></figure>
<p>至此，我们完成了 gulp 压缩 js 文件的自动化代码编写。</p>
<p><strong>注意：</strong>使用 <code>gulp.watch</code> 后你的命令行会进入“运行”状态，此时你不可以在命令行进行其他操作。可通过 <code>Ctrl + C</code> 停止 gulp。</p>
<blockquote>
<p>Mac 下使用 <code>control + C</code> 停止 gulp</p>
</blockquote>
<h3 id="3-10-使用-gulp-task-‘default’-fn-定义默认任务"><a href="#3-10-使用-gulp-task-‘default’-fn-定义默认任务" class="headerlink" title="3.10 使用 gulp.task(‘default’, fn) 定义默认任务"></a>3.10 使用 gulp.task(‘default’, fn) 定义默认任务</h3><hr>
<p>增加如下代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'script'</span>, <span class="string">'auto'</span>]);</div></pre></td></tr></table></figure>
<p>此时你可以在命令行直接输入 <code>gulp</code> +回车，运行 <code>script</code> 和 <code>auto</code> 任务。</p>
<p>最终代码如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 获取 uglify 模块（用于压缩 JS）</span></div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 压缩 js 文件</span></div><div class="line"><span class="comment">// 在命令行使用 gulp script 启动此任务</span></div><div class="line">gulp.task(<span class="string">'script'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到文件</span></div><div class="line">    gulp.src(<span class="string">'js/*.js'</span>)</div><div class="line">    <span class="comment">// 2. 压缩文件</span></div><div class="line">        .pipe(uglify())</div><div class="line">    <span class="comment">// 3. 另存压缩后的文件</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/js'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 在命令行使用 gulp auto 启动此任务</span></div><div class="line">gulp.task(<span class="string">'auto'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 监听文件修改，当文件被修改则执行 script 任务</span></div><div class="line">    gulp.watch(<span class="string">'js/*.js'</span>, [<span class="string">'script'</span>])</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 使用 gulp.task('default') 定义默认任务</span></div><div class="line"><span class="comment">// 在命令行使用 gulp 启动 script 任务和 auto 任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'script'</span>, <span class="string">'auto'</span>])</div></pre></td></tr></table></figure>
<p>去除注释后，你会发现只需要 11 行代码就可以让 gulp 自动监听 js 文件的修改后压缩代码。但是还有还有一些性能问题和缺少容错性，将在后面的章节详细说明。</p>
<p>你可以访问 <a href="https://github.com/terinjokes/gulp-uglify" target="_blank" rel="external">gulp-uglify</a> 以查看更多用法。</p>
<h2 id="四、使用-gulp-压缩-CSS"><a href="#四、使用-gulp-压缩-CSS" class="headerlink" title="四、使用 gulp 压缩 CSS"></a>四、使用 gulp 压缩 CSS</h2><hr>
<p>压缩 css 代码可降低 css 文件大小，提高页面打开速度。</p>
<p>我们接着将规律转换为 gulp 代码</p>
<ul>
<li><strong>规律</strong></li>
</ul>
<p>找到 <code>css/</code> 目录下的所有 css 文件，压缩它们，将压缩后的文件存放在 <code>dist/css/</code> 目录下。</p>
<h3 id="4-1-安装-gulp-minify-css模块"><a href="#4-1-安装-gulp-minify-css模块" class="headerlink" title="4.1 安装 gulp-minify-css模块"></a>4.1 安装 gulp-minify-css模块</h3><hr>
<p>提示：你需要使用命令行的 <code>cd</code> 切换到对应目录后进行安装操作。</p>
<p>在命令行输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-minify-css</div></pre></td></tr></table></figure>
<p>安装成功后你会看到如下信息：(安装时间可能会比较长)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp-minify-css@1.0.0 node_modules/gulp-minify-css</div><div class="line">├── object-assign@2.0.0</div><div class="line">├── vinyl-sourcemaps-apply@0.1.4 (source-map@0.1.43)</div><div class="line">├── clean-css@3.1.8 (commander@2.6.0, source-map@0.1.43)</div><div class="line">├── through2@0.6.3 (xtend@4.0.0, readable-stream@1.0.33)</div><div class="line">├── vinyl-bufferstream@1.0.1 (bufferstreams@1.0.1)</div><div class="line">└── gulp-util@3.0.4 (array-differ@1.0.0, beeper@1.0.0, array-uniq@1.0.2, lodash._reescape@3.0.0, lodash._reinterpolate@3.0.0, lodash._reevaluate@3.0.0, replace-ext@0.0.1, minimist@1.1.1, multipipe@0.1.2, vinyl@0.4.6, chalk@1.0.0, lodash.template@3.3.2, dateformat@1.0.11)</div></pre></td></tr></table></figure>
<h3 id="4-2-参照-使用-gulp-压缩-JS-创建-gulpfile-js-文件编写代码"><a href="#4-2-参照-使用-gulp-压缩-JS-创建-gulpfile-js-文件编写代码" class="headerlink" title="4.2 参照 [使用 gulp 压缩 JS]创建 gulpfile.js 文件编写代码"></a>4.2 参照 [使用 gulp 压缩 JS]创建 <code>gulpfile.js</code> 文件编写代码</h3><hr>
<p>在对应目录创建 <code>gulpfile.js</code> 文件并写入如下内容：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 获取 minify-css 模块（用于压缩 CSS）</span></div><div class="line"><span class="keyword">var</span> minifyCSS = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 压缩 css 文件</span></div><div class="line"><span class="comment">// 在命令行使用 gulp css 启动此任务</span></div><div class="line">gulp.task(<span class="string">'css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到文件</span></div><div class="line">    gulp.src(<span class="string">'css/*.css'</span>)</div><div class="line">    <span class="comment">// 2. 压缩文件</span></div><div class="line">        .pipe(minifyCSS())</div><div class="line">    <span class="comment">// 3. 另存为压缩文件</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/css'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 在命令行使用 gulp auto 启动此任务</span></div><div class="line">gulp.task(<span class="string">'auto'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 监听文件修改，当文件被修改则执行 css 任务</span></div><div class="line">    gulp.watch(<span class="string">'css/*.css'</span>, [<span class="string">'css'</span>])</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 使用 gulp.task('default') 定义默认任务</span></div><div class="line"><span class="comment">// 在命令行使用 gulp 启动 css 任务和 auto 任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'css'</span>, <span class="string">'auto'</span>])</div></pre></td></tr></table></figure>
<p>你可以访问 <a href="https://github.com/jonathanepollack/gulp-minify-css" target="_blank" rel="external">gulp-minify-css</a> 以查看更多用法。</p>
<hr>
<h3 id="4-3-创建-css-文件"><a href="#4-3-创建-css-文件" class="headerlink" title="4.3 创建 css 文件"></a>4.3 创建 css 文件</h3><hr>
<p>在 <code>gulpfile.js</code> 对应目录创建 <code>css</code> 文件夹，并在 <code>css/</code> 目录下创建 <code>a.css</code> 文件。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* a.css */</span></div><div class="line"><span class="selector-tag">body</span> <span class="selector-tag">a</span>&#123;</div><div class="line">    <span class="attribute">color</span>:pink;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h3 id="4-4-运行-gulp-查看效果"><a href="#4-4-运行-gulp-查看效果" class="headerlink" title="4.4 运行 gulp 查看效果"></a>4.4 运行 gulp 查看效果</h3><hr>
<p>在命令行输入 <code>gulp</code> +回车</p>
<p>你将看到命令行出现如下提示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">gulp</div><div class="line">[17:01:19] Using gulpfile ~/Documents/code/gulp-book/demo/chapter3/gulpfile.js</div><div class="line">[17:01:19] Starting &apos;css&apos;...</div><div class="line">[17:01:19] Finished &apos;css&apos; after 6.21 ms</div><div class="line">[17:01:19] Starting &apos;auto&apos;...</div><div class="line">[17:01:19] Finished &apos;auto&apos; after 5.42 ms</div><div class="line">[17:01:19] Starting &apos;default&apos;...</div><div class="line">[17:01:19] Finished &apos;default&apos; after 5.71 μs</div></pre></td></tr></table></figure>
<p>gulp 会创建 <code>dist/css</code> 目录，并创建 <code>a.css</code> 文件，此文件存放压缩后的 css 代码。<br><a href="https://github.com/nimojs/gulp-book/blob/master/demo/chapter3/dist/css/a.css" target="_blank" rel="external">dist/css/a.css</a></p>
<h2 id="五、使用-gulp-压缩图片"><a href="#五、使用-gulp-压缩图片" class="headerlink" title="五、使用 gulp 压缩图片"></a>五、使用 gulp 压缩图片</h2><hr>
<p>压缩 图片文件可降低文件大小，提高图片加载速度。</p>
<p>找到规律转换为 gulp 代码</p>
<ul>
<li><strong>规律</strong></li>
</ul>
<p>找到 <code>images/</code> 目录下的所有文件，压缩它们，将压缩后的文件存放在 <code>dist/images/</code> 目录下。</p>
<h3 id="5-1-安装-gulp-imagemin-模块"><a href="#5-1-安装-gulp-imagemin-模块" class="headerlink" title="5.1 安装 gulp-imagemin 模块"></a>5.1 安装 gulp-imagemin 模块</h3><hr>
<p>提示：你需要使用命令行的 <code>cd</code> 切换至对应目录再进行安装操作和 gulp 启动操作。</p>
<p>在命令行输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-imagemin</div></pre></td></tr></table></figure>
<p>安装成功后你会看到如下信息：(安装时间可能会比较长)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp-imagemin@2.2.1 node_modules/gulp-imagemin</div><div class="line">├── object-assign@2.0.0</div><div class="line">├── pretty-bytes@1.0.3 (get-stdin@4.0.1)</div><div class="line">├── chalk@1.0.0 (escape-string-regexp@1.0.3, ansi-styles@2.0.1, supports-color@1.3.1, has-ansi@1.0.3, strip-ansi@2.0.1)</div><div class="line">├── through2-concurrent@0.3.1 (through2@0.6.3)</div><div class="line">├── gulp-util@3.0.4 (array-differ@1.0.0, beeper@1.0.0, array-uniq@1.0.2, lodash._reevaluate@3.0.0, lodash._reescape@3.0.0, lodash._reinterpolate@3.0.0, replace-ext@0.0.1, minimist@1.1.1, vinyl@0.4.6, through2@0.6.3, multipipe@0.1.2, lodash.template@3.3.2, dateformat@1.0.11)</div><div class="line">└── imagemin@3.1.0 (get-stdin@3.0.2, optional@0.1.3, vinyl@0.4.6, through2@0.6.3, stream-combiner@0.2.1, concat-stream@1.4.7, meow@2.1.0, vinyl-fs@0.3.13, imagemin-svgo@4.1.2, imagemin-optipng@4.2.0, imagemin-jpegtran@4.1.0, imagemin-pngquant@4.0.0, imagemin-gifsicle@4.1.0)</div></pre></td></tr></table></figure>
<h3 id="5-2-创建-gulpfile-js-文件编写代码"><a href="#5-2-创建-gulpfile-js-文件编写代码" class="headerlink" title="5.2 创建 gulpfile.js 文件编写代码"></a>5.2 创建 <code>gulpfile.js</code> 文件编写代码</h3><hr>
<p>在对应目录创建 <code>gulpfile.js</code> 文件并写入如下内容：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"></div><div class="line"><span class="comment">// 获取 gulp-imagemin 模块</span></div><div class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 压缩图片任务</span></div><div class="line"><span class="comment">// 在命令行输入 gulp images 启动此任务</span></div><div class="line">gulp.task(<span class="string">'images'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到图片</span></div><div class="line">    gulp.src(<span class="string">'images/*.*'</span>)</div><div class="line">    <span class="comment">// 2. 压缩图片</span></div><div class="line">        .pipe(imagemin(&#123;</div><div class="line">            <span class="attr">progressive</span>: <span class="literal">true</span></div><div class="line">        &#125;))</div><div class="line">    <span class="comment">// 3. 另存图片</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/images'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 在命令行使用 gulp auto 启动此任务</span></div><div class="line">gulp.task(<span class="string">'auto'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 监听文件修改，当文件被修改则执行 images 任务</span></div><div class="line">    gulp.watch(<span class="string">'images/*.*)'</span>, [<span class="string">'images'</span>])</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 使用 gulp.task('default') 定义默认任务</span></div><div class="line"><span class="comment">// 在命令行使用 gulp 启动 images 任务和 auto 任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'images'</span>, <span class="string">'auto'</span>])</div></pre></td></tr></table></figure>
<p>你可以访问 <a href="https://github.com/sindresorhus/gulp-imagemin" target="_blank" rel="external">gulp-imagemin</a> 以查看更多用法。</p>
<hr>
<h3 id="5-3-在-images-目录下存放图片"><a href="#5-3-在-images-目录下存放图片" class="headerlink" title="5.3 在 images/ 目录下存放图片"></a>5.3 在 <code>images/</code> 目录下存放图片</h3><hr>
<p>在 <code>gulpfile.js</code> 对应目录创建 <code>images</code> 文件夹，并在 <code>images/</code> 目录下存放图片。</p>
<h3 id="5-4-运行-gulp-查看效果"><a href="#5-4-运行-gulp-查看效果" class="headerlink" title="5.4 运行 gulp 查看效果"></a>5.4 运行 gulp 查看效果</h3><hr>
<p>在命令行输入 <code>gulp</code> +回车</p>
<p>你将看到命令行出现如下提示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">gulp</div><div class="line">[18:10:42] Using gulpfile ~/Documents/code/gulp-book/demo/chapter4/gulpfile.js</div><div class="line">[18:10:42] Starting &apos;images&apos;...</div><div class="line">[18:10:42] Finished &apos;images&apos; after 5.72 ms</div><div class="line">[18:10:42] Starting &apos;auto&apos;...</div><div class="line">[18:10:42] Finished &apos;auto&apos; after 6.39 ms</div><div class="line">[18:10:42] Starting &apos;default&apos;...</div><div class="line">[18:10:42] Finished &apos;default&apos; after 5.91 μs</div><div class="line">[18:10:42] gulp-imagemin: Minified 3 images (saved 25.83 kB - 5.2%)</div></pre></td></tr></table></figure>
<h2 id="使用-gulp-编译-LESS"><a href="#使用-gulp-编译-LESS" class="headerlink" title="使用 gulp 编译 LESS"></a>使用 gulp 编译 LESS</h2><blockquote>
<p>Less 是一门 CSS 预处理语言，它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护。</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-less</div></pre></td></tr></table></figure>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"><span class="comment">// 获取 gulp-less 模块</span></div><div class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 编译less</span></div><div class="line"><span class="comment">// 在命令行输入 gulp less 启动此任务</span></div><div class="line">gulp.task(<span class="string">'less'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 1. 找到 less 文件</span></div><div class="line">    gulp.src(<span class="string">'less/**.less'</span>)</div><div class="line">    <span class="comment">// 2. 编译为css</span></div><div class="line">        .pipe(less())</div><div class="line">    <span class="comment">// 3. 另存文件</span></div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/css'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 在命令行使用 gulp auto 启动此任务</span></div><div class="line">gulp.task(<span class="string">'auto'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 监听文件修改，当文件被修改则执行 less 任务</span></div><div class="line">    gulp.watch(<span class="string">'less/**.less'</span>, [<span class="string">'less'</span>])</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 使用 gulp.task('default') 定义默认任务</span></div><div class="line"><span class="comment">// 在命令行使用 gulp 启动 less 任务和 auto 任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'less'</span>, <span class="string">'auto'</span>])</div></pre></td></tr></table></figure>
<p>你可以访问 <a href="https://github.com/plus3network/gulp-less" target="_blank" rel="external">gulp-less</a> 以查看更多用法。</p>
<h2 id="LESS-代码和编译后的CSS代码"><a href="#LESS-代码和编译后的CSS代码" class="headerlink" title="LESS 代码和编译后的CSS代码"></a>LESS 代码和编译后的CSS代码</h2><p><a href="https://github.com/nimojs/gulp-book/tree/master/demo/chapter5/less/a.less" target="_blank" rel="external">less/a.less</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.less&#123;</div><div class="line">	a&#123;</div><div class="line">        color:pink;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/nimojs/gulp-book/tree/master/demo/chapter5/less/import.less" target="_blank" rel="external">less/import.less</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@import "a.less";</div><div class="line">.import&#123;</div><div class="line">	a&#123;</div><div class="line">		color:red;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/nimojs/gulp-book/tree/master/demo/chapter5/dist/css/a.css" target="_blank" rel="external">less/a.css</a></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.less</span> <span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">color</span>: pink;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/nimojs/gulp-book/tree/master/demo/chapter5/dist/css/import.css" target="_blank" rel="external">less/import.css</a></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.less</span> <span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">color</span>: pink;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.import</span> <span class="selector-tag">a</span>&#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="六、使用-gulp-编译-Sass"><a href="#六、使用-gulp-编译-Sass" class="headerlink" title="六、使用 gulp 编译 Sass"></a>六、使用 gulp 编译 Sass</h2><hr>
<blockquote>
<p>无论是 <code>node-sass</code> 还是 <code>ruby-sass</code> 使用 npm 安装都非常的慢，甚至会装不上。及其不利于团队协作。建议使用 less 作为 css 预处理器。<br>如果因为 less 不支持自定义函数选择用 sass 可以使用 <a href="https://github.com/seven-phases-max/less-plugin-functions" target="_blank" rel="external">less-plugin-functions</a> 让 less 支持自定义函数。</p>
</blockquote>
<h3 id="6-1-gulp-sass"><a href="#6-1-gulp-sass" class="headerlink" title="6.1 gulp-sass"></a>6.1 gulp-sass</h3><hr>
<p>本章使用的是 ruby-sass 如果你不方便安装 ruby 或编译速度慢，建议使用 <a href="https://github.com/dlmanning/gulp-sass" target="_blank" rel="external">gulp-sass</a></p>
<blockquote>
<p>Sass 是一种 CSS 的开发工具，提供了许多便利的写法，大大节省了开发者的时间，使得 CSS 的开发，变得简单和可维护。</p>
</blockquote>
<p>本章使用 <code>ruby-sass</code> 编译 css,若你没有安装 ruby 和 sass 请移步 <a href="https://github.com/nimojs/blog/issues/14" target="_blank" rel="external">使用ruby.taobao安装 Sass</a></p>
<h3 id="6-2-安装"><a href="#6-2-安装" class="headerlink" title="6.2 安装"></a>6.2 安装</h3><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-ruby-sass</div></pre></td></tr></table></figure>
<h3 id="6-3-基本用法"><a href="#6-3-基本用法" class="headerlink" title="6.3 基本用法"></a>6.3 基本用法</h3><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取 gulp</span></div><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"><span class="comment">// 获取 gulp-ruby-sass 模块</span></div><div class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-ruby-sass'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 编译sass</span></div><div class="line"><span class="comment">// 在命令行输入 gulp sass 启动此任务</span></div><div class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> sass(<span class="string">'sass/'</span>) </div><div class="line">    .on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.error(<span class="string">'Error!'</span>, err.message);</div><div class="line">   &#125;)</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/css'</span>))</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 在命令行使用 gulp auto 启动此任务</span></div><div class="line">gulp.task(<span class="string">'auto'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 监听文件修改，当文件被修改则执行 images 任务</span></div><div class="line">    gulp.watch(<span class="string">'sass/**/*.scss'</span>, [<span class="string">'sass'</span>])</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 使用 gulp.task('default') 定义默认任务</span></div><div class="line"><span class="comment">// 在命令行使用 gulp 启动 sass 任务和 auto 任务</span></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'sass'</span>, <span class="string">'auto'</span>])</div></pre></td></tr></table></figure>
<p>Sass 代码和编译后的 CSS 代码</p>
<p><a href="https://github.com/nimojs/gulp-book/tree/master/demo/chapter6/sass/a.scss" target="_blank" rel="external">sass/a.scss</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.sass&#123;</div><div class="line">	a&#123;</div><div class="line">        color:pink;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/nimojs/gulp-book/tree/master/demo/chapter6/sass/import.scss" target="_blank" rel="external">sass/import.scss</a></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">@import "a.scss";</div><div class="line">.import&#123;</div><div class="line">	a&#123;</div><div class="line">		color:red;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/nimojs/gulp-book/tree/master/demo/chapter6/dist/css/a.css" target="_blank" rel="external">sass/a.css</a></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.sass</span> <span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">color</span>: pink;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/nimojs/gulp-book/tree/master/demo/chapter6/dist/css/import.css" target="_blank" rel="external">sass/import.css</a></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.sass</span> <span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">color</span>: pink;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.import</span> <span class="selector-tag">a</span>&#123;</div><div class="line">  <span class="attribute">color</span>: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="七、使用-gulp-构建一个项目"><a href="#七、使用-gulp-构建一个项目" class="headerlink" title="七、使用 gulp 构建一个项目"></a>七、使用 gulp 构建一个项目</h2><hr>
<p>本章将介绍</p>
<ul>
<li><a href="https://github.com/nimojs/gulp-watch-path" target="_blank" rel="external">gulp-watch-path</a></li>
<li><a href="https://github.com/gulpjs/gulp/blob/master/docs/recipes/combining-streams-to-handle-errors.md" target="_blank" rel="external">stream-combiner2</a></li>
<li><a href="https://github.com/floridoo/gulp-sourcemaps" target="_blank" rel="external">gulp-sourcemaps</a></li>
<li><a href="https://github.com/sindresorhus/gulp-autoprefixer/blob/master/package.json" target="_blank" rel="external">gulp-autoprefixer</a></li>
</ul>
<p>并将之前所有章节的内容组合起来编写一个前端项目所需的 gulp 代码。</p>
<p>若你不了解npm 请务必阅读 <a href="http://javascript.ruanyifeng.com/nodejs/npm.html" target="_blank" rel="external">npm模块管理器</a></p>
<h3 id="7-1-package-json"><a href="#7-1-package-json" class="headerlink" title="7.1 package.json"></a>7.1 package.json</h3><hr>
<p>如果你熟悉 npm 则可以利用 <code>package.json</code> 保存所有 <code>npm install --save-dev gulp-xxx</code> 模块依赖和模块版本。</p>
<p>在命令行输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure>
<p>会依次要求补全项目信息，不清楚的可以直接回车跳过<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">name: (gulp-demo) </div><div class="line">version: (1.0.0) </div><div class="line">description: </div><div class="line">entry point: (index.js) </div><div class="line">test command: </div><div class="line">...</div><div class="line">...</div><div class="line">Is this ok? (yes)</div></pre></td></tr></table></figure></p>
<p>最终会在当前目录中创建 <code>package.json</code> 文件并生成类似如下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">"gulp-demo"</span>,</div><div class="line">  <span class="string">"version"</span>: <span class="string">"0.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"repository"</span>: &#123;</div><div class="line">    <span class="string">"type"</span>: <span class="string">"git"</span>,</div><div class="line">    <span class="string">"url"</span>: <span class="string">"https://github.com/nimojs/gulp-demo.git"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"keywords"</span>: [</div><div class="line">    <span class="string">"gulp"</span>,</div><div class="line">  ],</div><div class="line">  <span class="string">"author"</span>: <span class="string">"nimojs &lt;nimo.jser@gmail.com&gt;"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"MIT"</span>,</div><div class="line">  <span class="string">"bugs"</span>: &#123;</div><div class="line">    <span class="string">"url"</span>: <span class="string">"https://github.com/nimojs/gulp-demo/issues"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"homepage"</span>: <span class="string">"https://github.com/nimojs/gulp-demo"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="7-2-安装依赖"><a href="#7-2-安装依赖" class="headerlink" title="7.2 安装依赖"></a>7.2 安装依赖</h3><hr>
<p>安装 gulp 到项目（防止全局 gulp 升级后与此项目 <code>gulpfile.js</code> 代码不兼容）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp --save-dev</div></pre></td></tr></table></figure></p>
<p>此时打开 <code>package.json</code> 会发现多了如下代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">"devDependencies"</span>: &#123;</div><div class="line">	<span class="string">"gulp"</span>: <span class="string">"^3.8.11"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>声明此项目的开发依赖 gulp</p>
<p>接着安装其他依赖：</p>
<blockquote>
<p>安装模块较多，请耐心等待，若一直安装失败可使用<a href="http://npm.taobao.org/" target="_blank" rel="external">npm.taobao.org</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp-uglify gulp-watch-path stream-combiner2 gulp-sourcemaps gulp-minify-css gulp-autoprefixer gulp-less gulp-ruby-sass gulp-imagemin gulp-util --save-dev</div></pre></td></tr></table></figure>
<p>此时，<a href="https://github.com/nimojs/gulp-demo/blob/master/package.json" target="_blank" rel="external">package.json</a> 将会更新<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"colors"</span>: <span class="string">"^1.0.3"</span>,</div><div class="line">    <span class="string">"gulp"</span>: <span class="string">"^3.8.11"</span>,</div><div class="line">    <span class="string">"gulp-autoprefixer"</span>: <span class="string">"^2.1.0"</span>,</div><div class="line">    <span class="string">"gulp-imagemin"</span>: <span class="string">"^2.2.1"</span>,</div><div class="line">    <span class="string">"gulp-less"</span>: <span class="string">"^3.0.2"</span>,</div><div class="line">    <span class="string">"gulp-minify-css"</span>: <span class="string">"^1.0.0"</span>,</div><div class="line">    <span class="string">"gulp-ruby-sass"</span>: <span class="string">"^1.0.1"</span>,</div><div class="line">    <span class="string">"gulp-sourcemaps"</span>: <span class="string">"^1.5.1"</span>,</div><div class="line">    <span class="string">"gulp-uglify"</span>: <span class="string">"^1.1.0"</span>,</div><div class="line">    <span class="string">"gulp-watch-path"</span>: <span class="string">"^0.0.7"</span>,</div><div class="line">    <span class="string">"stream-combiner2"</span>: <span class="string">"^1.0.2"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>当你将这份 gulpfile.js 配置分享给你的朋友时，就不需要将 <code>node_modules/</code> 发送给他，他只需在命令行输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure></p>
<p>就可以检测 <code>package.json</code> 中的 <code>devDependencies</code> 并安装所有依赖。</p>
<h3 id="7-3-设计目录结构"><a href="#7-3-设计目录结构" class="headerlink" title="7.3 设计目录结构"></a>7.3 设计目录结构</h3><hr>
<p>我们将文件分为2类，一类是源码，一类是编译压缩后的版本。文件夹分别为 <code>src</code> 和 <code>dist</code>。(注意区分 <code>dist</code> 和 ·<code>dest</code> 的区别)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">└── src/</div><div class="line">│</div><div class="line">└── dist/</div></pre></td></tr></table></figure>
<p><code>dist/</code> 目录下的文件都是根据 <code>src/</code> 下所有源码文件构建而成。</p>
<p>在 <code>src/</code> 下创建前端资源对应的的文件夹</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">└── src/</div><div class="line">	├── less/    *.less 文件</div><div class="line">	├── sass/    *.scss *.sass 文件</div><div class="line">	├── css/     *.css  文件</div><div class="line">	├── js/      *.js 文件</div><div class="line">	├── fonts/   字体文件</div><div class="line">    └── images/   图片</div><div class="line">└── dist/</div></pre></td></tr></table></figure>
<h3 id="7-4-让命令行输出的文字带颜色"><a href="#7-4-让命令行输出的文字带颜色" class="headerlink" title="7.4 让命令行输出的文字带颜色"></a>7.4 让命令行输出的文字带颜色</h3><hr>
<p>gulp 自带的输出都带时间和颜色，这样很容易识别。我们利用 <a href="https://github.com/gulpjs/gulp-util" target="_blank" rel="external">gulp-util</a> 实现同样的效果。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>)</div><div class="line"><span class="keyword">var</span> gutil = <span class="built_in">require</span>(<span class="string">'gulp-util'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gutil.log(<span class="string">'message'</span>)</div><div class="line">    gutil.log(gutil.colors.red(<span class="string">'error'</span>))</div><div class="line">    gutil.log(gutil.colors.green(<span class="string">'message:'</span>) + <span class="string">"some"</span>)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>使用 <code>gulp</code> 启动默认任务以测试<br><img src="https://cloud.githubusercontent.com/assets/3949015/7137629/a1def1b8-e2ed-11e4-83e0-5a6adb22de6f.png" alt="gulp-util"></p>
<h3 id="7-5-配置-JS-任务"><a href="#7-5-配置-JS-任务" class="headerlink" title="7.5 配置 JS 任务"></a>7.5 配置 JS 任务</h3><h4 id="7-5-1-gulp-uglify"><a href="#7-5-1-gulp-uglify" class="headerlink" title="7.5.1 gulp-uglify"></a>7.5.1 gulp-uglify</h4><p>检测<code>src/js/</code>目录下的 js 文件修改后，压缩 <code>js/</code> 中所有 js 文件并输出到 <code>dist/js/</code> 中</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'uglifyjs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/js/**/*.js'</span>)</div><div class="line">        .pipe(uglify())</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/js'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/js/**/*.js'</span>, [<span class="string">'uglifyjs'</span>])</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><code>src/js/**/*.js</code> 是 glob 语法。<a href="http://baike.baidu.com/view/4019153.htm" target="_blank" rel="external">百度百科：glob模式</a> 、<a href="https://github.com/isaacs/node-glob" target="_blank" rel="external">node-glob</a></p>
<p>在命令行输入 <code>gulp</code> 后会出现如下消息，表示已经启动。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="number">20</span><span class="symbol">:</span><span class="number">39</span><span class="symbol">:</span><span class="number">50</span>] Using gulpfile ~<span class="regexp">/Documents/code</span><span class="regexp">/gulp-book/demo</span><span class="regexp">/chapter7/gulpfile</span>.js</div><div class="line">[<span class="number">20</span><span class="symbol">:</span><span class="number">39</span><span class="symbol">:</span><span class="number">50</span>] Starting <span class="string">'default'</span>...</div><div class="line">[<span class="number">20</span><span class="symbol">:</span><span class="number">39</span><span class="symbol">:</span><span class="number">50</span>] Finished <span class="string">'default'</span> after <span class="number">13</span> ms</div></pre></td></tr></table></figure></p>
<p>此时编辑 <a href="https://github.com/nimojs/gulp-demo/blob/master/src/js/log.js" target="_blank" rel="external">src/js/log.js</a> 文件并保存，命令行会出现如下消息，表示检测到 <code>src/js/**/*.js</code> 文件修改后重新编译所有 js。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="number">20</span><span class="symbol">:</span><span class="number">39</span><span class="symbol">:</span><span class="number">52</span>] Starting <span class="string">'js'</span>...</div><div class="line">[<span class="number">20</span><span class="symbol">:</span><span class="number">39</span><span class="symbol">:</span><span class="number">52</span>] Finished <span class="string">'js'</span> after <span class="number">14</span> ms</div></pre></td></tr></table></figure>
<h4 id="7-5-2gulp-watch-path"><a href="#7-5-2gulp-watch-path" class="headerlink" title="7.5.2gulp-watch-path"></a>7.5.2gulp-watch-path</h4><hr>
<p>此配置有个性能问题，当 <code>gulp.watch</code> 检测到  <code>src/js/</code> 目录下的js文件有修改时会将所有文件全部编译。实际上我们只需要重新编译被修改的文件。</p>
<p>简单介绍 <code>gulp.watch</code> 第二个参数为 <code>function</code> 时的用法。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">gulp.watch(<span class="string">'src/js/**/*.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(event);</div><div class="line">    <span class="comment">/*</span></div><div class="line">	当修改 src/js/log.js 文件时</div><div class="line">    event &#123;</div><div class="line">		// 发生改变的类型，不管是添加，改变或是删除</div><div class="line">        type: 'changed', </div><div class="line">		// 触发事件的文件路径</div><div class="line">        path: '/Users/nimojs/Documents/code/gulp-book/demo/chapter7/src/js/log.js'</div><div class="line">    &#125;</div><div class="line">    */</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>我们可以利用 <code>event</code> 给到的信息，检测到某个 js 文件被修改时，只编写当前修改的 js 文件。</p>
<p>可以利用 <code>gulp-watch-path</code> 配合 <code>event</code> 获取编译路径和输出路径。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> watchPath = <span class="built_in">require</span>(<span class="string">'gulp-watch-path'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watchjs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/js/**/*.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event, <span class="string">'src/'</span>, <span class="string">'dist/'</span>)</div><div class="line">        <span class="comment">/*</span></div><div class="line">        paths</div><div class="line">            &#123; srcPath: 'src/js/log.js',</div><div class="line">              srcDir: 'src/js/',</div><div class="line">              distPath: 'dist/js/log.js',</div><div class="line">              distDir: 'dist/js/',</div><div class="line">              srcFilename: 'log.js',</div><div class="line">              distFilename: 'log.js' &#125;</div><div class="line">        */</div><div class="line">		gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line"></div><div class="line">        gulp.src(paths.srcPath)</div><div class="line">            .pipe(uglify())</div><div class="line">            .pipe(gulp.dest(paths.distDir))</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'watchjs'</span>])</div></pre></td></tr></table></figure>
<p><a href="https://github.com/nimojs/gulp-book/tree/master/demo/chapter7/use-gulp-watch-path.js" target="_blank" rel="external">use-gulp-watch-path 完整代码</a></p>
<h4 id="7-5-3-watchPath-event-search-replace-distExt"><a href="#7-5-3-watchPath-event-search-replace-distExt" class="headerlink" title="7.5.3 watchPath(event, search, replace, distExt)"></a>7.5.3 watchPath(event, search, replace, distExt)</h4><hr>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>event</td>
<td><code>gulp.watch</code> 回调函数的 <code>event</code></td>
</tr>
<tr>
<td>search</td>
<td>需要被替换的起始字符串</td>
</tr>
<tr>
<td>replace</td>
<td>第三个参数是新的的字符串</td>
</tr>
<tr>
<td>distExt</td>
<td>扩展名(非必填)</td>
</tr>
</tbody>
</table>
<p>此时编辑 <a href="https://github.com/nimojs/gulp-demo/blob/master/src/js/log.js" target="_blank" rel="external">src/js/log.js</a> 文件并保存，命令行会出现消息，表示检测到 <code>src/js/log.js</code> 文件修改后只重新编译 <code>log.js</code>。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="number">21</span><span class="symbol">:</span><span class="number">47</span><span class="symbol">:</span><span class="number">25</span>] changed src/js/log.js</div><div class="line">[<span class="number">21</span><span class="symbol">:</span><span class="number">47</span><span class="symbol">:</span><span class="number">25</span>] Dist dist/js/log.js</div></pre></td></tr></table></figure>
<p>你可以访问 <a href="https://github.com/nimojs/gulp-watch-path" target="_blank" rel="external">gulp-watch-path</a> 了解更多。</p>
<h4 id="7-5-4-stream-combiner2"><a href="#7-5-4-stream-combiner2" class="headerlink" title="7.5.4 stream-combiner2"></a>7.5.4 stream-combiner2</h4><hr>
<p>编辑 <code>log.js</code> 文件时，如果文件中有 js 语法错误时，gulp 会终止运行并报错。</p>
<p>当 log.js 缺少 <code>)</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">log(<span class="string">'gulp-book'</span></div></pre></td></tr></table></figure></p>
<p>并保存文件时出现如下错误，但是错误信息不全面。而且还会让 gulp 停止运行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">events.js:85</div><div class="line">      throw er; // Unhandled &apos;error&apos; event</div><div class="line">            ^</div><div class="line">Error</div><div class="line">    at new JS_Parse_Error (/Users/nimojs/Documents/code/gulp-book/demo/chapter7/node_modules/gulp-uglify/node_modules/uglify-js/lib/parse.js:189:18)</div><div class="line">...</div><div class="line">...</div><div class="line">js_error (/Users/nimojs/Documents/code/gulp-book/demo/chapter7/node_modules/gulp-</div><div class="line">-book/demo/chapter7/node_modules/gulp-uglify/node_modules/uglify-js/lib/parse.js:1165:20)</div><div class="line">    at maybe_unary (/Users/nimojs/Documents/code/gulp-book/demo/chapter7/node_modules/gulp-uglify/node_modules/uglify-js/lib/parse.js:1328:19)</div></pre></td></tr></table></figure>
<p>应对这种情况，我们可以使用 <a href="https://github.com/gulpjs/gulp/blob/master/docs/recipes/combining-streams-to-handle-errors.md" target="_blank" rel="external">Combining streams to handle errors</a> 文档中推荐的 <a href="https://github.com/substack/stream-combiner2" target="_blank" rel="external">stream-combiner2</a>  捕获错误信息。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> handleError = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> colors = gutil.colors;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'\n'</span>)</div><div class="line">    gutil.log(colors.red(<span class="string">'Error!'</span>))</div><div class="line">    gutil.log(<span class="string">'fileName: '</span> + colors.red(err.fileName))</div><div class="line">    gutil.log(<span class="string">'lineNumber: '</span> + colors.red(err.lineNumber))</div><div class="line">    gutil.log(<span class="string">'message: '</span> + err.message)</div><div class="line">    gutil.log(<span class="string">'plugin: '</span> + colors.yellow(err.plugin))</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> combiner = <span class="built_in">require</span>(<span class="string">'stream-combiner2'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watchjs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/js/**/*.js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event, <span class="string">'src/'</span>, <span class="string">'dist/'</span>)</div><div class="line">        <span class="comment">/*</span></div><div class="line">        paths</div><div class="line">            &#123; srcPath: 'src/js/log.js',</div><div class="line">              srcDir: 'src/js/',</div><div class="line">              distPath: 'dist/js/log.js',</div><div class="line">              distDir: 'dist/js/',</div><div class="line">              srcFilename: 'log.js',</div><div class="line">              distFilename: 'log.js' &#125;</div><div class="line">        */</div><div class="line">        gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line"></div><div class="line">        <span class="keyword">var</span> combined = combiner.obj([</div><div class="line">            gulp.src(paths.srcPath),</div><div class="line">            uglify(),</div><div class="line">            gulp.dest(paths.distDir)</div><div class="line">        ])</div><div class="line"></div><div class="line">        combined.on(<span class="string">'error'</span>, handleError)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>此时当编译错误的语法时，命令行会出现错误提示。而且不会让 gulp 停止运行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">changed:src/js/log.js</div><div class="line">dist:dist/js/log.js</div><div class="line">--------------</div><div class="line">Error!</div><div class="line">fileName: /Users/nimojs/Documents/code/gulp-book/demo/chapter7/src/js/log.js</div><div class="line">lineNumber: 7</div><div class="line">message: /Users/nimojs/Documents/code/gulp-book/demo/chapter7/src/js/log.js: Unexpected token eof «undefined», expected punc «,»</div><div class="line">plugin: gulp-uglify</div></pre></td></tr></table></figure>
<h4 id="7-5-5-gulp-sourcemaps"><a href="#7-5-5-gulp-sourcemaps" class="headerlink" title="7.5.5 gulp-sourcemaps"></a>7.5.5 gulp-sourcemaps</h4><hr>
<p>JS 压缩前和压缩后比较<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 压缩前</span></div><div class="line"><span class="keyword">var</span> log = <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'--------'</span>);</div><div class="line">    <span class="built_in">console</span>.log(msg)</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'--------'</span>);</div><div class="line">&#125;</div><div class="line">log(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;)</div><div class="line">log(<span class="string">'gulp-book'</span>)</div><div class="line"></div><div class="line"><span class="comment">// 压缩后</span></div><div class="line"><span class="keyword">var</span> log=<span class="function"><span class="keyword">function</span>(<span class="params">o</span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"--------"</span>),<span class="built_in">console</span>.log(o),<span class="built_in">console</span>.log(<span class="string">"--------"</span>)&#125;;log(&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;),log(<span class="string">"gulp-book"</span>);</div></pre></td></tr></table></figure></p>
<p>压缩后的代码不存在换行符和空白符，导致出错后很难调试，好在我们可以使用 <a href="http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html" target="_blank" rel="external">sourcemap</a> 帮助调试</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> sourcemaps = <span class="built_in">require</span>(<span class="string">'gulp-sourcemaps'</span>)</div><div class="line"><span class="comment">// ...</span></div><div class="line"><span class="keyword">var</span> combined = combiner.obj([</div><div class="line">    gulp.src(paths.srcPath),</div><div class="line">    sourcemaps.init(),</div><div class="line">    uglify(),</div><div class="line">    sourcemaps.write(<span class="string">'./'</span>),</div><div class="line">    gulp.dest(paths.distDir)</div><div class="line">])</div><div class="line"><span class="comment">// ...</span></div></pre></td></tr></table></figure>
<p>此时 <code>dist/js/</code> 中也会生成对应的 <code>.map</code> 文件，以便使用 Chrome 控制台调试代码 <a href="https://github.com/nimojs/gulp-demo/blob/master/src/js/" target="_blank" rel="external">在线文件示例：src/js/</a></p>
<hr>
<p>至此，我们完成了检测文件修改后压缩 JS 的 gulp 任务配置。</p>
<p>有时我们也需要一次编译所有 js 文件。可以配置 <code>uglifyjs</code> 任务。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'uglifyjs'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> combined = combiner.obj([</div><div class="line">        gulp.src(<span class="string">'src/js/**/*.js'</span>),</div><div class="line">        sourcemaps.init(),</div><div class="line">        uglify(),</div><div class="line">        sourcemaps.write(<span class="string">'./'</span>),</div><div class="line">        gulp.dest(<span class="string">'dist/js/'</span>)</div><div class="line">    ])</div><div class="line">    combined.on(<span class="string">'error'</span>, handleError)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>在命令行输入 <code>gulp uglifyjs</code> 以压缩 <code>src/js/</code> 下的所有 js 文件。</p>
<h3 id="7-6-配置-CSS-任务"><a href="#7-6-配置-CSS-任务" class="headerlink" title="7.6 配置 CSS 任务"></a>7.6 配置 CSS 任务</h3><hr>
<p>有时我们不想使用 LESS 或 SASS而是直接编写 CSS，但我们需要压缩 CSS 以提高页面加载速度。</p>
<h4 id="7-6-1-gulp-minify-css"><a href="#7-6-1-gulp-minify-css" class="headerlink" title="7.6.1 gulp-minify-css"></a>7.6.1 gulp-minify-css</h4><hr>
<p>按照本章中压缩 JS 的方式，先编写 <code>watchcss</code> 任务</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watchcss'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/css/**/*.css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event, <span class="string">'src/'</span>, <span class="string">'dist/'</span>)</div><div class="line"></div><div class="line">		gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line"></div><div class="line">        gulp.src(paths.srcPath)</div><div class="line">            .pipe(sourcemaps.init())</div><div class="line">            .pipe(minifycss())</div><div class="line">            .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">            .pipe(gulp.dest(paths.distDir))</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'watchjs'</span>,<span class="string">'watchcss'</span>])</div></pre></td></tr></table></figure>
<h4 id="7-6-2-gulp-autoprefixer"><a href="#7-6-2-gulp-autoprefixer" class="headerlink" title="7.6.2 gulp-autoprefixer"></a>7.6.2 gulp-autoprefixer</h4><p>autoprefixer 解析 CSS 文件并且添加浏览器前缀到CSS规则里。<br>通过示例帮助理解 </p>
<p>autoprefixer 处理前：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.demo</span> &#123;</div><div class="line">    <span class="attribute">display</span>:flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>autoprefixer 处理后：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.demo</span> &#123;</div><div class="line">    <span class="attribute">display</span>:-webkit-flex;</div><div class="line">    <span class="attribute">display</span>:-ms-flexbox;</div><div class="line">    <span class="attribute">display</span>:flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你只需要关心编写标准语法的 css，autoprefixer 会自动补全。</p>
<p>在 watchcss 任务中加入 autoprefixer:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'watchcss'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/css/**/*.css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event, <span class="string">'src/'</span>, <span class="string">'dist/'</span>)</div><div class="line"></div><div class="line">		gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line"></div><div class="line">        gulp.src(paths.srcPath)</div><div class="line">            .pipe(sourcemaps.init())</div><div class="line">            .pipe(autoprefixer(&#123;</div><div class="line">              <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">            &#125;))</div><div class="line">            .pipe(minifycss())</div><div class="line">            .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">            .pipe(gulp.dest(paths.distDir))</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>更多 autoprefixer 参数请查看 <a href="https://github.com/sindresorhus/gulp-autoprefixer" target="_blank" rel="external">gulp-autoprefixer</a></p>
<p>有时我们也需要一次编译所有 css 文件。可以配置 <code>minifyss</code> 任务。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'minifycss'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/css/**/*.css'</span>)</div><div class="line">        .pipe(sourcemaps.init())</div><div class="line">        .pipe(autoprefixer(&#123;</div><div class="line">          <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(minifycss())</div><div class="line">        .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/css/'</span>))</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>在命令行输入 <code>gulp minifyss</code> 以压缩 <code>src/css/</code> 下的所有 .css 文件并复制到 <code>dist/css</code> 目录下</p>
<h3 id="7-7-配置-Less-任务"><a href="#7-7-配置-Less-任务" class="headerlink" title="7.7 配置 Less 任务"></a>7.7 配置 Less 任务</h3><hr>
<ul>
<li>参考配置 JavaScript 任务的方式配置 less 任务</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> less = <span class="built_in">require</span>(<span class="string">'gulp-less'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watchless'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/less/**/*.less'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event, <span class="string">'src/less/'</span>, <span class="string">'dist/css/'</span>)</div><div class="line"></div><div class="line">		gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line">        <span class="keyword">var</span> combined = combiner.obj([</div><div class="line">            gulp.src(paths.srcPath),</div><div class="line">            sourcemaps.init(),</div><div class="line">            autoprefixer(&#123;</div><div class="line">              <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">            &#125;),</div><div class="line">            less(),</div><div class="line">            minifycss(),</div><div class="line">            sourcemaps.write(<span class="string">'./'</span>),</div><div class="line">            gulp.dest(paths.distDir)</div><div class="line">        ])</div><div class="line">        combined.on(<span class="string">'error'</span>, handleError)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'lesscss'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> combined = combiner.obj([</div><div class="line">            gulp.src(<span class="string">'src/less/**/*.less'</span>),</div><div class="line">            sourcemaps.init(),</div><div class="line">            autoprefixer(&#123;</div><div class="line">              <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">            &#125;),</div><div class="line">            less(),</div><div class="line">            minifycss(),</div><div class="line">            sourcemaps.write(<span class="string">'./'</span>),</div><div class="line">            gulp.dest(<span class="string">'dist/css/'</span>)</div><div class="line">        ])</div><div class="line">    combined.on(<span class="string">'error'</span>, handleError)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'watchjs'</span>, <span class="string">'watchcss'</span>, <span class="string">'watchless'</span>])</div></pre></td></tr></table></figure>
<h3 id="7-8-配置-Sass-任务"><a href="#7-8-配置-Sass-任务" class="headerlink" title="7.8 配置 Sass 任务"></a>7.8 配置 Sass 任务</h3><hr>
<p>参考配置 JavaScript 任务的方式配置 Sass 任务</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'watchsass'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/sass/**/*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event, <span class="string">'src/sass/'</span>, <span class="string">'dist/css/'</span>)</div><div class="line"></div><div class="line">		gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line">        sass(paths.srcPath)</div><div class="line">            .on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">                <span class="built_in">console</span>.error(<span class="string">'Error!'</span>, err.message);</div><div class="line">            &#125;)</div><div class="line">            .pipe(sourcemaps.init())</div><div class="line">            .pipe(minifycss())</div><div class="line">            .pipe(autoprefixer(&#123;</div><div class="line">              <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">            &#125;))</div><div class="line">            .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">            .pipe(gulp.dest(paths.distDir))</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'sasscss'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        sass(<span class="string">'src/sass/'</span>)</div><div class="line">        .on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.error(<span class="string">'Error!'</span>, err.message);</div><div class="line">        &#125;)</div><div class="line">        .pipe(sourcemaps.init())</div><div class="line">        .pipe(minifycss())</div><div class="line">        .pipe(autoprefixer(&#123;</div><div class="line">          <span class="attr">browsers</span>: <span class="string">'last 2 versions'</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(sourcemaps.write(<span class="string">'./'</span>))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/css'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'watchjs'</span>, <span class="string">'watchcss'</span>, <span class="string">'watchless'</span>, <span class="string">'watchsass'</span>, <span class="string">'watchsass'</span>])</div></pre></td></tr></table></figure>
<h3 id="7-9-配置-image-任务"><a href="#7-9-配置-image-任务" class="headerlink" title="7.9 配置 image 任务"></a>7.9 配置 image 任务</h3><hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'watchimage'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/images/**/*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event,<span class="string">'src/'</span>,<span class="string">'dist/'</span>)</div><div class="line"></div><div class="line">		gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line"></div><div class="line">        gulp.src(paths.srcPath)</div><div class="line">            .pipe(imagemin(&#123;</div><div class="line">                <span class="attr">progressive</span>: <span class="literal">true</span></div><div class="line">            &#125;))</div><div class="line">            .pipe(gulp.dest(paths.distDir))</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'image'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/images/**/*'</span>)</div><div class="line">        .pipe(imagemin(&#123;</div><div class="line">            <span class="attr">progressive</span>: <span class="literal">true</span></div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/images'</span>))</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="7-10-配置文件复制任务"><a href="#7-10-配置文件复制任务" class="headerlink" title="7.10 配置文件复制任务"></a>7.10 配置文件复制任务</h3><hr>
<p>复制 <code>src/fonts/</code> 文件到 <code>dist/</code> 中</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'watchcopy'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.watch(<span class="string">'src/fonts/**/*'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> paths = watchPath(event)</div><div class="line"></div><div class="line">		gutil.log(gutil.colors.green(event.type) + <span class="string">' '</span> + paths.srcPath)</div><div class="line">        gutil.log(<span class="string">'Dist '</span> + paths.distPath)</div><div class="line"></div><div class="line">        gulp.src(paths.srcPath)</div><div class="line">            .pipe(gulp.dest(paths.distDir))</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'copy'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'src/fonts/**/*'</span>)</div><div class="line">        .pipe(gulp.dest(<span class="string">'dist/fonts/'</span>))</div><div class="line">&#125;)</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>, [<span class="string">'watchjs'</span>, <span class="string">'watchcss'</span>, <span class="string">'watchless'</span>, <span class="string">'watchsass'</span>, <span class="string">'watchimage'</span>, <span class="string">'watchcopy'</span>])</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;声明 本教程整理于互联网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一、gulp-入门简介&quot;&gt;&lt;a href=&quot;#一、gulp-入门简介&quot; class=&quot;headerlink&quot; title=&quot;一、gulp 入门简介&quot;&gt;&lt;/a&gt;一、gulp 入门简介&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;code&gt;gulp&lt;/code&gt; 是基于 &lt;code&gt;node&lt;/code&gt; 实现&lt;code&gt;Web&lt;/code&gt; 前端自动化开发的工具，利用它能够极大的提高开发效率。&lt;/p&gt;
&lt;p&gt;在 Web 前端开发工作中有很多“重复工作”，比如压缩&lt;code&gt;CSS/JS&lt;/code&gt;文件。而这些工作都是有规律的。找到这些规律，并编写 &lt;code&gt;gulp&lt;/code&gt; 配置代码,让 &lt;code&gt;gulp&lt;/code&gt; 自动执行这些“重复工作”。&lt;/p&gt;
    
    </summary>
    
      <category term="Build" scheme="http://blog.poetries.top/categories/Build/"/>
    
    
      <category term="gulp" scheme="http://blog.poetries.top/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript运动框架之速度时间版本</title>
    <link href="http://blog.poetries.top/2017/01/12/js-animate/"/>
    <id>http://blog.poetries.top/2017/01/12/js-animate/</id>
    <published>2017-01-12T07:50:43.000Z</published>
    <updated>2017-06-11T07:22:47.749Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、JavaScript运动框架之速度版"><a href="#一、JavaScript运动框架之速度版" class="headerlink" title="一、JavaScript运动框架之速度版"></a>一、JavaScript运动框架之速度版</h3><hr>
<h4 id="1-1-运动框架的实现思路"><a href="#1-1-运动框架的实现思路" class="headerlink" title="1.1 运动框架的实现思路"></a>1.1 运动框架的实现思路</h4><hr>
<p>运动，其实就是在一段时间内改变 <code>left</code> 、 <code>right</code> 、 <code>width</code> 、 <code>height</code> 、 <code>opactiy</code> 的值，到达目的地之后停止</p>
<ul>
<li>位移  <code>top</code>,<code>left</code></li>
<li>折叠  <code>width</code>,<code>height</code></li>
<li>淡入淡出 <code>opacity</code></li>
<li>时间有关系<ul>
<li><code>setInterval</code></li>
<li><code>setTimeout</code></li>
</ul>
</li>
</ul>
<ul>
<li>用javascript直接获取行间样式很容易，但如果要获取非行间样式那我们只能借助函数了。我这里编写了一个名为getStyle的函数，专门处理取非行间的样式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> getComputedStyle(obj)[attr]?getComputedStyle(obj)[attr]:obj.currentStyle[attr];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-2-一些案例演示"><a href="#1-2-一些案例演示" class="headerlink" title="1.2 一些案例演示"></a>1.2 一些案例演示</h4><hr>
<h5 id="1-2-1-运动之速"><a href="#1-2-1-运动之速" class="headerlink" title="1.2.1 运动之速"></a>1.2.1 运动之速</h5><hr>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#box</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">background</span>: red;</div><div class="line">	 <span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</div><div class="line"><span class="keyword">var</span> speed = <span class="number">0</span>; <span class="comment">//步长</span></div><div class="line"><span class="keyword">var</span> target = <span class="number">600</span>;</div><div class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</div><div class="line">timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> curr = <span class="built_in">parseInt</span>(getStyle(box,<span class="string">"left"</span>)); <span class="comment">//去除getStyle(box,"left")的单位</span></div><div class="line">	<span class="keyword">if</span>(curr == target)&#123;</div><div class="line">		clearInterval(timer);</div><div class="line">		speed = <span class="number">0</span>;</div><div class="line">		alert(<span class="string">"运动结束"</span>);</div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		speed +=<span class="number">10</span>;</div><div class="line">		box.style.left = speed + <span class="string">"px"</span>;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line"></div><div class="line">&#125;,<span class="number">1000</span>/<span class="number">30</span>);</div><div class="line"></div><div class="line"><span class="comment">//监控left的值的变化 怎么样拿到left的值</span></div><div class="line"><span class="comment">//alert(getComputedStyle(box)["width"]);</span></div><div class="line"><span class="comment">//alert(box.currentStyle["left"]);</span></div><div class="line"><span class="comment">// currentStyle --IE </span></div><div class="line"><span class="comment">// getComputedStyle -- 非IE</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> getComputedStyle(obj)[attr]?getComputedStyle(obj)[attr]:obj.currentStyle[attr];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/poetries/pen/wgGqzr" target="_blank" rel="external">在线演示</a></p>
<h5 id="1-2-2-运动速度之封装1"><a href="#1-2-2-运动速度之封装1" class="headerlink" title="1.2.2 运动速度之封装1"></a>1.2.2 运动速度之封装1</h5><hr>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ball"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#ball</span> &#123;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">background</span>: blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ball = <span class="built_in">document</span>.getElementById(<span class="string">"ball"</span>);</div><div class="line"></div><div class="line">ball.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//同时变换 用的最多</span></div><div class="line">	<span class="comment">//move(this,"width",500,10);</span></div><div class="line">	<span class="comment">//move(this,"height",500,10);</span></div><div class="line">	move(ball,&#123;<span class="string">"width"</span>:<span class="number">400</span>,<span class="string">"height"</span>:<span class="number">300</span>&#125;,<span class="number">10</span>);</div><div class="line">&#125;</div><div class="line">ball.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="comment">//move(this,"width",100,-10);</span></div><div class="line">	<span class="comment">//move(this,"height",100,-10);</span></div><div class="line">	move(ball,&#123;<span class="string">"width"</span>:<span class="number">100</span>,<span class="string">"height"</span>:<span class="number">100</span>&#125;,<span class="number">-10</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">obj,json,speed</span>)</span>&#123;</div><div class="line">	clearInterval(obj.timer);</div><div class="line">	<span class="keyword">var</span> mark = <span class="literal">true</span>;</div><div class="line">	obj.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</div><div class="line">			<span class="keyword">var</span> curr = <span class="built_in">parseInt</span>(getStyle(obj,attr));</div><div class="line">			<span class="keyword">var</span> target = json[attr];</div><div class="line">			<span class="keyword">if</span>(curr != target)&#123;</div><div class="line">				obj.style[attr] = curr+speed+<span class="string">"px"</span>;</div><div class="line">				mark = <span class="literal">false</span>;</div><div class="line">		  &#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(mark)&#123;</div><div class="line">			clearInterval(obj.timer);</div><div class="line">		&#125;</div><div class="line">	&#125;,<span class="number">1000</span>/<span class="number">30</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> getComputedStyle(obj)[attr]?getComputedStyle(obj)[attr]:obj.currentStyle[attr];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>需要注意的地方<ul>
<li>当需要两个动画的时候，会执行后面一个，解决办法如下，回调函数</li>
<li>当需要两个以上的时候，需要考虑是否可写一行代码变换多个属性</li>
<li>变换不一致的时候，定时器被提前清除</li>
</ul>
</li>
</ul>
<p><a href="http://codepen.io/poetries/pen/KazvNe" target="_blank" rel="external">在线演示</a></p>
<h5 id="1-2-3-运动速度之封装2–增加opacity"><a href="#1-2-3-运动速度之封装2–增加opacity" class="headerlink" title="1.2.3 运动速度之封装2–增加opacity"></a>1.2.3 运动速度之封装2–增加opacity</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ball"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#ball</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">  <span class="attribute">background</span>: blue;</div><div class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ball = <span class="built_in">document</span>.getElementById(<span class="string">"ball"</span>);</div><div class="line">ball.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	move(ball,&#123;<span class="string">"width"</span>:<span class="number">300</span>,<span class="string">"height"</span>:<span class="number">300</span>,<span class="string">"opacity"</span>:<span class="number">0.3</span>&#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//			ball.onmouseout = function()&#123;</span></div><div class="line"><span class="comment">//				move(ball,&#123;"width":100,"height":100&#125;,-10);</span></div><div class="line"><span class="comment">//			&#125;</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">obj,json</span>)</span>&#123;</div><div class="line">	clearInterval(obj.timer);</div><div class="line">	<span class="keyword">var</span> mark = <span class="literal">true</span>;</div><div class="line">	obj.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</div><div class="line">			<span class="keyword">var</span> curr = <span class="literal">null</span>;</div><div class="line">			<span class="keyword">var</span> target = json[attr];</div><div class="line">			<span class="keyword">var</span> speed = <span class="literal">null</span>;</div><div class="line">			<span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;</div><div class="line">				curr = getStyle(obj,attr)*<span class="number">100</span>;</div><div class="line">				speed = (target*<span class="number">100</span>-curr)*<span class="number">0.15</span>;</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				curr = <span class="built_in">parseInt</span>(getStyle(obj,attr));</div><div class="line">				speed = (target - curr)*<span class="number">0.15</span>;</div><div class="line">			&#125;</div><div class="line">			speed = speed&gt;<span class="number">0</span> ? <span class="built_in">Math</span>.ceil(speed):<span class="built_in">Math</span>.floor(speed);</div><div class="line">			<span class="keyword">if</span>(curr != target)&#123;</div><div class="line">				<span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;</div><div class="line">					obj.style[attr] = (curr+speed)/<span class="number">100</span>;</div><div class="line">				&#125;<span class="keyword">else</span> &#123;</div><div class="line">					obj.style[attr] = curr+speed+<span class="string">"px"</span>;</div><div class="line">				&#125;</div><div class="line">				</div><div class="line">				mark = <span class="literal">false</span>;</div><div class="line">		  &#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">if</span>(mark)&#123;</div><div class="line">			clearInterval(obj.timer);</div><div class="line">		&#125;</div><div class="line">	&#125;,<span class="number">1000</span>/<span class="number">30</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> getComputedStyle(obj)[attr]?getComputedStyle(obj)[attr]:obj.currentStyle[attr];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/poetries/pen/PWNKmj" target="_blank" rel="external">在线演示</a></p>
<ul>
<li>需要注意的地方<ul>
<li>当需要两个动画的时候，会执行后面一个，解决办法如下，回调函数</li>
<li>当需要两个以上的时候，需要考虑是否可写一行代码变换多个属性</li>
<li>变换不一致的时候，定时器被提前清除</li>
<li>速度<code>speed</code>不要写死</li>
</ul>
</li>
</ul>
<h4 id="1-3-运动框架之应用"><a href="#1-3-运动框架之应用" class="headerlink" title="1.3 运动框架之应用"></a>1.3 运动框架之应用</h4><h5 id="1-3-1-分享按钮"><a href="#1-3-1-分享按钮" class="headerlink" title="1.3.1 分享按钮"></a>1.3.1 分享按钮</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ball"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box1"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span>分享到<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> box1 = <span class="built_in">document</span>.getElementById(<span class="string">"box1"</span>);</div><div class="line"><span class="keyword">var</span> ball = <span class="built_in">document</span>.getElementById(<span class="string">"ball"</span>);</div><div class="line"></div><div class="line">box1.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  move(<span class="keyword">this</span>,<span class="string">"left"</span>,<span class="number">0</span>,<span class="number">10</span>);</div><div class="line">&#125;</div><div class="line">box1.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  move(<span class="keyword">this</span>,<span class="string">"left"</span>,<span class="number">-100</span>,<span class="number">-10</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//问题一：当需要两个动画的时候，会执行后面一个，解决办法如下，回调函数</span></div><div class="line">ball.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//同时变换 用的最多</span></div><div class="line">  <span class="comment">//move(this,"width",500,10);</span></div><div class="line">  <span class="comment">//move(this,"height",500,10);</span></div><div class="line">  <span class="comment">//列队在执行</span></div><div class="line">  move(ball,<span class="string">"width"</span>,<span class="number">500</span>,<span class="number">10</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    move(ball,<span class="string">"height"</span>,<span class="number">500</span>,<span class="number">10</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line">ball.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//move(this,"width",100,-10);</span></div><div class="line">  <span class="comment">//move(this,"height",100,-10);</span></div><div class="line">  move(ball,<span class="string">"width"</span>,<span class="number">100</span>,<span class="number">-10</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    move(ball,<span class="string">"height"</span>,<span class="number">100</span>,<span class="number">-10</span>);</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> timer = <span class="literal">null</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">obj,attr,target,speed,callback</span>)</span>&#123;</div><div class="line">  clearInterval(timer); <span class="comment">//obj.timer缓存到各自的obj下</span></div><div class="line">  timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> curr = <span class="built_in">parseInt</span>(getStyle(obj,attr));</div><div class="line">    <span class="keyword">if</span>(curr == target)&#123;</div><div class="line">      clearInterval(timer);</div><div class="line">      callback &amp;&amp; callback();</div><div class="line">    &#125;<span class="keyword">else</span> &#123;</div><div class="line">      obj.style[attr] = curr+speed+<span class="string">"px"</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;,<span class="number">1000</span>/<span class="number">30</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> getComputedStyle(obj)[attr]?getComputedStyle(obj)[attr]:obj.currentStyle[attr];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/poetries/pen/LxNjzp" target="_blank" rel="external">在线演示</a></p>
<h5 id="1-3-2运动框架之轮播图应用"><a href="#1-3-2运动框架之轮播图应用" class="headerlink" title="1.3.2运动框架之轮播图应用"></a>1.3.2运动框架之轮播图应用</h5><ul>
<li><a href="http://codepen.io/poetries/pen/JEXyaG" target="_blank" rel="external">焦点轮播–基本版本–在线演示</a></li>
<li><a href="http://codepen.io/poetries/pen/apNyPv" target="_blank" rel="external">焦点轮播–淡入淡出–在线演示</a></li>
<li><a href="http://codepen.io/poetries/pen/ggrxqo" target="_blank" rel="external">焦点轮播–左右–在线演示</a></li>
<li><a href="http://codepen.io/poetries/pen/mRPMoq" target="_blank" rel="external"> 焦点轮播–上下–在线演示</a></li>
</ul>
<h6 id="1-3-2-1-焦点轮播–左右-无缝-速度版实现"><a href="#1-3-2-1-焦点轮播–左右-无缝-速度版实现" class="headerlink" title="1.3.2.1 焦点轮播–左右-无缝-速度版实现"></a>1.3.2.1 焦点轮播–左右-无缝-速度版实现</h6><hr>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"imgBox"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>![](http://upload-images.jianshu.io/upload_images/1480597-c72819402fb928e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>![](http://upload-images.jianshu.io/upload_images/1480597-6830ca74fe1e6fcd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>![](http://upload-images.jianshu.io/upload_images/1480597-5d38376e63ffd0b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>![](http://upload-images.jianshu.io/upload_images/1480597-2aa932ffbba4091e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>![](http://upload-images.jianshu.io/upload_images/1480597-c72819402fb928e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://7xq6al.com1.z0.glb.clouddn.com/Animate.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">"#box"</span>);</div><div class="line">	<span class="keyword">var</span> imgUl = <span class="built_in">document</span>.querySelector(<span class="string">"#imgBox"</span>);</div><div class="line">	<span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelector(<span class="string">"#btn"</span>).querySelectorAll(<span class="string">"li"</span>);</div><div class="line">	<span class="keyword">var</span> len = btns.length;</div><div class="line">	<span class="keyword">var</span> lenImg = imgUl.querySelectorAll(<span class="string">"li"</span>).length;</div><div class="line">	<span class="keyword">var</span> index = <span class="number">0</span>; <span class="comment">//控制img的索引</span></div><div class="line">	<span class="keyword">var</span> cindex = <span class="number">0</span>;<span class="comment">//控制按钮的索引</span></div><div class="line">	<span class="keyword">var</span> timer = <span class="literal">null</span>;</div><div class="line">	</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;len;i++) &#123;</div><div class="line">			(<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line">				btns[index].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">					<span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</div><div class="line">						btns[j].className = <span class="string">""</span>;</div><div class="line">				&#125;</div><div class="line">					cindex = index;<span class="comment">//保持索引同步</span></div><div class="line">					animateSpeed(imgUl,&#123;<span class="string">"left"</span>:<span class="number">-970</span>*index&#125;);</div><div class="line">					<span class="keyword">this</span>.className = <span class="string">"active"</span>;</div><div class="line">				&#125;</div><div class="line">			&#125;)(i);</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">autoPlay</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		index++;</div><div class="line">		cindex++;</div><div class="line">		cindex %=len;<span class="comment">//限制长度</span></div><div class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;len;j++)&#123;</div><div class="line">			btns[j].className = <span class="string">""</span>;</div><div class="line">		&#125;</div><div class="line">		animateSpeed(imgUl,&#123;<span class="string">"left"</span>:<span class="number">-970</span>*index&#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			</div><div class="line">			<span class="keyword">if</span>(index == lenImg<span class="number">-1</span>)&#123;</div><div class="line">				<span class="keyword">this</span>.style.left = <span class="number">0</span>;</div><div class="line">				index = <span class="number">0</span>;</div><div class="line">			&#125;</div><div class="line">		&#125;);</div><div class="line">		btns[cindex].className = <span class="string">"active"</span>;</div><div class="line">	&#125;</div><div class="line">	timer = setInterval(autoPlay,<span class="number">2000</span>);</div><div class="line">	box.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		clearInterval(timer);</div><div class="line">	&#125;</div><div class="line">	box.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		timer = setInterval(autoPlay,<span class="number">2000</span>);</div><div class="line">	&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">*&#123;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">body</span>&#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">  <span class="attribute">font-family</span>: <span class="string">"微软雅黑"</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">li</span>&#123;</div><div class="line">  <span class="attribute">list-style</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#box</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">width</span>: <span class="number">970px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">350px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">30px</span> auto;</div><div class="line">  <span class="attribute">overflow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#imgBox</span> &#123;</div><div class="line">  <span class="attribute">width</span>:<span class="number">1000%</span>;<span class="comment">/*自动计算百分比*/</span></div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#imgBox</span> <span class="selector-tag">li</span>&#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">970px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">350px</span>;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#imgBox</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">970px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">350px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#btn</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">120px</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">right</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">bottom</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#btn</span> <span class="selector-tag">li</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">20px</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">  <span class="attribute">cursor</span>: pointer;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">2px</span>;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#btn</span> <span class="selector-tag">li</span><span class="selector-class">.active</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="number">#F17A5C</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//速度版本</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">obj,json,callback</span>)</span>&#123;</div><div class="line">        clearInterval(obj.timer);</div><div class="line">        obj.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> mark = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</div><div class="line">                <span class="keyword">var</span> cur = <span class="literal">null</span>;</div><div class="line">                <span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;</div><div class="line">                    cur = getStyle(obj,attr)*<span class="number">100</span>;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="comment">//如果没写 默认填充成0</span></div><div class="line">                    cur = <span class="built_in">parseInt</span>(getStyle(obj,attr))||<span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">var</span> target = json[attr];</div><div class="line">                <span class="keyword">var</span> speed = (target - cur)*<span class="number">0.2</span>;</div><div class="line">                speed = speed&gt;<span class="number">0</span>?<span class="built_in">Math</span>.ceil(speed):<span class="built_in">Math</span>.floor(speed);</div><div class="line">                <span class="keyword">if</span>(cur != target)&#123;</div><div class="line">                    <span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;</div><div class="line">                        <span class="comment">//IE opacity兼容问题</span></div><div class="line">                        obj.style.filter = <span class="string">"alpha(opacity="</span>+(cur+speed)+<span class="string">")"</span>;</div><div class="line">                        obj.style[attr] = (cur + speed)/<span class="number">100</span>;</div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        obj.style[attr] = cur + speed + <span class="string">"px"</span>;</div><div class="line">                    &#125;</div><div class="line">                    mark = <span class="literal">false</span>;</div><div class="line"></div><div class="line">                &#125;;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(mark)&#123;</div><div class="line">                clearInterval(obj.timer);</div><div class="line">                callback &amp;&amp; callback.call(obj);</div><div class="line">            &#125;</div><div class="line">        &#125;,<span class="number">1000</span>/<span class="number">30</span>);</div><div class="line">    &#125;</div><div class="line">    win.animateSpeed = move;</div><div class="line">&#125;)(<span class="built_in">window</span>);</div><div class="line"></div><div class="line"> 	</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> getComputedStyle(obj)[attr]?getComputedStyle(obj)[attr]:obj.currentStyle[attr];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getId</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二、JavaScript运动框架之时间版"><a href="#二、JavaScript运动框架之时间版" class="headerlink" title="二、JavaScript运动框架之时间版"></a>二、JavaScript运动框架之时间版</h3><hr>
<h4 id="2-1-关于运动"><a href="#2-1-关于运动" class="headerlink" title="2.1 关于运动"></a>2.1 关于运动</h4><hr>
<ul>
<li>速度的运动 通过速度来控制元素的 位移 / 折叠 / 淡入淡出</li>
<li>时间的运动 通过时间来控制元素的 位移 / 折叠 / 淡入淡出(jQuery)</li>
<li>时间的运动 基于一些数学公式 匀速运动 在路程的每一个点 速度都一样</li>
</ul>
<h4 id="2-2-一些案例演示"><a href="#2-2-一些案例演示" class="headerlink" title="2.2 一些案例演示"></a>2.2 一些案例演示</h4><hr>
<ul>
<li><a href="http://codepen.io/poetries/pen/jyqGPR" target="_blank" rel="external">运动框架之时间版本-1</a></li>
<li><a href="http://codepen.io/poetries/pen/apNLZB" target="_blank" rel="external">运动框架之时间版本-2</a></li>
<li><a href="http://codepen.io/poetries/pen/zNqEKB" target="_blank" rel="external">运动框架之时间版本-3</a></li>
<li><a href="http://codepen.io/poetries/pen/MJyEbY" target="_blank" rel="external">运动框架之时间版本-4</a></li>
</ul>
<h4 id="2-3-运动框架之时间版本-借助animate一些函数实现–综合完整版"><a href="#2-3-运动框架之时间版本-借助animate一些函数实现–综合完整版" class="headerlink" title="2.3 运动框架之时间版本-借助animate一些函数实现–综合完整版"></a>2.3 运动框架之时间版本-借助animate一些函数实现–综合完整版</h4><hr>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box5"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"></div><div class="line"> <span class="comment">//时间版本</span></div><div class="line"> getId(<span class="string">"box2"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> 	animateTime(getId(<span class="string">"box2"</span>),&#123;</div><div class="line"> 		<span class="string">"left"</span>:<span class="number">500</span>,</div><div class="line"> 		<span class="string">"opacity"</span>:<span class="number">100</span></div><div class="line"> 	&#125;,<span class="number">1000</span>,<span class="string">"elasticOut"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> 		<span class="keyword">this</span>.innerHTML = <span class="string">"我是时间版本"</span>;</div><div class="line"> 	&#125;);</div><div class="line"> &#125;</div><div class="line">getId(<span class="string">"box3"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> 	animateTime(getId(<span class="string">"box3"</span>),&#123;</div><div class="line"> 		<span class="string">"left"</span>:<span class="number">500</span>,</div><div class="line"> 		<span class="string">"opacity"</span>:<span class="number">100</span></div><div class="line"> 	&#125;,<span class="number">1000</span>,<span class="string">"backIn"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> 		<span class="keyword">this</span>.innerHTML = <span class="string">"我是时间版本"</span>;</div><div class="line"> 	&#125;);</div><div class="line"> &#125;</div><div class="line">getId(<span class="string">"box4"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> 	animateTime(getId(<span class="string">"box4"</span>),&#123;</div><div class="line"> 		<span class="string">"left"</span>:<span class="number">500</span>,</div><div class="line"> 		<span class="string">"opacity"</span>:<span class="number">100</span></div><div class="line"> 	&#125;,<span class="number">1000</span>,<span class="string">"bounceIn"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> 		<span class="keyword">this</span>.innerHTML = <span class="string">"我是时间版本"</span>;</div><div class="line"> 	&#125;);</div><div class="line"> &#125;</div><div class="line">getId(<span class="string">"box5"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> 	animateTime(getId(<span class="string">"box5"</span>),&#123;</div><div class="line"> 		<span class="string">"left"</span>:<span class="number">500</span>,</div><div class="line"> 		<span class="string">"opacity"</span>:<span class="number">100</span></div><div class="line"> 	&#125;,<span class="number">1000</span>,<span class="string">"bounceBoth"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> 		<span class="keyword">this</span>.innerHTML = <span class="string">"我是时间版本"</span>;</div><div class="line"> 	&#125;);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> </div><div class="line"> </div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#box1</span>,<span class="selector-id">#box2</span>,<span class="selector-id">#box3</span>,<span class="selector-id">#box4</span>,<span class="selector-id">#box5</span> &#123;</div><div class="line">	<span class="attribute">position</span>: relative;</div><div class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">line-height</span>: <span class="number">100px</span>;</div><div class="line">	<span class="attribute">text-align</span>: center;</div><div class="line">	<span class="attribute">background</span>: red;</div><div class="line">	<span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">	<span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">	<span class="attribute">opacity</span>: <span class="number">0.5</span>;</div><div class="line">	<span class="attribute">filter</span>:<span class="built_in">alpha</span>(opcity=20);<span class="comment">/**兼容IE*/</span></div><div class="line">	<span class="attribute">margin</span>: <span class="number">10px</span>;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*t b c d</span></div><div class="line">t current time   :nTime-sTime</div><div class="line">b begining time  :curr</div><div class="line">c chang in value :变化量end-curr</div><div class="line">d duration       :持续时间 time */</div><div class="line"><span class="comment">/**</span></div><div class="line">* </div><div class="line">* @param &#123;Object&#125; obj 元素对象</div><div class="line">* @param &#123;Object&#125; json 多个属性</div><div class="line">* @param &#123;Object&#125; time 变化时间</div><div class="line">* @param &#123;Object&#125; prop 运动函数</div><div class="line">* @param &#123;Object&#125; callback 回调函数</div><div class="line">*/</div><div class="line"><span class="comment">//时间版本</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>)</span>&#123; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">obj,json,time,prop,callback</span>)</span>&#123;</div><div class="line"><span class="comment">//一般定时器结束后最好清除</span></div><div class="line">clearInterval(obj.timer);</div><div class="line"><span class="keyword">var</span> curr = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> end = &#123;&#125;;</div><div class="line"><span class="comment">//通过for in 在上车前把所有东西装到包里</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</div><div class="line">	<span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;<span class="comment">//opacity特殊东西特殊对待</span></div><div class="line">		curr[attr] = getStyle(obj,attr)*<span class="number">100</span>;<span class="comment">//化为整数好计算</span></div><div class="line">	&#125;<span class="keyword">else</span>&#123;</div><div class="line">		curr[attr] = <span class="built_in">parseInt</span>(getStyle(obj,attr))||<span class="number">0</span>;</div><div class="line">	&#125;</div><div class="line">	end[attr] = json[attr];</div><div class="line">	</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//如果没写默认值 默认就是0 不然在IE出问题</span></div><div class="line"><span class="comment">//var curr = parseInt(getStyle(obj,attr))||0;</span></div><div class="line"><span class="comment">//var end = target;</span></div><div class="line"><span class="keyword">var</span> sTime = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//开始时间T0</span></div><div class="line"><span class="comment">//开始变换了</span></div><div class="line">obj.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> nTime = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//当前时间Tt</span></div><div class="line">	<span class="keyword">var</span> t = nTime -sTime;</div><div class="line">	<span class="keyword">var</span> d = time;</div><div class="line">	<span class="comment">//St = (Tt-T0)/Time*(S-S0)+S0</span></div><div class="line">	<span class="comment">//(nTime-sTime)/time 比例最多为1</span></div><div class="line">	<span class="comment">/*var prop = (nTime-sTime)/time; */</span></div><div class="line">	<span class="keyword">if</span>(t &gt;=d)&#123;</div><div class="line">		t = d;</div><div class="line">		clearInterval(obj.timer);</div><div class="line">		callback &amp;&amp; callback.call(obj);</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</div><div class="line">		<span class="keyword">var</span> b = curr[attr];</div><div class="line">		<span class="keyword">var</span> c = end[attr] - b;</div><div class="line">		<span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;</div><div class="line">			<span class="comment">//var s = prop*(end[attr]-curr[attr])+curr[attr];</span></div><div class="line">			<span class="keyword">var</span> s = Tween[prop](t,b,c,d);</div><div class="line">			obj.style[attr] = s/<span class="number">100</span>;</div><div class="line">			obj.style.filter = <span class="string">"alpha(opacity="</span>+s+<span class="string">")"</span>;</div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			<span class="comment">//var s = prop*(end[attr]-curr[attr])+curr[attr];</span></div><div class="line">			<span class="keyword">var</span> s = Tween[prop](t,b,c,d);</div><div class="line">			obj.style[attr] = s+<span class="string">"px"</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	</div><div class="line">&#125;,<span class="number">13</span>);</div><div class="line"><span class="keyword">var</span> Tween = &#123;</div><div class="line">    <span class="attr">linear</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//匀速</span></div><div class="line">        <span class="keyword">return</span> c*t/d + b;   <span class="comment">//  t/d = prop;</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">easeIn</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//加速曲线</span></div><div class="line">        <span class="keyword">return</span> c*(t/=d)*t + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">easeOut</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//减速曲线</span></div><div class="line">        <span class="keyword">return</span> -c *(t/=d)*(t<span class="number">-2</span>) + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">easeBoth</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//加速减速曲线</span></div><div class="line">        <span class="keyword">if</span> ((t/=d/<span class="number">2</span>) &lt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> c/<span class="number">2</span>*t*t + b;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -c/<span class="number">2</span> * ((--t)*(t<span class="number">-2</span>) - <span class="number">1</span>) + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">easeInStrong</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//加加速曲线</span></div><div class="line">        <span class="keyword">return</span> c*(t/=d)*t*t*t + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">easeOutStrong</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//减减速曲线</span></div><div class="line">        <span class="keyword">return</span> -c * ((t=t/d<span class="number">-1</span>)*t*t*t - <span class="number">1</span>) + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">easeBothStrong</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//加加速减减速曲线</span></div><div class="line">        <span class="keyword">if</span> ((t/=d/<span class="number">2</span>) &lt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> c/<span class="number">2</span>*t*t*t*t + b;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -c/<span class="number">2</span> * ((t-=<span class="number">2</span>)*t*t*t - <span class="number">2</span>) + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">elasticIn</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, a, p</span>)</span>&#123;  <span class="comment">//正弦衰减曲线（弹动渐入）</span></div><div class="line">        <span class="keyword">if</span> (t === <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> b;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( (t /= d) == <span class="number">1</span> ) &#123;</div><div class="line">            <span class="keyword">return</span> b+c;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!p) &#123;</div><div class="line">            p=d*<span class="number">0.3</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!a || a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">            a = c;</div><div class="line">            <span class="keyword">var</span> s = p/<span class="number">4</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">var</span> s = p/(<span class="number">2</span>*<span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin (c/a);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -(a*<span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">10</span>*(t-=<span class="number">1</span>)) * <span class="built_in">Math</span>.sin( (t*d-s)*(<span class="number">2</span>*<span class="built_in">Math</span>.PI)/p )) + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">elasticOut</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, a, p</span>)</span>&#123;    <span class="comment">//正弦增强曲线（弹动渐出）</span></div><div class="line">        <span class="keyword">if</span> (t === <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> b;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( (t /= d) == <span class="number">1</span> ) &#123;</div><div class="line">            <span class="keyword">return</span> b+c;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!p) &#123;</div><div class="line">            p=d*<span class="number">0.3</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!a || a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">            a = c;</div><div class="line">            <span class="keyword">var</span> s = p / <span class="number">4</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">var</span> s = p/(<span class="number">2</span>*<span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin (c/a);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> a*<span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">-10</span>*t) * <span class="built_in">Math</span>.sin( (t*d-s)*(<span class="number">2</span>*<span class="built_in">Math</span>.PI)/p ) + c + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">elasticBoth</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, a, p</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (t === <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> b;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( (t /= d/<span class="number">2</span>) == <span class="number">2</span> ) &#123;</div><div class="line">            <span class="keyword">return</span> b+c;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!p) &#123;</div><div class="line">            p = d*(<span class="number">0.3</span>*<span class="number">1.5</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( !a || a &lt; <span class="built_in">Math</span>.abs(c) ) &#123;</div><div class="line">            a = c;</div><div class="line">            <span class="keyword">var</span> s = p/<span class="number">4</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">var</span> s = p/(<span class="number">2</span>*<span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin (c/a);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (t &lt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> - <span class="number">0.5</span>*(a*<span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">10</span>*(t-=<span class="number">1</span>)) *</div><div class="line">                    <span class="built_in">Math</span>.sin( (t*d-s)*(<span class="number">2</span>*<span class="built_in">Math</span>.PI)/p )) + b;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> a*<span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">-10</span>*(t-=<span class="number">1</span>)) *</div><div class="line">                <span class="built_in">Math</span>.sin( (t*d-s)*(<span class="number">2</span>*<span class="built_in">Math</span>.PI)/p )*<span class="number">0.5</span> + c + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">backIn</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, s</span>)</span>&#123;     <span class="comment">//回退加速（回退渐入）</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> s == <span class="string">'undefined'</span>) &#123;</div><div class="line">           s = <span class="number">1.70158</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> c*(t/=d)*t*((s+<span class="number">1</span>)*t - s) + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">backOut</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, s</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> s == <span class="string">'undefined'</span>) &#123;</div><div class="line">            s = <span class="number">3.70158</span>;  <span class="comment">//回缩的距离</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> c*((t=t/d<span class="number">-1</span>)*t*((s+<span class="number">1</span>)*t + s) + <span class="number">1</span>) + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">backBoth</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, s</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> s == <span class="string">'undefined'</span>) &#123;</div><div class="line">            s = <span class="number">1.70158</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ((t /= d/<span class="number">2</span> ) &lt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> c/<span class="number">2</span>*(t*t*(((s*=(<span class="number">1.525</span>))+<span class="number">1</span>)*t - s)) + b;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> c/<span class="number">2</span>*((t-=<span class="number">2</span>)*t*(((s*=(<span class="number">1.525</span>))+<span class="number">1</span>)*t + s) + <span class="number">2</span>) + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">bounceIn</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;    <span class="comment">//弹球减振（弹球渐出）</span></div><div class="line">        <span class="keyword">return</span> c - Tween[<span class="string">'bounceOut'</span>](d-t, <span class="number">0</span>, c, d) + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">bounceOut</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> ((t/=d) &lt; (<span class="number">1</span>/<span class="number">2.75</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> c*(<span class="number">7.5625</span>*t*t) + b;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; (<span class="number">2</span>/<span class="number">2.75</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> c*(<span class="number">7.5625</span>*(t-=(<span class="number">1.5</span>/<span class="number">2.75</span>))*t + <span class="number">0.75</span>) + b;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; (<span class="number">2.5</span>/<span class="number">2.75</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> c*(<span class="number">7.5625</span>*(t-=(<span class="number">2.25</span>/<span class="number">2.75</span>))*t + <span class="number">0.9375</span>) + b;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> c*(<span class="number">7.5625</span>*(t-=(<span class="number">2.625</span>/<span class="number">2.75</span>))*t + <span class="number">0.984375</span>) + b;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">bounceBoth</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (t &lt; d/<span class="number">2</span>) &#123;</div><div class="line">            <span class="keyword">return</span> Tween[<span class="string">'bounceIn'</span>](t*<span class="number">2</span>, <span class="number">0</span>, c, d) * <span class="number">0.5</span> + b;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Tween[<span class="string">'bounceOut'</span>](t*<span class="number">2</span>-d, <span class="number">0</span>, c, d) * <span class="number">0.5</span> + c*<span class="number">0.5</span> + b;</div><div class="line">        &#125;</div><div class="line">&#125;;</div><div class="line">&#125;</div><div class="line">win.animateTime = move;	</div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<p><a href="http://codepen.io/poetries/pen/ggrGLj" target="_blank" rel="external">在线演示</a></p>
<h3 id="三、运动框架之时间速度版完整封装"><a href="#三、运动框架之时间速度版完整封装" class="headerlink" title="三、运动框架之时间速度版完整封装"></a>三、运动框架之时间速度版完整封装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*t b c d</span></div><div class="line">t current time   :nTime-sTime</div><div class="line">b begining time  :curr</div><div class="line">c chang in value :变化量end-curr</div><div class="line">d duration       :持续时间 time */</div><div class="line"><span class="comment">/**</span></div><div class="line"> * </div><div class="line"> * @param &#123;Object&#125; obj 元素对象</div><div class="line"> * @param &#123;Object&#125; json 多个属性</div><div class="line"> * @param &#123;Object&#125; time 变化时间</div><div class="line"> * @param &#123;Object&#125; prop 运动函数</div><div class="line"> * @param &#123;Object&#125; callback 回调函数</div><div class="line"> */</div><div class="line"><span class="comment">//时间版本</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>)</span>&#123; </div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">obj,json,time,prop,callback</span>)</span>&#123;</div><div class="line">	<span class="comment">//一般定时器结束后最好清除</span></div><div class="line">	clearInterval(obj.timer);</div><div class="line">	<span class="keyword">var</span> curr = &#123;&#125;;</div><div class="line">	<span class="keyword">var</span> end = &#123;&#125;;</div><div class="line">	<span class="comment">//通过for in 在上车前把所有东西装到包里</span></div><div class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</div><div class="line">		<span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;<span class="comment">//opacity特殊东西特殊对待</span></div><div class="line">			curr[attr] = getStyle(obj,attr)*<span class="number">100</span>;<span class="comment">//化为整数好计算</span></div><div class="line">		&#125;<span class="keyword">else</span>&#123;</div><div class="line">			curr[attr] = <span class="built_in">parseInt</span>(getStyle(obj,attr))||<span class="number">0</span>;</div><div class="line">		&#125;</div><div class="line">		end[attr] = json[attr];</div><div class="line">		</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">//如果没写默认值 默认就是0 不然在IE出问题</span></div><div class="line">	<span class="comment">//var curr = parseInt(getStyle(obj,attr))||0;</span></div><div class="line">	<span class="comment">//var end = target;</span></div><div class="line">	<span class="keyword">var</span> sTime = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//开始时间T0</span></div><div class="line">	<span class="comment">//开始变换了</span></div><div class="line">	obj.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		<span class="keyword">var</span> nTime = <span class="keyword">new</span> <span class="built_in">Date</span>();<span class="comment">//当前时间Tt</span></div><div class="line">		<span class="keyword">var</span> t = nTime -sTime;</div><div class="line">		<span class="keyword">var</span> d = time;</div><div class="line">		<span class="comment">//St = (Tt-T0)/Time*(S-S0)+S0</span></div><div class="line">		<span class="comment">//(nTime-sTime)/time 比例最多为1</span></div><div class="line">		<span class="comment">/*var prop = (nTime-sTime)/time; */</span></div><div class="line">		<span class="keyword">if</span>(t &gt;=d)&#123;</div><div class="line">			t = d;</div><div class="line">			clearInterval(obj.timer);</div><div class="line">			callback &amp;&amp; callback.call(obj);</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</div><div class="line">			<span class="keyword">var</span> b = curr[attr];</div><div class="line">			<span class="keyword">var</span> c = end[attr] - b;</div><div class="line">			<span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;</div><div class="line">				<span class="comment">//var s = prop*(end[attr]-curr[attr])+curr[attr];</span></div><div class="line">				<span class="keyword">var</span> s = Tween[prop](t,b,c,d);</div><div class="line">				obj.style[attr] = s/<span class="number">100</span>;</div><div class="line">				obj.style.filter = <span class="string">"alpha(opacity="</span>+s+<span class="string">")"</span>;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="comment">//var s = prop*(end[attr]-curr[attr])+curr[attr];</span></div><div class="line">				<span class="keyword">var</span> s = Tween[prop](t,b,c,d);</div><div class="line">				obj.style[attr] = s+<span class="string">"px"</span>;</div><div class="line">			&#125;</div><div class="line"></div><div class="line">		&#125;</div><div class="line"></div><div class="line">		</div><div class="line">	&#125;,<span class="number">13</span>);</div><div class="line">	<span class="keyword">var</span> Tween = &#123;</div><div class="line">        <span class="attr">linear</span>: <span class="function"><span class="keyword">function</span> (<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//匀速</span></div><div class="line">            <span class="keyword">return</span> c*t/d + b;   <span class="comment">//  t/d = prop;</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">easeIn</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//加速曲线</span></div><div class="line">            <span class="keyword">return</span> c*(t/=d)*t + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">easeOut</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//减速曲线</span></div><div class="line">            <span class="keyword">return</span> -c *(t/=d)*(t<span class="number">-2</span>) + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">easeBoth</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//加速减速曲线</span></div><div class="line">            <span class="keyword">if</span> ((t/=d/<span class="number">2</span>) &lt; <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> c/<span class="number">2</span>*t*t + b;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> -c/<span class="number">2</span> * ((--t)*(t<span class="number">-2</span>) - <span class="number">1</span>) + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">easeInStrong</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//加加速曲线</span></div><div class="line">            <span class="keyword">return</span> c*(t/=d)*t*t*t + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">easeOutStrong</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//减减速曲线</span></div><div class="line">            <span class="keyword">return</span> -c * ((t=t/d<span class="number">-1</span>)*t*t*t - <span class="number">1</span>) + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">easeBothStrong</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;  <span class="comment">//加加速减减速曲线</span></div><div class="line">            <span class="keyword">if</span> ((t/=d/<span class="number">2</span>) &lt; <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> c/<span class="number">2</span>*t*t*t*t + b;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> -c/<span class="number">2</span> * ((t-=<span class="number">2</span>)*t*t*t - <span class="number">2</span>) + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">elasticIn</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, a, p</span>)</span>&#123;  <span class="comment">//正弦衰减曲线（弹动渐入）</span></div><div class="line">            <span class="keyword">if</span> (t === <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> b;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> ( (t /= d) == <span class="number">1</span> ) &#123;</div><div class="line">                <span class="keyword">return</span> b+c;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!p) &#123;</div><div class="line">                p=d*<span class="number">0.3</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!a || a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">                a = c;</div><div class="line">                <span class="keyword">var</span> s = p/<span class="number">4</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">var</span> s = p/(<span class="number">2</span>*<span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin (c/a);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> -(a*<span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">10</span>*(t-=<span class="number">1</span>)) * <span class="built_in">Math</span>.sin( (t*d-s)*(<span class="number">2</span>*<span class="built_in">Math</span>.PI)/p )) + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">elasticOut</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, a, p</span>)</span>&#123;    <span class="comment">//正弦增强曲线（弹动渐出）</span></div><div class="line">            <span class="keyword">if</span> (t === <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> b;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> ( (t /= d) == <span class="number">1</span> ) &#123;</div><div class="line">                <span class="keyword">return</span> b+c;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!p) &#123;</div><div class="line">                p=d*<span class="number">0.3</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!a || a &lt; <span class="built_in">Math</span>.abs(c)) &#123;</div><div class="line">                a = c;</div><div class="line">                <span class="keyword">var</span> s = p / <span class="number">4</span>;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">var</span> s = p/(<span class="number">2</span>*<span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin (c/a);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> a*<span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">-10</span>*t) * <span class="built_in">Math</span>.sin( (t*d-s)*(<span class="number">2</span>*<span class="built_in">Math</span>.PI)/p ) + c + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">elasticBoth</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, a, p</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span> (t === <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">return</span> b;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> ( (t /= d/<span class="number">2</span>) == <span class="number">2</span> ) &#123;</div><div class="line">                <span class="keyword">return</span> b+c;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (!p) &#123;</div><div class="line">                p = d*(<span class="number">0.3</span>*<span class="number">1.5</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> ( !a || a &lt; <span class="built_in">Math</span>.abs(c) ) &#123;</div><div class="line">                a = c;</div><div class="line">                <span class="keyword">var</span> s = p/<span class="number">4</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">var</span> s = p/(<span class="number">2</span>*<span class="built_in">Math</span>.PI) * <span class="built_in">Math</span>.asin (c/a);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (t &lt; <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> - <span class="number">0.5</span>*(a*<span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">10</span>*(t-=<span class="number">1</span>)) *</div><div class="line">                        <span class="built_in">Math</span>.sin( (t*d-s)*(<span class="number">2</span>*<span class="built_in">Math</span>.PI)/p )) + b;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> a*<span class="built_in">Math</span>.pow(<span class="number">2</span>,<span class="number">-10</span>*(t-=<span class="number">1</span>)) *</div><div class="line">                    <span class="built_in">Math</span>.sin( (t*d-s)*(<span class="number">2</span>*<span class="built_in">Math</span>.PI)/p )*<span class="number">0.5</span> + c + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">backIn</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, s</span>)</span>&#123;     <span class="comment">//回退加速（回退渐入）</span></div><div class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> s == <span class="string">'undefined'</span>) &#123;</div><div class="line">               s = <span class="number">1.70158</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> c*(t/=d)*t*((s+<span class="number">1</span>)*t - s) + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">backOut</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, s</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> s == <span class="string">'undefined'</span>) &#123;</div><div class="line">                s = <span class="number">3.70158</span>;  <span class="comment">//回缩的距离</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> c*((t=t/d<span class="number">-1</span>)*t*((s+<span class="number">1</span>)*t + s) + <span class="number">1</span>) + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">backBoth</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d, s</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> s == <span class="string">'undefined'</span>) &#123;</div><div class="line">                s = <span class="number">1.70158</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> ((t /= d/<span class="number">2</span> ) &lt; <span class="number">1</span>) &#123;</div><div class="line">                <span class="keyword">return</span> c/<span class="number">2</span>*(t*t*(((s*=(<span class="number">1.525</span>))+<span class="number">1</span>)*t - s)) + b;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> c/<span class="number">2</span>*((t-=<span class="number">2</span>)*t*(((s*=(<span class="number">1.525</span>))+<span class="number">1</span>)*t + s) + <span class="number">2</span>) + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">bounceIn</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;    <span class="comment">//弹球减振（弹球渐出）</span></div><div class="line">            <span class="keyword">return</span> c - Tween[<span class="string">'bounceOut'</span>](d-t, <span class="number">0</span>, c, d) + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">bounceOut</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span> ((t/=d) &lt; (<span class="number">1</span>/<span class="number">2.75</span>)) &#123;</div><div class="line">                <span class="keyword">return</span> c*(<span class="number">7.5625</span>*t*t) + b;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; (<span class="number">2</span>/<span class="number">2.75</span>)) &#123;</div><div class="line">                <span class="keyword">return</span> c*(<span class="number">7.5625</span>*(t-=(<span class="number">1.5</span>/<span class="number">2.75</span>))*t + <span class="number">0.75</span>) + b;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; (<span class="number">2.5</span>/<span class="number">2.75</span>)) &#123;</div><div class="line">                <span class="keyword">return</span> c*(<span class="number">7.5625</span>*(t-=(<span class="number">2.25</span>/<span class="number">2.75</span>))*t + <span class="number">0.9375</span>) + b;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> c*(<span class="number">7.5625</span>*(t-=(<span class="number">2.625</span>/<span class="number">2.75</span>))*t + <span class="number">0.984375</span>) + b;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">bounceBoth</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span> (t &lt; d/<span class="number">2</span>) &#123;</div><div class="line">                <span class="keyword">return</span> Tween[<span class="string">'bounceIn'</span>](t*<span class="number">2</span>, <span class="number">0</span>, c, d) * <span class="number">0.5</span> + b;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> Tween[<span class="string">'bounceOut'</span>](t*<span class="number">2</span>-d, <span class="number">0</span>, c, d) * <span class="number">0.5</span> + c*<span class="number">0.5</span> + b;</div><div class="line">            &#125;</div><div class="line">    &#125;;</div><div class="line"> &#125;</div><div class="line">	win.animateTime = move;	</div><div class="line"> &#125;)(<span class="built_in">window</span>);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//速度版本</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">obj,json,callback</span>)</span>&#123;</div><div class="line">        clearInterval(obj.timer);</div><div class="line">        obj.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> mark = <span class="literal">true</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> json)&#123;</div><div class="line">                <span class="keyword">var</span> cur = <span class="literal">null</span>;</div><div class="line">                <span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;</div><div class="line">                    cur = getStyle(obj,attr)*<span class="number">100</span>;</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="comment">//如果没写 默认填充成0</span></div><div class="line">                    cur = <span class="built_in">parseInt</span>(getStyle(obj,attr))||<span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">var</span> target = json[attr];</div><div class="line">                <span class="keyword">var</span> speed = (target - cur)*<span class="number">0.2</span>;</div><div class="line">                speed = speed&gt;<span class="number">0</span>?<span class="built_in">Math</span>.ceil(speed):<span class="built_in">Math</span>.floor(speed);</div><div class="line">                <span class="keyword">if</span>(cur != target)&#123;</div><div class="line">                    <span class="keyword">if</span>(attr == <span class="string">"opacity"</span>)&#123;</div><div class="line">                        <span class="comment">//IE opacity兼容问题</span></div><div class="line">                        obj.style.filter = <span class="string">"alpha(opacity="</span>+(cur+speed)+<span class="string">")"</span>;</div><div class="line">                        obj.style[attr] = (cur + speed)/<span class="number">100</span>;</div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        obj.style[attr] = cur + speed + <span class="string">"px"</span>;</div><div class="line">                    &#125;</div><div class="line">                    mark = <span class="literal">false</span>;</div><div class="line"></div><div class="line">                &#125;;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(mark)&#123;</div><div class="line">                clearInterval(obj.timer);</div><div class="line">                callback &amp;&amp; callback.call(obj);</div><div class="line">            &#125;</div><div class="line">        &#125;,<span class="number">1000</span>/<span class="number">30</span>);</div><div class="line">    &#125;</div><div class="line">    win.animateSpeed = move;</div><div class="line">&#125;)(<span class="built_in">window</span>);</div><div class="line"></div><div class="line"> 	</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">obj,attr</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> getComputedStyle(obj)[attr]?getComputedStyle(obj)[attr]:obj.currentStyle[attr];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getId</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>更多使用记录，详情 <a href="https://github.com/poetries/Animate" target="_blank" rel="external">https://github.com/poetries/Animate</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、JavaScript运动框架之速度版&quot;&gt;&lt;a href=&quot;#一、JavaScript运动框架之速度版&quot; class=&quot;headerlink&quot; title=&quot;一、JavaScript运动框架之速度版&quot;&gt;&lt;/a&gt;一、JavaScript运动框架之速度版&lt;/h3&gt;&lt;
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="运动框架" scheme="http://blog.poetries.top/tags/%E8%BF%90%E5%8A%A8%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript作用域分析总结</title>
    <link href="http://blog.poetries.top/2017/01/10/js-scope/"/>
    <id>http://blog.poetries.top/2017/01/10/js-scope/</id>
    <published>2017-01-10T04:50:43.000Z</published>
    <updated>2017-06-11T07:22:47.753Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文链接 <a href="http://blog.poetries.top/2017/01/10/js-scope">http://blog.poetries.top/2017/01/10/js-scope</a></p>
</blockquote>
<h4 id="一、JS解析顺序和作用域："><a href="#一、JS解析顺序和作用域：" class="headerlink" title="一、JS解析顺序和作用域："></a>一、JS解析顺序和作用域：</h4><ul>
<li>解析顺序：<ul>
<li>定义（先找<code>var</code>  <code>function</code>）  </li>
<li>执行 ( 在逐步执行 )</li>
<li>注意:如果函数名和<code>var</code>定义的变量相同，<code>var</code>会被函数覆盖</li>
</ul>
</li>
<li>作用域：<ul>
<li>每个<code>script</code>是一个作用域</li>
<li>每个函数<code>{}</code>是一个作用域</li>
<li>程序每执行到一个作用域，都是按照解析顺序解析代码；</li>
<li>作用域链:从内往外找要找函数内的变量；</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h4 id="二、案例分析"><a href="#二、案例分析" class="headerlink" title="二、案例分析"></a>二、案例分析</h4><hr>
<ul>
<li><p><strong>分析前请记住这段话</strong></p>
<ul>
<li>解析顺序：<ul>
<li>定义（先找<code>var</code>  <code>function</code>）</li>
<li>执行 ( 在逐步执行 )</li>
<li>注意:如果函数名和<code>var</code>定义的变量相同，<code>var</code>会被函数覆盖</li>
</ul>
</li>
</ul>
</li>
<li><p>举例1</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">alert( a );</div><div class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">alert( a );</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">20</span>)&#125;;</div><div class="line">alert( a );</div><div class="line"><span class="keyword">var</span> a = <span class="number">30</span>;</div><div class="line">alert( a );</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">40</span>)&#125;;</div><div class="line">alert( a );</div><div class="line"><span class="comment">// 函数块 10 10 30 30</span></div></pre></td></tr></table></figure>
<blockquote>
<p>分析</p>
<ul>
<li>1:找定义 function a(){alert(40)};</li>
<li>2:执行 alert( a ) //函数块<pre><code>a = 10;
alert( a ); // 10
alert( a ); // 10
a = 30;
alert( a ); // 30
alert( a ); // 30
</code></pre></li>
</ul>
</blockquote>
<ul>
<li>举例2</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">a();</div><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert( <span class="number">1</span> );&#125;</div><div class="line">a();</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">2</span>);&#125;</div><div class="line">a();</div><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="number">3</span>);&#125;</div><div class="line">a();</div><div class="line"><span class="comment">//2 1 1 3</span></div></pre></td></tr></table></figure>
<blockquote>
<p>分析</p>
<ul>
<li>1:找定义<pre><code>function a(){alert(2);}
</code></pre></li>
<li>2:执行<pre><code>a(); //2
a = function(){alert( 1 );}
a(); //1
a(); //1
a = function b(){alert(3);};
a();//3
</code></pre></li>
</ul>
</blockquote>
<ul>
<li>举例3</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> a = <span class="number">0</span>;</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">           alert( a );</div><div class="line">           <span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line">           alert( a );</div><div class="line">    &#125;</div><div class="line"> alert(a);</div><div class="line">fn();</div></pre></td></tr></table></figure>
<blockquote>
<p>分析</p>
<ul>
<li>1:找定义<pre><code>var a
function fn(){}
</code></pre></li>
<li>2:执行<pre><code>a = 0;
fn(); ===&gt; 1:找定义
           2:执行 alert(a); //undefined
                a = 1;
                alert(a); //1
</code></pre></li>
</ul>
</blockquote>
<ul>
<li>举例4</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">fn()();</div><div class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert( a );</div><div class="line">	<span class="keyword">var</span> a = <span class="number">3</span>;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		alert( a );</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> c;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>分析</p>
<ul>
<li>1:找定义<pre><code>var a
function fn
</code></pre></li>
<li>2:执行<pre><code>fn() ===&gt; 1:找定义 function c
          2:执行  alert(a); //undefined
                a = 3
                return function c
fn()() ==&gt;1:找定义 function c
        2:alert(a);//undefined 3
a = 0;
</code></pre></li>
</ul>
</blockquote>
<ul>
<li>举例5</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> a = <span class="number">10</span>;</div><div class="line">	alert(a);</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>)</span>&#123;</div><div class="line">		a++;</div><div class="line">		alert(a);</div><div class="line">	&#125;;</div><div class="line">	<span class="keyword">return</span> b;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> c = fn();</div><div class="line">c();</div><div class="line">fn()();</div><div class="line">c();</div></pre></td></tr></table></figure>
<blockquote>
<p>分析</p>
<ul>
<li>1:找定义 var a<pre><code>function fn
var c
</code></pre></li>
<li>2:执行  a = 5;<pre><code>c = fn(); === &gt; 1:找定义 var a
                     function b
                2:执行  a = 10;
                     alert(a);  //10
                     return function b(){};
c();=========&gt;  1:找定义
                2:执行 a++; //11
                     alert(a);//11
                     fn()(); //10 11
c() ========&gt;   1:找定义
                2:执行 a++;//11+1;
                     alert(a); //12
</code></pre></li>
</ul>
</blockquote>
<ul>
<li>举例6</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//alert(x);//9:执行弹出x,结果x没定义,错误.</span></div><div class="line">alert(i);<span class="comment">//9:执行弹出i,然而i之前已经定义,只不过没地址,因此是undefiend</span></div><div class="line"><span class="keyword">var</span> i = <span class="number">10</span>;<span class="comment">//1:var i;    10:把常量池中10的地址赋给栈中的i</span></div><div class="line"><span class="keyword">var</span> j = <span class="string">"你好"</span>;<span class="comment">//2:var j;   11:把常量池中 你好 的地址复给栈中的j</span></div><div class="line"><span class="keyword">var</span> k = z = <span class="literal">null</span>;<span class="comment">//3:var k,z;  12:把堆中null的地址赋值给z和k</span></div><div class="line"><span class="keyword">var</span> m = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//4:var m;   5:function匿名函数  13:把匿名函数在堆中的地址赋给栈中的m</span></div><div class="line">    alert(<span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> b = <span class="built_in">document</span>.body;<span class="comment">//6:var b;    14:把堆中document.body对象的地址赋给栈中的b</span></div><div class="line"><span class="keyword">var</span> f = <span class="literal">true</span>;<span class="comment">//7:var f; 15:把常量池中true的地址赋给栈中的变量f</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>)</span>&#123;<span class="comment">//8:function m;</span></div><div class="line">    alert(<span class="number">1</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>举例7</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    c = <span class="number">50</span>;<span class="comment">//在局部变量中找不到定义的c 沿着作用域链找到了全局变量的c</span></div><div class="line">    alert(<span class="string">'哈哈哈'</span>);</div><div class="line">    <span class="comment">//var c;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> c = <span class="number">150</span>; <span class="comment">// 函数m()还未执行到 还没被销毁 此时全局c的值c=50</span></div><div class="line">m();</div><div class="line"><span class="keyword">var</span> c = <span class="number">20</span>;<span class="comment">//到这里一步 m()已经执行完了 函数已经销毁了  这里的c还是20</span></div><div class="line">alert(c);<span class="comment">//20</span></div></pre></td></tr></table></figure>
<ul>
<li>举例8</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    c = <span class="number">50</span>;<span class="comment">//在局部变量中找不到定义的c 沿着作用域链找到了全局变量的c</span></div><div class="line">    alert(<span class="string">'哈哈哈'</span>);</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        c = <span class="number">30</span>;</div><div class="line">        alert(<span class="string">'嘻嘻'</span>);</div><div class="line">    &#125;</div><div class="line">    inner();<span class="comment">//c在函数内部找不到定义 所以沿着作用域链找到了全局的c</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> c = <span class="number">20</span>;<span class="comment">//到这里一步 m()还没执行 函数没被销毁  这里的c是30</span></div><div class="line">m();</div><div class="line"></div><div class="line">alert(c);<span class="comment">//30</span></div></pre></td></tr></table></figure>
<h4 id="三、闭包"><a href="#三、闭包" class="headerlink" title="三、闭包"></a>三、闭包</h4><hr>
<h5 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h5><hr>
<ul>
<li>其实是函数嵌套函数</li>
<li>每个函数都是一个独立的作用域</li>
<li>每个都有自己的生命周期</li>
<li>延长局部变量的生命周期</li>
</ul>
<h5 id="3-2-例子"><a href="#3-2-例子" class="headerlink" title="3.2 例子"></a>3.2 例子</h5><hr>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>01<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>02<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>03<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>04<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> liDoms = <span class="built_in">document</span>.getElementById(<span class="string">"list"</span>).getElementsByTagName(<span class="string">"li"</span>);</div><div class="line">       <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;liDoms.length;i++)&#123;</div><div class="line">           (<span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">               liDoms[a].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                   alert(a);</div><div class="line">               &#125;</div><div class="line">           &#125;)(i)</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//函数也是一种数据类型 它和 number string boolean object 特殊在可以打括号去执行它</span></div><div class="line"></div><div class="line">        <span class="comment">//函数中的循环</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> arr = [],i;</div><div class="line">            <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</div><div class="line">                <span class="comment">// arr[i] = (function fn(a)&#123;</span></div><div class="line">                <span class="comment">//     return a;</span></div><div class="line">                <span class="comment">// &#125;)(i);</span></div><div class="line"></div><div class="line">                arr[i] = fn(i);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> arr;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> a;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">var</span> c = test();</div><div class="line">        <span class="comment">//alert(c);</span></div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;c.length;i++)&#123;</div><div class="line">            <span class="keyword">var</span> value = c[i];</div><div class="line">            alert(value);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文链接 &lt;a href=&quot;http://blog.poetries.top/2017/01/10/js-scope&quot;&gt;http://blog.poetries.top/2017/01/10/js-scope&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;一、JS解析顺序和作用域：&quot;&gt;&lt;a href=&quot;#一、JS解析顺序和作用域：&quot; class=&quot;headerlink&quot; title=&quot;一、JS解析顺序和作用域：&quot;&gt;&lt;/a&gt;一、JS解析顺序和作用域：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;解析顺序：&lt;ul&gt;
&lt;li&gt;定义（先找&lt;code&gt;var&lt;/code&gt;  &lt;code&gt;function&lt;/code&gt;）  &lt;/li&gt;
&lt;li&gt;执行 ( 在逐步执行 )&lt;/li&gt;
&lt;li&gt;注意:如果函数名和&lt;code&gt;var&lt;/code&gt;定义的变量相同，&lt;code&gt;var&lt;/code&gt;会被函数覆盖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;作用域：&lt;ul&gt;
&lt;li&gt;每个&lt;code&gt;script&lt;/code&gt;是一个作用域&lt;/li&gt;
&lt;li&gt;每个函数&lt;code&gt;{}&lt;/code&gt;是一个作用域&lt;/li&gt;
&lt;li&gt;程序每执行到一个作用域，都是按照解析顺序解析代码；&lt;/li&gt;
&lt;li&gt;作用域链:从内往外找要找函数内的变量；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="作用域" scheme="http://blog.poetries.top/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
</feed>
